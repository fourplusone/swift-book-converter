{"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations"},"metadata":{"roleHeading":"Article","role":"article","title":"Enumerations","modules":[{"name":"Swift"}]},"primaryContentSections":[{"content":[{"anchor":"overview","text":"Overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"If you are familiar with C, you will know that C enumerations assign related names to a set of integer values. Enumerations in Swift are much more flexible, and don’t have to provide a value for each case of the enumeration. If a value (known as a "},{"type":"emphasis","inlineContent":[{"text":"raw","type":"text"}]},{"type":"text","text":" value) is provided for each enumeration case, the value can be a string, a character, or a value of any integer or floating-point type."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Alternatively, enumeration cases can specify associated values of "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" type to be stored along with each different case value, much as unions or variants do in other languages. You can define a common set of related cases as part of one enumeration, each of which has a different set of values of appropriate types associated with it."}],"type":"paragraph"},{"inlineContent":[{"text":"Enumerations in Swift are first-class types in their own right. They adopt many features traditionally supported only by classes, such as computed properties to provide additional information about the enumeration’s current value, and instance methods to provide functionality related to the values the enumeration represents. Enumerations can also define initializers to provide an initial case value; can be extended to expand their functionality beyond their original implementation; and can conform to protocols to provide standard functionality.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For more about these capabilities, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","type":"reference","isActive":true},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","type":"reference"},{"text":", ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","type":"reference","isActive":true},{"text":", and ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"anchor":"Enumeration-Syntax","text":"Enumeration Syntax","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"You introduce enumerations with the "},{"type":"codeVoice","code":"enum"},{"text":" keyword and place their entire definition within a pair of braces:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["enum SomeEnumeration {","    \/\/ enumeration definition goes here","}"]},{"inlineContent":[{"type":"text","text":"Here’s an example for the four main points of a compass:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["enum CompassPoint {","    case north","    case south","    case east","    case west","}"]},{"inlineContent":[{"text":"The values defined in an enumeration (such as ","type":"text"},{"code":"north","type":"codeVoice"},{"text":", ","type":"text"},{"code":"south","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"east"},{"type":"text","text":", and "},{"type":"codeVoice","code":"west"},{"type":"text","text":") are its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration cases"}]},{"type":"text","text":". You use the "},{"type":"codeVoice","code":"case"},{"type":"text","text":" keyword to introduce new enumeration cases."}],"type":"paragraph"},{"style":"note","name":"Note","content":[{"inlineContent":[{"text":"Swift enumeration cases don’t have an integer value set by default, unlike languages like C and Objective-C. In the ","type":"text"},{"code":"CompassPoint","type":"codeVoice"},{"text":" example above, ","type":"text"},{"code":"north","type":"codeVoice"},{"text":", ","type":"text"},{"code":"south","type":"codeVoice"},{"text":", ","type":"text"},{"code":"east","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"west","type":"codeVoice"},{"text":" don’t implicitly equal ","type":"text"},{"code":"0","type":"codeVoice"},{"text":", ","type":"text"},{"code":"1","type":"codeVoice"},{"text":", ","type":"text"},{"code":"2","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"3","type":"codeVoice"},{"text":". Instead, the different enumeration cases are values in their own right, with an explicitly defined type of ","type":"text"},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside"},{"inlineContent":[{"text":"Multiple cases can appear on a single line, separated by commas:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["enum Planet {","    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune","}"]},{"inlineContent":[{"type":"text","text":"Each enumeration definition defines a new type. Like other types in Swift, their names (such as "},{"code":"CompassPoint","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Planet","type":"codeVoice"},{"type":"text","text":") start with a capital letter. Give enumeration types singular rather than plural names, so that they read as self-evident:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var directionToHead = CompassPoint.west"]},{"inlineContent":[{"type":"text","text":"The type of "},{"type":"codeVoice","code":"directionToHead"},{"type":"text","text":" is inferred when it’s initialized with one of the possible values of "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":". Once "},{"type":"codeVoice","code":"directionToHead"},{"type":"text","text":" is declared as a "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":", you can set it to a different "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" value using a shorter dot syntax:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["directionToHead = .east"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of "},{"code":"directionToHead","type":"codeVoice"},{"type":"text","text":" is already known, and so you can drop the type when setting its value. This makes for highly readable code when working with explicitly typed enumeration values."}]},{"type":"heading","text":"Matching Enumeration Values with a Switch Statement","anchor":"Matching-Enumeration-Values-with-a-Switch-Statement","level":2},{"type":"paragraph","inlineContent":[{"text":"You can match individual enumeration values with a ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["directionToHead = .south","switch directionToHead {","case .north:","    print(\"Lots of planets have a north\")","case .south:","    print(\"Watch out for penguins\")","case .east:","    print(\"Where the sun rises\")","case .west:","    print(\"Where the skies are blue\")","}","\/\/ Prints \"Watch out for penguins\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can read this code as:"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"“Consider the value of "},{"type":"codeVoice","code":"directionToHead"},{"type":"text","text":". In the case where it equals "},{"type":"codeVoice","code":".north"},{"type":"text","text":", print "},{"type":"codeVoice","code":"\"Lots of planets have a north\""},{"type":"text","text":". In the case where it equals "},{"type":"codeVoice","code":".south"},{"type":"text","text":", print "},{"type":"codeVoice","code":"\"Watch out for penguins\""},{"type":"text","text":".”"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"…and so on."}]},{"inlineContent":[{"type":"text","text":"As described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow"},{"type":"text","text":", a "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement must be exhaustive when considering an enumeration’s cases. If the "},{"type":"codeVoice","code":"case"},{"type":"text","text":" for "},{"type":"codeVoice","code":".west"},{"type":"text","text":" is omitted, this code doesn’t compile, because it doesn’t consider the complete list of "},{"type":"codeVoice","code":"CompassPoint"},{"type":"text","text":" cases. Requiring exhaustiveness ensures that enumeration cases aren’t accidentally omitted."}],"type":"paragraph"},{"inlineContent":[{"text":"When it isn’t appropriate to provide a ","type":"text"},{"code":"case","type":"codeVoice"},{"text":" for every enumeration case, you can provide a ","type":"text"},{"code":"default","type":"codeVoice"},{"text":" case to cover any cases that aren’t addressed explicitly:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let somePlanet = Planet.earth","switch somePlanet {","case .earth:","    print(\"Mostly harmless\")","default:","    print(\"Not a safe place for humans\")","}","\/\/ Prints \"Mostly harmless\""]},{"type":"heading","text":"Iterating over Enumeration Cases","anchor":"Iterating-over-Enumeration-Cases","level":2},{"inlineContent":[{"text":"For some enumerations, it’s useful to have a collection of all of that enumeration’s cases. You enable this by writing ","type":"text"},{"code":": CaseIterable","type":"codeVoice"},{"text":" after the enumeration’s name. Swift exposes a collection of all the cases as an ","type":"text"},{"code":"allCases","type":"codeVoice"},{"text":" property of the enumeration type. Here’s an example:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum Beverage: CaseIterable {","    case coffee, tea, juice","}","let numberOfChoices = Beverage.allCases.count","print(\"\\(numberOfChoices) beverages available\")","\/\/ Prints \"3 beverages available\""]},{"inlineContent":[{"type":"text","text":"In the example above, you write "},{"type":"codeVoice","code":"Beverage.allCases"},{"type":"text","text":" to access a collection that contains all of the cases of the "},{"type":"codeVoice","code":"Beverage"},{"type":"text","text":" enumeration. You can use "},{"type":"codeVoice","code":"allCases"},{"type":"text","text":" like any other collection—the collection’s elements are instances of the enumeration type, so in this case they’re "},{"type":"codeVoice","code":"Beverage"},{"type":"text","text":" values. The example above counts how many cases there are, and the example below uses a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop to iterate over all the cases."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["for beverage in Beverage.allCases {","    print(beverage)","}","\/\/ coffee","\/\/ tea","\/\/ juice"]},{"inlineContent":[{"type":"text","text":"The syntax used in the examples above marks the enumeration as conforming to the "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable","type":"reference","isActive":true},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/caseiterable]"},{"type":"text","text":" protocol. For information about protocols, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","text":"Associated Values","anchor":"Associated-Values","level":2},{"inlineContent":[{"text":"The examples in the previous section show how the cases of an enumeration are a defined (and typed) value in their own right. You can set a constant or variable to ","type":"text"},{"code":"Planet.earth","type":"codeVoice"},{"text":", and check for this value later. However, it’s sometimes useful to be able to store values of other types alongside these case values. This additional information is called an ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"associated value"}]},{"type":"text","text":", and it varies each time you use that case as a value in your code."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can define Swift enumerations to store associated values of any given type, and the value types can be different for each case of the enumeration if needed. Enumerations similar to these are known as "},{"type":"emphasis","inlineContent":[{"text":"discriminated unions","type":"text"}]},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"type":"text","text":"tagged unions"}]},{"type":"text","text":", or "},{"type":"emphasis","inlineContent":[{"text":"variants","type":"text"}]},{"type":"text","text":" in other programming languages."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, suppose an inventory tracking system needs to track products by two different types of barcode. Some products are labeled with 1D barcodes in UPC format, which uses the numbers "},{"code":"0","type":"codeVoice"},{"type":"text","text":" to "},{"code":"9","type":"codeVoice"},{"type":"text","text":". Each barcode has a number system digit, followed by five manufacturer code digits and five product code digits. These are followed by a check digit to verify that the code has been scanned correctly:"}],"type":"paragraph"},{"inlineContent":[{"identifier":"barcode_UPC","type":"image"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Other products are labeled with 2D barcodes in QR code format, which can use any ISO 8859-1 character and can encode a string up to 2,953 characters long:"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"barcode_QR"}],"type":"paragraph"},{"inlineContent":[{"text":"It’s convenient for an inventory tracking system to store UPC barcodes as a tuple of four integers, and QR code barcodes as a string of any length.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In Swift, an enumeration to define product barcodes of either type might look like this:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum Barcode {","    case upc(Int, Int, Int, Int)","    case qrCode(String)","}"]},{"inlineContent":[{"type":"text","text":"This can be read as:"}],"type":"paragraph"},{"inlineContent":[{"text":"“Define an enumeration type called ","type":"text"},{"code":"Barcode","type":"codeVoice"},{"text":", which can take either a value of ","type":"text"},{"code":"upc","type":"codeVoice"},{"text":" with an associated value of type (","type":"text"},{"code":"Int","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":"), or a value of ","type":"text"},{"code":"qrCode","type":"codeVoice"},{"text":" with an associated value of type ","type":"text"},{"code":"String","type":"codeVoice"},{"text":".”","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This definition doesn’t provide any actual "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" or "},{"type":"codeVoice","code":"String"},{"text":" values—it just defines the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"text":" of associated values that ","type":"text"},{"code":"Barcode","type":"codeVoice"},{"text":" constants and variables can store when they’re equal to ","type":"text"},{"code":"Barcode.upc","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"Barcode.qrCode","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can then create new barcodes using either type:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var productBarcode = Barcode.upc(8, 85909, 51226, 3)"]},{"inlineContent":[{"text":"This example creates a new variable called ","type":"text"},{"code":"productBarcode","type":"codeVoice"},{"text":" and assigns it a value of ","type":"text"},{"code":"Barcode.upc","type":"codeVoice"},{"text":" with an associated tuple value of ","type":"text"},{"code":"(8, 85909, 51226, 3)","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can assign the same product a different type of barcode:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["productBarcode = .qrCode(\"ABCDEFGHIJKLMNOP\")"]},{"inlineContent":[{"type":"text","text":"At this point, the original "},{"type":"codeVoice","code":"Barcode.upc"},{"type":"text","text":" and its integer values are replaced by the new "},{"type":"codeVoice","code":"Barcode.qrCode"},{"type":"text","text":" and its string value. Constants and variables of type "},{"type":"codeVoice","code":"Barcode"},{"type":"text","text":" can store either a "},{"type":"codeVoice","code":".upc"},{"type":"text","text":" or a "},{"type":"codeVoice","code":".qrCode"},{"type":"text","text":" (together with their associated values), but they can store only one of them at any given time."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can check the different barcode types using a switch statement, similar to the example in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement"},{"type":"text","text":". This time, however, the associated values are extracted as part of the switch statement. You extract each associated value as a constant (with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" prefix) or a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" prefix) for use within the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" case’s body:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["switch productBarcode {","case .upc(let numberSystem, let manufacturer, let product, let check):","    print(\"UPC: \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")","case .qrCode(let productCode):","    print(\"QR code: \\(productCode).\")","}","\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""]},{"inlineContent":[{"type":"text","text":"If all of the associated values for an enumeration case are extracted as constants, or if all are extracted as variables, you can place a single "},{"type":"codeVoice","code":"var"},{"type":"text","text":" or "},{"type":"codeVoice","code":"let"},{"type":"text","text":" annotation before the case name, for brevity:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["switch productBarcode {","case let .upc(numberSystem, manufacturer, product, check):","    print(\"UPC : \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")","case let .qrCode(productCode):","    print(\"QR code: \\(productCode).\")","}","\/\/ Prints \"QR code: ABCDEFGHIJKLMNOP.\""]},{"type":"heading","text":"Raw Values","anchor":"Raw-Values","level":2},{"inlineContent":[{"text":"The barcode example in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Associated-Values","isActive":true,"type":"reference"},{"text":" shows how cases of an enumeration can declare that they store associated values of different types. As an alternative to associated values, enumeration cases can come prepopulated with default values (called ","type":"text"},{"inlineContent":[{"type":"text","text":"raw values"}],"type":"emphasis"},{"text":"), which are all of the same type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Here’s an example that stores raw ASCII values alongside named enumeration cases:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum ASCIIControlCharacter: Character {","    case tab = \"\\t\"","    case lineFeed = \"\\n\"","    case carriageReturn = \"\\r\"","}"]},{"inlineContent":[{"text":"Here, the raw values for an enumeration called ","type":"text"},{"code":"ASCIIControlCharacter","type":"codeVoice"},{"text":" are defined to be of type ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":", and are set to some of the more common ASCII control characters. ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" values are described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Raw values can be strings, characters, or any of the integer or floating-point number types. Each raw value must be unique within its enumeration declaration.","type":"text"}],"type":"paragraph"},{"type":"aside","content":[{"inlineContent":[{"type":"text","text":"Raw values are "},{"type":"emphasis","inlineContent":[{"text":"not","type":"text"}]},{"type":"text","text":" the same as associated values. Raw values are set to prepopulated values when you first define the enumeration in your code, like the three ASCII codes above. The raw value for a particular enumeration case is always the same. Associated values are set when you create a new constant or variable based on one of the enumeration’s cases, and can be different each time you do so."}],"type":"paragraph"}],"name":"Note","style":"note"},{"type":"heading","text":"Implicitly Assigned Raw Values","anchor":"Implicitly-Assigned-Raw-Values","level":3},{"inlineContent":[{"type":"text","text":"When you’re working with enumerations that store integer or string raw values, you don’t have to explicitly assign a raw value for each case. When you don’t, Swift automatically assigns the values for you."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, when integers are used for raw values, the implicit value for each case is one more than the previous case. If the first case doesn’t have a value set, its value is "},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The enumeration below is a refinement of the earlier "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":" enumeration, with integer raw values to represent each planet’s order from the sun:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum Planet: Int {","    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune","}"]},{"inlineContent":[{"type":"text","text":"In the example above, "},{"code":"Planet.mercury","type":"codeVoice"},{"type":"text","text":" has an explicit raw value of "},{"code":"1","type":"codeVoice"},{"type":"text","text":", "},{"code":"Planet.venus","type":"codeVoice"},{"type":"text","text":" has an implicit raw value of "},{"code":"2","type":"codeVoice"},{"type":"text","text":", and so on."}],"type":"paragraph"},{"inlineContent":[{"text":"When strings are used for raw values, the implicit value for each case is the text of that case’s name.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The enumeration below is a refinement of the earlier ","type":"text"},{"type":"codeVoice","code":"CompassPoint"},{"text":" enumeration, with string raw values to represent each direction’s name:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum CompassPoint: String {","    case north, south, east, west","}"]},{"inlineContent":[{"text":"In the example above, ","type":"text"},{"type":"codeVoice","code":"CompassPoint.south"},{"text":" has an implicit raw value of ","type":"text"},{"code":"\"south\"","type":"codeVoice"},{"text":", and so on.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You access the raw value of an enumeration case with its ","type":"text"},{"code":"rawValue","type":"codeVoice"},{"text":" property:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let earthsOrder = Planet.earth.rawValue","\/\/ earthsOrder is 3","","let sunsetDirection = CompassPoint.west.rawValue","\/\/ sunsetDirection is \"west\""]},{"type":"heading","text":"Initializing from a Raw Value","anchor":"Initializing-from-a-Raw-Value","level":3},{"inlineContent":[{"type":"text","text":"If you define an enumeration with a raw-value type, the enumeration automatically receives an initializer that takes a value of the raw value’s type (as a parameter called "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":") and returns either an enumeration case or "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". You can use this initializer to try to create a new instance of the enumeration."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This example identifies Uranus from its raw value of "},{"type":"codeVoice","code":"7"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let possiblePlanet = Planet(rawValue: 7)","\/\/ possiblePlanet is of type Planet? and equals Planet.uranus"]},{"inlineContent":[{"type":"text","text":"Not all possible "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" values will find a matching planet, however. Because of this, the raw value initializer always returns an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" enumeration case. In the example above, "},{"type":"codeVoice","code":"possiblePlanet"},{"type":"text","text":" is of type "},{"type":"codeVoice","code":"Planet?"},{"type":"text","text":", or “optional "},{"type":"codeVoice","code":"Planet"},{"type":"text","text":".”"}],"type":"paragraph"},{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The raw value initializer is a failable initializer, because not every raw value will return an enumeration case. For more information, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Failable-Initializers"},{"type":"text","text":"."}]}],"name":"Note","style":"note"},{"inlineContent":[{"text":"If you try to find a planet with a position of ","type":"text"},{"code":"11","type":"codeVoice"},{"text":", the optional ","type":"text"},{"code":"Planet","type":"codeVoice"},{"text":" value returned by the raw value initializer will be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let positionToFind = 11","if let somePlanet = Planet(rawValue: positionToFind) {","    switch somePlanet {","    case .earth:","        print(\"Mostly harmless\")","    default:","        print(\"Not a safe place for humans\")","    }","} else {","    print(\"There isn't a planet at position \\(positionToFind)\")","}","\/\/ Prints \"There isn't a planet at position 11\""]},{"inlineContent":[{"text":"This example uses optional binding to try to access a planet with a raw value of ","type":"text"},{"code":"11","type":"codeVoice"},{"text":". The statement ","type":"text"},{"code":"if let somePlanet = Planet(rawValue: 11)","type":"codeVoice"},{"text":" creates an optional ","type":"text"},{"code":"Planet","type":"codeVoice"},{"text":", and sets ","type":"text"},{"code":"somePlanet","type":"codeVoice"},{"text":" to the value of that optional ","type":"text"},{"code":"Planet","type":"codeVoice"},{"text":" if it can be retrieved. In this case, it isn’t possible to retrieve a planet with a position of ","type":"text"},{"code":"11","type":"codeVoice"},{"text":", and so the ","type":"text"},{"code":"else","type":"codeVoice"},{"text":" branch is executed instead.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Recursive Enumerations","anchor":"Recursive-Enumerations","level":2},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"recursive enumeration"}],"type":"emphasis"},{"text":" is an enumeration that has another instance of the enumeration as the associated value for one or more of the enumeration cases. You indicate that an enumeration case is recursive by writing ","type":"text"},{"code":"indirect","type":"codeVoice"},{"text":" before it, which tells the compiler to insert the necessary layer of indirection.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, here is an enumeration that stores simple arithmetic expressions:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum ArithmeticExpression {","    case number(Int)","    indirect case addition(ArithmeticExpression, ArithmeticExpression)","    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)","}"]},{"inlineContent":[{"type":"text","text":"You can also write "},{"type":"codeVoice","code":"indirect"},{"type":"text","text":" before the beginning of the enumeration to enable indirection for all of the enumeration’s cases that have an associated value:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["indirect enum ArithmeticExpression {","    case number(Int)","    case addition(ArithmeticExpression, ArithmeticExpression)","    case multiplication(ArithmeticExpression, ArithmeticExpression)","}"]},{"inlineContent":[{"type":"text","text":"This enumeration can store three kinds of arithmetic expressions: a plain number, the addition of two expressions, and the multiplication of two expressions. The "},{"type":"codeVoice","code":"addition"},{"type":"text","text":" and "},{"type":"codeVoice","code":"multiplication"},{"type":"text","text":" cases have associated values that are also arithmetic expressions—these associated values make it possible to nest expressions. For example, the expression "},{"type":"codeVoice","code":"(5 + 4) * 2"},{"type":"text","text":" has a number on the right-hand side of the multiplication and another expression on the left-hand side of the multiplication. Because the data is nested, the enumeration used to store the data also needs to support nesting—this means the enumeration needs to be recursive. The code below shows the "},{"type":"codeVoice","code":"ArithmeticExpression"},{"type":"text","text":" recursive enumeration being created for "},{"type":"codeVoice","code":"(5 + 4) * 2"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let five = ArithmeticExpression.number(5)","let four = ArithmeticExpression.number(4)","let sum = ArithmeticExpression.addition(five, four)","let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))"]},{"inlineContent":[{"text":"A recursive function is a straightforward way to work with data that has a recursive structure. For example, here’s a function that evaluates an arithmetic expression:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func evaluate(_ expression: ArithmeticExpression) -> Int {","    switch expression {","    case let .number(value):","        return value","    case let .addition(left, right):","        return evaluate(left) + evaluate(right)","    case let .multiplication(left, right):","        return evaluate(left) * evaluate(right)","    }","}","","print(evaluate(product))","\/\/ Prints \"18\""]},{"inlineContent":[{"text":"This function evaluates a plain number by simply returning the associated value. It evaluates an addition or multiplication by evaluating the expression on the left-hand side, evaluating the expression on the right-hand side, and then adding them or multiplying them.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"kind":"article","variants":[{"paths":["\/documentation\/swift\/enumerations"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"],"title":"Language Guide"}],"schemaVersion":{"minor":3,"major":0,"patch":0},"sections":[],"abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code."}],"references":{"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"url":"\/documentation\/swift\/stringsandcharacters","role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"text":"string","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a series of characters, such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":". Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"text":" type. The contents of a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" can be accessed in various ways, including as a collection of ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" values.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","type":"topic"},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"title":"Control Flow","url":"\/documentation\/swift\/controlflow","abstract":[{"text":"Swift provides a variety of control flow statements. These include ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" loops to perform a task multiple times; ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"continue"},{"text":" to transfer the flow of execution to another point in your code.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Extensions":{"role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"retroactive modeling","type":"text"}]},{"type":"text","text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","kind":"article","url":"\/documentation\/swift\/extensions","title":"Extensions"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes":{"url":"\/documentation\/swift\/collectiontypes","role":"article","title":"Collection Types","abstract":[{"type":"text","text":"Swift provides three primary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection types"}]},{"type":"text","text":", known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"title":"Initialization","url":"\/documentation\/swift\/initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Closures":{"url":"\/documentation\/swift\/closures","role":"article","title":"Closures","abstract":[{"inlineContent":[{"type":"text","text":"Closures"}],"type":"emphasis"},{"type":"text","text":" are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Inheritance":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","abstract":[{"text":"A class can ","type":"text"},{"inlineContent":[{"text":"inherit","type":"text"}],"type":"emphasis"},{"text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a ","type":"text"},{"inlineContent":[{"text":"subclass","type":"text"}],"type":"emphasis"},{"text":", and the class it inherits from is known as its ","type":"text"},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/inheritance","title":"Inheritance","type":"topic","role":"article"},"doc://com.apple.Swift/documentation/Swift/Concurrency":{"title":"Concurrency","url":"\/documentation\/swift\/concurrency","abstract":[{"text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Parallel code","type":"text"}]},{"type":"text","text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Generics":{"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner.","type":"text"}],"url":"\/documentation\/swift\/generics","role":"article","title":"Generics","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"url":"\/documentation\/swift\/advancedoperators","role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","isActive":true},{"type":"text","text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Protocols":{"role":"article","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"protocol","type":"text"}]},{"text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be ","type":"text"},{"inlineContent":[{"text":"adopted","type":"text"}],"type":"emphasis"},{"text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to ","type":"text"},{"inlineContent":[{"text":"conform","type":"text"}],"type":"emphasis"},{"type":"text","text":" to that protocol."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","kind":"article","url":"\/documentation\/swift\/protocols","title":"Protocols"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting":{"title":"Automatic Reference Counting","url":"\/documentation\/swift\/automaticreferencecounting","abstract":[{"text":"Swift uses ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/NestedTypes":{"title":"Nested Types","url":"\/documentation\/swift\/nestedtypes","abstract":[{"text":"Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"nested types","type":"text"}]},{"text":", whereby you nest supporting enumerations, classes, and structures within the definition of the type they support.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"role":"article","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"deinitializer","type":"text"}]},{"text":" is called immediately before a class instance is deallocated. You write deinitializers with the ","type":"text"},{"code":"deinit","type":"codeVoice"},{"text":" keyword, similar to how initializers are written with the ","type":"text"},{"code":"init","type":"codeVoice"},{"type":"text","text":" keyword. Deinitializers are only available on class types."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","kind":"article","url":"\/documentation\/swift\/deinitialization","title":"Deinitialization"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","abstract":[{"text":"An ","type":"text"},{"inlineContent":[{"text":"operator","type":"text"}],"type":"emphasis"},{"text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (","type":"text"},{"code":"+","type":"codeVoice"},{"text":") adds two numbers, as in ","type":"text"},{"code":"let i = 1 + 2","type":"codeVoice"},{"text":", and the logical AND operator (","type":"text"},{"code":"&&","type":"codeVoice"},{"text":") combines two Boolean values, as in ","type":"text"},{"code":"if enteredDoorCode && passedRetinaScan","type":"codeVoice"},{"text":".","type":"text"}],"kind":"article","url":"\/documentation\/swift\/basicoperators","title":"Basic Operators","type":"topic","role":"article"},"doc://com.apple.Swift/documentation/Swift/Declarations#Failable-Initializers":{"abstract":[],"title":"Failable Initializers","type":"topic","url":"\/documentation\/swift\/declarations#Failable-Initializers","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Failable-Initializers","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Functions":{"title":"Functions","url":"\/documentation\/swift\/functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift":{"title":"Swift","url":"\/documentation\/swift","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","role":"collection","type":"topic"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/swift\/optionalchaining","role":"article","title":"Optional Chaining","abstract":[{"inlineContent":[{"text":"Optional chaining","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", the property, method, or subscript call returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"title":"Access Control","url":"\/documentation\/swift\/accesscontrol","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Properties":{"url":"\/documentation\/swift\/properties","role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"text":"Properties","type":"text"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Subscripts":{"title":"Subscripts","url":"\/documentation\/swift\/subscripts","abstract":[{"text":"Classes, structures, and enumerations can define ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"subscripts","type":"text"}]},{"text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" instance as "},{"code":"someArray[index]","type":"codeVoice"},{"type":"text","text":" and elements in a "},{"code":"Dictionary","type":"codeVoice"},{"text":" instance as ","type":"text"},{"type":"codeVoice","code":"someDictionary[key]"},{"text":".","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","role":"article","type":"topic"},"barcode_QR":{"identifier":"barcode_QR","type":"image","alt":null,"variants":[{"url":"\/images\/barcode_QR@2x.png","traits":["2x","light"]}]},"barcode_UPC":{"identifier":"barcode_UPC","type":"image","alt":null,"variants":[{"url":"\/images\/barcode_UPC@2x.png","traits":["2x","light"]}]},"doc://com.apple.Swift/documentation/Swift/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement","title":"Matching Enumeration Values with a Switch Statement","url":"\/documentation\/swift\/enumerations#Matching-Enumeration-Values-with-a-Switch-Statement","type":"topic","abstract":[]},"https://developer.apple.com/documentation/swift/caseiterable":{"titleInlineContent":[{"type":"text","text":"CaseIterable"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/caseiterable","title":"CaseIterable"},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"title":"Opaque Types","role":"article","kind":"article","url":"\/documentation\/swift\/opaquetypes","type":"topic","abstract":[{"text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t.","type":"text"}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"text":" and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"classes","type":"text"}]},{"type":"text","text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","kind":"article","url":"\/documentation\/swift\/classesandstructures","title":"Structures and Classes"},"doc://com.apple.Swift/documentation/Swift/TypeCasting":{"url":"\/documentation\/swift\/typecasting","role":"article","title":"Type Casting","abstract":[{"inlineContent":[{"type":"text","text":"Type casting"}],"type":"emphasis"},{"type":"text","text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Enumerations#Associated-Values":{"type":"topic","title":"Associated Values","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Associated-Values","url":"\/documentation\/swift\/enumerations#Associated-Values","abstract":[],"kind":"section"},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"title":"Memory Safety","url":"\/documentation\/swift\/memorysafety","abstract":[{"text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"url":"\/documentation\/swift\/errorhandling","role":"article","title":"Error Handling","abstract":[{"inlineContent":[{"type":"text","text":"Error handling"}],"type":"emphasis"},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","type":"topic"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"url":"\/documentation\/swift\/thebasics","role":"article","title":"The Basics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Methods":{"url":"\/documentation\/swift\/methods","role":"article","title":"Methods","abstract":[{"inlineContent":[{"type":"text","text":"Methods"}],"type":"emphasis"},{"type":"text","text":" are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","type":"topic"}}}