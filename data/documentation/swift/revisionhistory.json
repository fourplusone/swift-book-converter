{"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.7.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency#Sendable-Types","type":"reference"},{"text":" section, with information about sending data between actors and tasks, and added information about the ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"@unchecked","type":"codeVoice"},{"text":" attributes to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Sendable","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#unchecked","type":"reference"},{"text":" sections.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Regular-Expression-Literals","isActive":true},{"type":"text","text":" section with information about creating a regular expression."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the short form of "},{"code":"if","type":"codeVoice"},{"type":"text","text":"-"},{"code":"let","type":"codeVoice"},{"type":"text","text":" to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Optional-Binding"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about ","type":"text"},{"type":"codeVoice","code":"#unavailable"},{"text":" to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#Checking-API-Availability"},{"text":" section.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2022-03-14","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.6."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Explicit-Member-Expression","type":"reference"},{"text":" section with information about using ","type":"text"},{"code":"#if","type":"codeVoice"},{"text":" around chained method calls and other postfix expressions.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the visual styling of figures throughout."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2021-09-20"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.5."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about asynchronous functions, tasks, and actors to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","isActive":true},{"text":" chapter, and to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Actor-Declaration","isActive":true},{"text":", ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Asynchronous-Functions-and-Methods","isActive":true},{"text":", and ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Await-Operator","isActive":true},{"text":" sections.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Identifiers","isActive":true},{"type":"text","text":" section with information about identifiers that start with an underscore."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2021-04-26","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.4."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Result-Builders","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#resultBuilder","type":"reference"},{"text":" sections with information about result builders.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","isActive":true},{"text":" section with information about how in-out parameters can be implicitly converted to unsafe pointers in a function call.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Variadic-Parameters","type":"reference"},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Function-Declaration","type":"reference"},{"type":"text","text":" sections, now that a function can have multiple variadic parameters."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Implicit-Member-Expression"},{"type":"text","text":" section, now that implicit member expressions can be chained together."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2020-09-16","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 5.3."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about multiple trailing closures to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Trailing-Closures"},{"type":"text","text":" section, and added information about how trailing closures are matched to parameters to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Function-Call-Expression"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about synthesized implementations of "},{"type":"codeVoice","code":"Comparable"},{"type":"text","text":" for enumerations to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Contextual-Where-Clauses","isActive":true,"type":"reference"},{"type":"text","text":" section now that you can write a generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause in more places."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Unowned-Optional-References","isActive":true},{"type":"text","text":" section with information about using unowned references with optional values."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"code":"@main","type":"codeVoice"},{"type":"text","text":" attribute to the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#main","type":"reference"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added ","type":"text"},{"code":"#filePath","type":"codeVoice"},{"text":" to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Literal-Expression"},{"text":" section, and updated the discussion of ","type":"text"},{"code":"#file","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Escaping-Closures"},{"type":"text","text":" section, now that closures can refer to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" implicitly in more scenarios."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling#Handling-Errors-Using-Do-Catch","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Do-Statement","isActive":true,"type":"reference"},{"type":"text","text":" sections, now that a "},{"code":"catch","type":"codeVoice"},{"type":"text","text":" clause can match against multiple errors."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added more information about "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" and moved it into the new "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Any-Type","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Property-Observers"},{"text":" section, now that lazy properties can have observers.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Declaration"},{"text":" section, now that members of an enumeration can satisfy protocol requirements.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Stored-Variable-Observers-and-Property-Observers","isActive":true},{"text":" section to describe when the getter is called before the observer.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","type":"reference","isActive":true},{"text":" chapter to mention atomic operations.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2020-03-24"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 5.2.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about passing a key path instead of a closure to the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Key-Path-Expression","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Methods-with-Special-Names","type":"reference"},{"text":" section with information about syntactic sugar the lets instances of classes, structures, and enumerations be used with function call syntax.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts#Subscript-Options","isActive":true},{"type":"text","text":" section, now that subscripts support parameters with default values."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Self-Type","type":"reference","isActive":true},{"type":"text","text":" section, now that the "},{"code":"Self","type":"codeVoice"},{"type":"text","text":" can be used in more contexts."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Implicitly-Unwrapped-Optionals","type":"reference"},{"text":" section to make it clearer that an implicitly unwrapped optional value can be used as either an optional or non-optional value.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2019-09-10","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 5.1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about functions that specify a protocol that their return value conforms to, instead of providing a specific named return type, to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes"},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"text":"Added information about property wrappers to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Property-Wrappers","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about enumerations and structures that are frozen for library evolution to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#frozen"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Functions-With-an-Implicit-Return","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Shorthand-Getter-Declaration","isActive":true},{"type":"text","text":" sections with information about functions that omit "},{"type":"codeVoice","code":"return"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using subscripts on types to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts#Type-Subscripts","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns#Enumeration-Case-Pattern"},{"text":" section, now that an enumeration case pattern can match an optional value.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Memberwise-Initializers-for-Structure-Types"},{"type":"text","text":" section, now that memberwise initializers support omitting parameters for properties that have a default value."}]}]},{"content":[{"inlineContent":[{"text":"Added information about dynamic members that are looked up by key path at runtime to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#dynamicMemberLookup","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added ","type":"text"},{"type":"codeVoice","code":"macCatalyst"},{"text":" to the list of target environments in ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Conditional-Compilation-Block","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Self-Type","type":"reference","isActive":true},{"text":" section, now that ","type":"text"},{"code":"Self","type":"codeVoice"},{"text":" can be used to refer to the type introduced by the current class, structure, or enumeration declaration.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"2019-03-25"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 5.0.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Extended-String-Delimiters"},{"text":" section and updated the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#String-Literals"},{"text":" section with information about extended string delimiters.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#dynamicCallable"},{"type":"text","text":" section with information about dynamically calling instances as functions using the "},{"type":"codeVoice","code":"dynamicCallable"},{"type":"text","text":" attribute."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#unknown","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","type":"reference","isActive":true},{"text":" sections with information about handling future enumeration cases in switch statements using the ","type":"text"},{"code":"unknown","type":"codeVoice"},{"text":" switch case attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the identity key path (","type":"text"},{"type":"codeVoice","code":"\\.self"},{"text":") to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Key-Path-Expression","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using the less than ("},{"type":"codeVoice","code":"<"},{"type":"text","text":") operator in platform conditions to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Conditional-Compilation-Block"},{"type":"text","text":" section."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2018-09-17"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.2."}]}]},{"content":[{"inlineContent":[{"text":"Added information about accessing all of an enumeration’s cases to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Iterating-over-Enumeration-Cases","type":"reference","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about "},{"type":"codeVoice","code":"#error"},{"type":"text","text":" and "},{"type":"codeVoice","code":"#warning"},{"type":"text","text":" to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Compile-Time-Diagnostic-Statement"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about inlining to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section under the "},{"type":"codeVoice","code":"inlinable"},{"type":"text","text":" and "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" attributes."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about members that are looked up by name at runtime to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes","isActive":true},{"text":" section under the ","type":"text"},{"type":"codeVoice","code":"dynamicMemberLookup"},{"text":" attribute.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"requires_stored_property_inits","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"warn_unqualified_access","type":"codeVoice"},{"text":" attributes to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about how to conditionally compile code depending on the Swift compiler version being used to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Conditional-Compilation-Block","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about "},{"code":"#dsohandle","type":"codeVoice"},{"type":"text","text":" to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Literal-Expression","isActive":true},{"type":"text","text":" section."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2018-03-29","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.1."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about synthesized implementations of equivalence operators to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Equivalence-Operators"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about conditional protocol conformance to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Extension-Declaration","isActive":true},{"text":" section of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","isActive":true},{"text":" chapter, and to the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Conditionally-Conforming-to-a-Protocol","isActive":true},{"text":" section of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about recursive protocol constraints to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"canImport()","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"targetEnvironment()","type":"codeVoice"},{"text":" platform conditions to ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Conditional-Compilation-Block","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-12-04"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 4.0.3.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Key-Path-Expression","type":"reference"},{"text":" section, now that key paths support subscript components.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2017-09-19"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 4.0."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about exclusive access to memory to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety"},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Associated-Types-with-a-Generic-Where-Clause"},{"text":" section, now that you can use generic ","type":"text"},{"type":"codeVoice","code":"where"},{"text":" clauses to constrain associated types.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about multiline string literals to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#String-Literals","type":"reference"},{"text":" section of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","type":"reference"},{"text":" chapter, and to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#String-Literals","type":"reference"},{"text":" section of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","type":"reference"},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes","isActive":true,"type":"reference"},{"text":", now that this attribute is inferred in fewer places.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Generic-Subscripts"},{"type":"text","text":" section, now that subscripts can be generic."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocol-Composition","isActive":true},{"type":"text","text":" section of the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","isActive":true},{"type":"text","text":" chapter, and in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Protocol-Composition-Type","isActive":true},{"type":"text","text":" section of the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","isActive":true},{"type":"text","text":" chapter, now that protocol composition types can contain a superclass requirement."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of protocol extensions in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Extension-Declaration","isActive":true,"type":"reference"},{"text":" now that ","type":"text"},{"code":"final","type":"codeVoice"},{"text":" isn’t allowed in them.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about preconditions and fatal errors to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Assertions-and-Preconditions","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2017-03-27","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 3.1."}]}]},{"content":[{"inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Extensions-with-a-Generic-Where-Clause","type":"reference"},{"text":" section with information about extensions that include requirements.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added examples of iterating over a range to the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#For-In-Loops","type":"reference"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added an example of failable numeric conversions to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Failable-Initializers","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes"},{"type":"text","text":" section about using the "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute with a Swift language version."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Function-Type","type":"reference","isActive":true},{"type":"text","text":" section to note that argument labels aren’t allowed when writing a function type."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of Swift language version numbers in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Conditional-Compilation-Block","isActive":true},{"type":"text","text":" section, now that an optional patch number is allowed."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion in the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Function-Type","isActive":true},{"text":" section, now that Swift distinguishes between functions that take multiple parameters and functions that take a single parameter of a tuple type.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed the Dynamic Type Expression section from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions"},{"type":"text","text":" chapter, now that "},{"code":"type(of:)","type":"codeVoice"},{"type":"text","text":" is a Swift standard library function."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2016-10-27","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 3.0.1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of weak and unowned references in the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","type":"reference","isActive":true},{"text":" chapter.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"unowned","type":"codeVoice"},{"text":", ","type":"text"},{"code":"unowned(safe)","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"unowned(unsafe)","type":"codeVoice"},{"text":" declaration modifiers in the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Declaration-Modifiers","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"reference"},{"type":"text","text":" section about using an optional value when a value of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" is expected."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","type":"reference","isActive":true},{"type":"text","text":" chapter to separate the discussion of parenthesized expressions and tuple expressions."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2016-09-13"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 3.0.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of functions in the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","type":"reference","isActive":true},{"text":" chapter and the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Function-Declaration","type":"reference","isActive":true},{"text":" section to note that all parameters get an argument label by default.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of operators in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","isActive":true},{"type":"text","text":" chapter, now that you implement them as type methods instead of as global functions."}]}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"open","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"fileprivate","type":"codeVoice"},{"text":" access-level modifiers to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" in the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Function-Declaration","type":"reference"},{"type":"text","text":" section to note that it appears in front of a parameter’s type instead of in front of a parameter’s name."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"type":"codeVoice","code":"@noescape"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" attributes in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Escaping-Closures"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Autoclosures"},{"type":"text","text":" sections and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes"},{"type":"text","text":" chapter now that they’re type attributes, rather than declaration attributes."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about operator precedence groups to the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Precedence-for-Custom-Infix-Operators","type":"reference"},{"type":"text","text":" section of the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","type":"reference"},{"type":"text","text":" chapter, and to the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Precedence-Group-Declaration","type":"reference"},{"type":"text","text":" section of the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated discussion throughout to use macOS instead of OS X, "},{"code":"Error","type":"codeVoice"},{"type":"text","text":" instead of "},{"code":"ErrorProtocol","type":"codeVoice"},{"type":"text","text":", and protocol names such as "},{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"type":"text","text":" instead of "},{"code":"StringLiteralConvertible","type":"codeVoice"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Generic-Where-Clauses","isActive":true},{"type":"text","text":" section of the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","isActive":true},{"type":"text","text":" chapter and in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","isActive":true},{"type":"text","text":" chapter, now that generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses are written at the end of a declaration."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Escaping-Closures"},{"type":"text","text":" section, now that closures are nonescaping by default."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Optional-Binding","isActive":true},{"type":"text","text":" section of the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","isActive":true},{"type":"text","text":" chapter and the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#While-Statement","isActive":true},{"type":"text","text":" section of the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","isActive":true},{"type":"text","text":" chapter, now that "},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"while","type":"codeVoice"},{"type":"text","text":", and "},{"code":"guard","type":"codeVoice"},{"type":"text","text":" statements use a comma-separated list of conditions without "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clauses."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about switch cases that have multiple patterns to the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#Switch","type":"reference","isActive":true},{"type":"text","text":" section of the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","type":"reference","isActive":true},{"type":"text","text":" chapter and the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Switch-Statement","type":"reference","isActive":true},{"type":"text","text":" section of the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","type":"reference","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of function types in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Function-Type","isActive":true},{"type":"text","text":" section now that function argument labels are no longer part of a function’s type."}]}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of protocol composition types in the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocol-Composition","isActive":true,"type":"reference"},{"text":" section of the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","isActive":true,"type":"reference"},{"text":" chapter and in the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Protocol-Composition-Type","isActive":true,"type":"reference"},{"text":" section of the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","isActive":true,"type":"reference"},{"text":" chapter to use the new ","type":"text"},{"code":"Protocol1 & Protocol2","type":"codeVoice"},{"text":" syntax.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion in the Dynamic Type Expression section to use the new "},{"type":"codeVoice","code":"type(of:)"},{"type":"text","text":" syntax for dynamic type expressions."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of line control statements to use the ","type":"text"},{"type":"codeVoice","code":"#sourceLocation(file:line:)"},{"text":" syntax in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Line-Control-Statement"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Functions-that-Never-Return","isActive":true,"type":"reference"},{"text":" to use the new ","type":"text"},{"code":"Never","type":"codeVoice"},{"text":" type.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about playground literals to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Literal-Expression","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion in the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#In-Out-Parameters","isActive":true,"type":"reference"},{"text":" section to note that only nonescaping closures can capture in-out parameters.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion about default parameters in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Default-Parameter-Values","isActive":true},{"type":"text","text":" section, now that they can’t be reordered in function calls."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated attribute arguments to use a colon in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about throwing an error inside the catch block of a rethrowing function to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Rethrowing-Functions-and-Methods","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added information about accessing the selector of an Objective-C property’s getter or setter to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Selector-Expression","type":"reference","isActive":true},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Type-Alias-Declaration"},{"type":"text","text":" section about generic type aliases and using type aliases inside of protocols."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the discussion of function types in the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Function-Type"},{"text":" section to note that parentheses around the parameter types are required.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes"},{"text":" chapter to note that the ","type":"text"},{"code":"@IBAction","type":"codeVoice"},{"text":", ","type":"text"},{"code":"@IBOutlet","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"@NSManaged","type":"codeVoice"},{"text":" attributes imply the ","type":"text"},{"code":"@objc","type":"codeVoice"},{"text":" attribute.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the ","type":"text"},{"code":"@GKInspectable","type":"codeVoice"},{"text":" attribute to the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the discussion of optional protocol requirements in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Optional-Protocol-Requirements"},{"type":"text","text":" section to clarify that they’re used only in code that interoperates with Objective-C."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the discussion of explicitly using ","type":"text"},{"code":"let","type":"codeVoice"},{"text":" in function parameters from the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Function-Declaration","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Removed the discussion of the "},{"type":"codeVoice","code":"Boolean"},{"type":"text","text":" protocol from the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements"},{"type":"text","text":" chapter, now that the protocol has been removed from the Swift standard library."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Corrected the discussion of the "},{"type":"codeVoice","code":"@NSApplicationMain"},{"type":"text","text":" attribute in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2016-03-21","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 2.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how to conditionally compile code depending on the version of Swift being used to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Conditional-Compilation-Block","type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about how to distinguish between methods or initializers whose names differ only by the names of their arguments to the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Explicit-Member-Expression","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the "},{"code":"#selector","type":"codeVoice"},{"type":"text","text":" syntax for Objective-C selectors to the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Selector-Expression","type":"reference","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the discussion of associated types to use the ","type":"text"},{"code":"associatedtype","type":"codeVoice"},{"text":" keyword in the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Associated-Types","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Associated-Type-Declaration","isActive":true,"type":"reference"},{"text":" sections.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated information about initializers that return "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" before the instance is fully initialized in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Failable-Initializers","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about comparing tuples to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Comparison-Operators","type":"reference","isActive":true},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about using keywords as external parameter names to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Keywords-and-Punctuation","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"@objc","type":"codeVoice"},{"type":"text","text":" attribute in the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section to note that enumerations and enumeration cases can use this attribute."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Operators","isActive":true},{"type":"text","text":" section with discussion of custom operators that contain a dot."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Rethrowing-Functions-and-Methods","type":"reference"},{"text":" section that rethrowing functions can’t directly throw errors.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Property-Observers","type":"reference","isActive":true},{"text":" section about property observers being called when you pass a property as an in-out parameter.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added a section about error handling to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GuidedTour","isActive":true,"type":"reference"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated figures in the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Weak-References","type":"reference","isActive":true},{"text":" section to show the deallocation process more clearly.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed discussion of C-style ","type":"text"},{"code":"for","type":"codeVoice"},{"text":" loops, the ","type":"text"},{"code":"++","type":"codeVoice"},{"text":" prefix and postfix operators, and the ","type":"text"},{"code":"--","type":"codeVoice"},{"text":" prefix and postfix operators.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Removed discussion of variable function arguments and the special syntax for curried functions."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2015-10-20","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Updated for Swift 2.1.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#String-Interpolation","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#String-Literals","type":"reference","isActive":true},{"type":"text","text":" sections now that string interpolations can contain string literals."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Escaping-Closures"},{"text":" section with information about the ","type":"text"},{"code":"@noescape","type":"codeVoice"},{"text":" attribute.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Conditional-Compilation-Block","type":"reference"},{"text":" sections with information about tvOS.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Added information about the behavior of in-out parameters to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#In-Out-Parameters","isActive":true,"type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","type":"reference","isActive":true},{"type":"text","text":" section about how values specified in closure capture lists are captured."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","isActive":true},{"type":"text","text":" section to clarify how assignment through optional chaining behaves."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Improved the discussion of autoclosures in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Autoclosures"},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added an example that uses the "},{"type":"codeVoice","code":"??"},{"type":"text","text":" operator to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GuidedTour"},{"type":"text","text":" chapter."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2015-09-16","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated for Swift 2.0.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about error handling to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","isActive":true,"type":"reference"},{"text":" chapter, the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Do-Statement","isActive":true,"type":"reference"},{"text":" section, the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Throw-Statement","isActive":true,"type":"reference"},{"text":" section, the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Defer-Statement","isActive":true,"type":"reference"},{"text":" section, and the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Try-Operator","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling#Representing-and-Throwing-Errors","type":"reference"},{"text":" section, now that all types can conform to the ","type":"text"},{"code":"ErrorType","type":"codeVoice"},{"text":" protocol.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the new ","type":"text"},{"code":"try?","type":"codeVoice"},{"text":" keyword to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling#Converting-Errors-to-Optional-Values","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about recursive enumerations to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Recursive-Enumerations","isActive":true},{"type":"text","text":" section of the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","isActive":true},{"type":"text","text":" chapter and the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Enumerations-with-Cases-of-Any-Type","isActive":true},{"type":"text","text":" section of the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","isActive":true},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about API availability checking to the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#Checking-API-Availability","isActive":true,"type":"reference"},{"type":"text","text":" section of the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","isActive":true,"type":"reference"},{"type":"text","text":" chapter and the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Availability-Condition","isActive":true,"type":"reference"},{"type":"text","text":" section of the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","isActive":true,"type":"reference"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the new "},{"type":"codeVoice","code":"guard"},{"type":"text","text":" statement to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#Early-Exit","isActive":true},{"type":"text","text":" section of the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","isActive":true},{"type":"text","text":" chapter and the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Guard-Statement","isActive":true},{"type":"text","text":" section of the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about protocol extensions to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocol-Extensions","isActive":true},{"type":"text","text":" section of the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about access control for unit testing to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Access-Levels-for-Unit-Test-Targets","isActive":true},{"type":"text","text":" section of the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","isActive":true},{"type":"text","text":" chapter."}]}]},{"content":[{"inlineContent":[{"text":"Added information about the new optional pattern to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns#Optional-Pattern","type":"reference"},{"text":" section of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","type":"reference"},{"text":" chapter.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#Repeat-While"},{"type":"text","text":" section with information about the "},{"code":"repeat","type":"codeVoice"},{"type":"text","text":"-"},{"code":"while","type":"codeVoice"},{"type":"text","text":" loop."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","isActive":true,"type":"reference"},{"text":" chapter, now that ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" no longer conforms to the ","type":"text"},{"code":"CollectionType","type":"codeVoice"},{"text":" protocol from the Swift standard library.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about the new Swift standard library "},{"type":"codeVoice","code":"print(_:separator:terminator)"},{"type":"text","text":" function to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Printing-Constants-and-Variables"},{"type":"text","text":" section."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the behavior of enumeration cases with "},{"type":"codeVoice","code":"String"},{"type":"text","text":" raw values to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Implicitly-Assigned-Raw-Values"},{"type":"text","text":" section of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations"},{"type":"text","text":" chapter and the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},{"type":"text","text":" section of the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations"},{"type":"text","text":" chapter."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"@autoclosure"},{"text":" attribute—including its ","type":"text"},{"type":"codeVoice","code":"@autoclosure(escaping)"},{"text":" form—to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Autoclosures"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes"},{"type":"text","text":" section with information about the "},{"type":"codeVoice","code":"@available"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@warn_unused_result"},{"type":"text","text":" attributes."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Type-Attributes"},{"type":"text","text":" section with information about the "},{"type":"codeVoice","code":"@convention"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added an example of using multiple optional bindings with a ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Optional-Binding","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#String-Literals","isActive":true},{"type":"text","text":" section about how concatenating string literals using the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator happens at compile time."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Metatype-Type","type":"reference"},{"text":" section about comparing metatype values and using them to construct instances with initializer expressions.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Debugging-with-Assertions"},{"type":"text","text":" section about when user-defined assertions are disabled."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the discussion of the "},{"code":"@NSManaged","type":"codeVoice"},{"type":"text","text":" attribute in the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes"},{"type":"text","text":" section, now that the attribute can be applied to certain instance methods."}]}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Variadic-Parameters","type":"reference"},{"text":" section, now that variadic parameters can be declared in any position in a function’s parameter list.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Overriding-a-Failable-Initializer","isActive":true,"type":"reference"},{"text":" section about how a nonfailable initializer can delegate up to a failable initializer by force-unwrapping the result of the superclass’s initializer.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about using enumeration cases as functions to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Enumerations-with-Cases-of-Any-Type","isActive":true},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about explicitly referencing an initializer to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Initializer-Expression","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added information about build configuration and line control statements to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Compiler-Control-Statements"},{"type":"text","text":" section."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a note to the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Metatype-Type","type":"reference","isActive":true},{"text":" section about constructing class instances from metatype values.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Weak-References","type":"reference"},{"type":"text","text":" section about weak references being unsuitable for caching."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated a note in the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Type-Properties"},{"type":"text","text":" section to mention that stored type properties are lazily initialized."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Capturing-Values","isActive":true},{"type":"text","text":" section to clarify how variables and constants are captured in closures."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes","isActive":true},{"type":"text","text":" section to describe when you can apply the "},{"type":"codeVoice","code":"@objc"},{"type":"text","text":" attribute to classes."}]}]},{"content":[{"inlineContent":[{"text":"Added a note to the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling#Handling-Errors","type":"reference"},{"text":" section about the performance of executing a ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":" statement. Added similar information about the ","type":"text"},{"code":"do","type":"codeVoice"},{"text":" statement in the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Do-Statement","type":"reference"},{"text":" section.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Type-Properties","type":"reference"},{"text":" section with information about stored and computed type properties for classes, structures, and enumerations.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Break-Statement","isActive":true,"type":"reference"},{"type":"text","text":" section with information about labeled break statements."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated a note in the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Property-Observers","type":"reference","isActive":true},{"text":" section to clarify the behavior of ","type":"text"},{"code":"willSet","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"didSet","type":"codeVoice"},{"text":" observers.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Access-Levels","isActive":true},{"type":"text","text":" section with information about the scope of "},{"code":"private","type":"codeVoice"},{"type":"text","text":" access."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Weak-References"},{"type":"text","text":" section about the differences in weak references between garbage collected systems and ARC."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Special-Characters-in-String-Literals","isActive":true},{"type":"text","text":" section with a more precise definition of Unicode scalars."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"text":"2015-04-08","type":"text"}]}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated for Swift 1.2."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift now has a native ","type":"text"},{"code":"Set","type":"codeVoice"},{"text":" collection type. For more information, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Sets","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"code":"@autoclosure","type":"codeVoice"},{"text":" is now an attribute of the parameter declaration, not its type. There’s also a new ","type":"text"},{"code":"@noescape","type":"codeVoice"},{"text":" parameter declaration attribute. For more information, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Type methods and properties now use the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" keyword as a declaration modifier. For more information see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Type-Variable-Properties","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Swift now includes the ","type":"text"},{"code":"as?","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"as!","type":"codeVoice"},{"text":" failable downcast operators. For more information, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Checking-for-Protocol-Conformance","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a new guide section about "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#String-Indices","type":"reference","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Removed the overflow division (","type":"text"},{"type":"codeVoice","code":"&\/"},{"text":") and overflow remainder (","type":"text"},{"type":"codeVoice","code":"&%"},{"text":") operators from ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Overflow-Operators","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the rules for constant and constant property declaration and initialization. For more information, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Constant-Declaration","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the definition of Unicode scalars in string literals. See ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Special-Characters-in-String-Literals","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Range-Operators","type":"reference","isActive":true},{"type":"text","text":" to note that a half-open range with the same start and end index will be empty."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Closures-Are-Reference-Types","isActive":true},{"type":"text","text":" to clarify the capturing rules for variables."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Value-Overflow","type":"reference"},{"type":"text","text":" to clarify the overflow behavior of signed and unsigned integers"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Declaration","type":"reference","isActive":true},{"text":" to clarify protocol declaration scope and members.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Defining-a-Capture-List","type":"reference","isActive":true},{"type":"text","text":" to clarify the syntax for weak and unowned references in closure capture lists."}]}]},{"content":[{"inlineContent":[{"text":"Updated ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Operators","isActive":true,"type":"reference"},{"text":" to explicitly mention examples of supported characters for custom operators, such as those in the Mathematical Operators, Miscellaneous Symbols, and Dingbats Unicode blocks.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Constants can now be declared without being initialized in local function scope. They must have a set value before first use. For more information, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Constant-Declaration","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"In an initializer, constant properties can now only assign a value once. For more information, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Assigning-Constant-Properties-During-Initialization","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Multiple optional bindings can now appear in a single ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement as a comma-separated list of assignment expressions. For more information, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Optional-Binding","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Optional-Chaining-Expression"},{"type":"text","text":" must appear within a postfix expression."}]}]},{"content":[{"inlineContent":[{"text":"Protocol casts are no longer limited to ","type":"text"},{"code":"@objc","type":"codeVoice"},{"text":" protocols.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Type casts that can fail at runtime now use the "},{"code":"as?","type":"codeVoice"},{"type":"text","text":" or "},{"code":"as!","type":"codeVoice"},{"type":"text","text":" operator, and type casts that are guaranteed not to fail use the "},{"code":"as","type":"codeVoice"},{"type":"text","text":" operator. For more information, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Type-Casting-Operators","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"inlineContent":[{"text":"2014-10-16","type":"text"}],"type":"strong"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Updated for Swift 1.1."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a full guide to "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Failable-Initializers","isActive":true},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a description of ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Failable-Initializer-Requirements","type":"reference","isActive":true},{"text":" for protocols.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Constants and variables of type ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" can now contain function instances. Updated the example in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting#Type-Casting-for-Any-and-AnyObject","type":"reference","isActive":true},{"text":" to show how to check for and cast to a function type within a ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Enumerations with raw values now have a "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" property rather than a "},{"type":"codeVoice","code":"toRaw()"},{"type":"text","text":" method and a failable initializer with a "},{"type":"codeVoice","code":"rawValue"},{"type":"text","text":" parameter rather than a "},{"type":"codeVoice","code":"fromRaw()"},{"type":"text","text":" method. For more information, see "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Raw-Values","type":"reference"},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new reference section about "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Failable-Initializers","isActive":true},{"type":"text","text":", which can trigger initialization failure."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Custom operators can now contain the ","type":"text"},{"type":"codeVoice","code":"?"},{"text":" character. Updated the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Operators","type":"reference","isActive":true},{"text":" reference to describe the revised rules. Removed a duplicate description of the valid set of operator characters from ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Custom-Operators","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"strong","inlineContent":[{"type":"text","text":"2014-08-18"}]}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"New document that describes Swift 1.0, Apple’s new programming language for building iOS and OS X apps.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a new section about ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Initializer-Requirements","isActive":true,"type":"reference"},{"text":" in protocols.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Class-Only-Protocols","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Assertions-and-Preconditions","type":"reference"},{"type":"text","text":" can now use string interpolation. Removed a note to the contrary."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Concatenating-Strings-and-Characters","type":"reference"},{"text":" section to reflect the fact that ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" values can no longer be combined with the addition operator (","type":"text"},{"code":"+","type":"codeVoice"},{"text":") or addition assignment operator (","type":"text"},{"code":"+=","type":"codeVoice"},{"text":"). These operators are now used only with ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values. Use the ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type’s ","type":"text"},{"code":"append(_:)","type":"codeVoice"},{"text":" method to append a single ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" value onto the end of a string.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added information about the "},{"type":"codeVoice","code":"availability"},{"type":"text","text":" attribute to the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes","type":"reference","isActive":true},{"type":"text","text":" section."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Optionals","isActive":true,"type":"reference"},{"text":" no longer implicitly evaluate to ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" when they have a value and ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" when they do not, to avoid confusion when working with optional ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":" values. Instead, make an explicit check against ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" with the ","type":"text"},{"code":"==","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"!=","type":"codeVoice"},{"text":" operators to find out if an optional contains a value.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift now has a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Nil-Coalescing-Operator"},{"type":"text","text":" ("},{"type":"codeVoice","code":"a ?? b"},{"type":"text","text":"), which unwraps an optional’s value if it exists, or returns a default value if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Updated and expanded the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Comparing-Strings","isActive":true,"type":"reference"},{"text":" section to reflect and demonstrate that string and character comparison and prefix \/ suffix comparison are now based on Unicode canonical equivalence of extended grapheme clusters.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"You can now try to set a property’s value, assign to a subscript, or call a mutating method or operator through ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","isActive":true,"type":"reference"},{"text":". The information about ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","isActive":true,"type":"reference"},{"text":" has been updated accordingly, and the examples of checking for method call success in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","isActive":true,"type":"reference"},{"text":" have been expanded to show how to check for property setting success.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining#Accessing-Subscripts-of-Optional-Type"},{"type":"text","text":" through optional chaining."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Accessing-and-Modifying-an-Array","isActive":true},{"type":"text","text":" section to note that you can no longer append a single item to an array with the "},{"type":"codeVoice","code":"+="},{"type":"text","text":" operator. Instead, use the "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method, or append a single-item array with the "},{"type":"codeVoice","code":"+="},{"type":"text","text":" operator."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added a note that the start value "},{"type":"codeVoice","code":"a"},{"type":"text","text":" for the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Range-Operators","isActive":true},{"type":"text","text":" "},{"type":"codeVoice","code":"a...b"},{"type":"text","text":" and "},{"type":"codeVoice","code":"a..<b"},{"type":"text","text":" must not be greater than the end value "},{"type":"codeVoice","code":"b"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Rewrote the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance"},{"type":"text","text":" chapter to remove its introductory coverage of initializer overrides. This chapter now focuses more on the addition of new functionality in a subclass, and the modification of existing functionality with overrides. The chapter’s example of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance"},{"type":"text","text":" has been rewritten to show how to override a "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property. (The examples of modifying an inherited property’s default value in a subclass initializer have been moved to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization"},{"type":"text","text":" chapter.)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Initializer-Inheritance-and-Overriding"},{"type":"text","text":" section to note that overrides of a designated initializer must now be marked with the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Required-Initializers"},{"type":"text","text":" section to note that the "},{"type":"codeVoice","code":"required"},{"type":"text","text":" modifier is now written before every subclass implementation of a required initializer, and that the requirements for required initializers can now be satisfied by automatically inherited initializers."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Infix ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Operator-Methods"},{"text":" no longer require the ","type":"text"},{"type":"codeVoice","code":"@infix"},{"text":" attribute.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"@prefix"},{"type":"text","text":" and "},{"type":"codeVoice","code":"@postfix"},{"type":"text","text":" attributes for "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Prefix-and-Postfix-Operators","isActive":true},{"type":"text","text":" have been replaced by "},{"type":"codeVoice","code":"prefix"},{"type":"text","text":" and "},{"type":"codeVoice","code":"postfix"},{"type":"text","text":" declaration modifiers."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a note about the order in which "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Prefix-and-Postfix-Operators","type":"reference","isActive":true},{"type":"text","text":" are applied when both a prefix and a postfix operator are applied to the same operand."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Operator functions for "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Compound-Assignment-Operators"},{"type":"text","text":" no longer use the "},{"type":"codeVoice","code":"@assignment"},{"type":"text","text":" attribute when defining the function."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The order in which modifiers are specified when defining "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Custom-Operators","type":"reference","isActive":true},{"type":"text","text":" has changed. You now write "},{"type":"codeVoice","code":"prefix operator"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"operator prefix"},{"type":"text","text":", for example."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about the ","type":"text"},{"type":"codeVoice","code":"dynamic"},{"text":" declaration modifier in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Declaration-Modifiers","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added information about how type inference works with ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Literals","type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Added more information about curried functions."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new chapter about "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","type":"reference","isActive":true},{"text":" chapter to reflect the fact that Swift’s ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" type now represents a single Unicode extended grapheme cluster. Includes a new section on ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Extended-Grapheme-Clusters","type":"reference","isActive":true},{"text":" and more information about ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Unicode-Scalar-Values","type":"reference","isActive":true},{"text":" and ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Comparing-Strings","type":"reference","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#String-Literals","isActive":true,"type":"reference"},{"type":"text","text":" section to note that Unicode scalars inside string literals are now written as "},{"code":"\\u{n}","type":"codeVoice"},{"type":"text","text":", where "},{"code":"n","type":"codeVoice"},{"type":"text","text":" is a hexadecimal number between 0 and 10FFFF, the range of Unicode’s codespace."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"NSString","type":"codeVoice"},{"text":" ","type":"text"},{"code":"length","type":"codeVoice"},{"text":" property is now mapped onto Swift’s native ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type as ","type":"text"},{"code":"utf16Count","type":"codeVoice"},{"text":", not ","type":"text"},{"code":"utf16count","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Swift’s native ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type no longer has an ","type":"text"},{"code":"uppercaseString","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"lowercaseString","type":"codeVoice"},{"text":" property. The corresponding section in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","type":"reference","isActive":true},{"text":" has been removed, and various code examples have been updated.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a new section about ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Initializer-Parameters-Without-Argument-Labels","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Added a new section about "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Required-Initializers"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Added a new section about ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","isActive":true,"type":"reference"},{"text":".","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Type-Annotations","isActive":true},{"type":"text","text":" section to note that multiple related variables can be defined on a single line with one type annotation."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"@optional","type":"codeVoice"},{"text":", ","type":"text"},{"code":"@lazy","type":"codeVoice"},{"text":", ","type":"text"},{"code":"@final","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"@required","type":"codeVoice"},{"text":" attributes are now the ","type":"text"},{"code":"optional","type":"codeVoice"},{"text":", ","type":"text"},{"code":"lazy","type":"codeVoice"},{"text":", ","type":"text"},{"code":"final","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"required","type":"codeVoice"},{"text":" ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Declaration-Modifiers","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the entire book to refer to "},{"type":"codeVoice","code":"..<"},{"type":"text","text":" as the "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Half-Open-Range-Operator","type":"reference"},{"type":"text","text":" (rather than the “half-closed range operator”)."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Updated the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Accessing-and-Modifying-a-Dictionary"},{"type":"text","text":" section to note that "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" now has a Boolean "},{"type":"codeVoice","code":"isEmpty"},{"type":"text","text":" property."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Clarified the full list of characters that can be used when defining "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Custom-Operators","type":"reference"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"nil"},{"type":"text","text":" and the Booleans "},{"type":"codeVoice","code":"true"},{"type":"text","text":" and "},{"type":"codeVoice","code":"false"},{"type":"text","text":" are now "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Literals"},{"type":"text","text":"."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type now has full value semantics. Updated the information about "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Mutability-of-Collections"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Arrays"},{"type":"text","text":" to reflect the new approach. Also clarified the assignment and copy behavior for strings arrays and dictionaries."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Array-Type-Shorthand-Syntax"},{"type":"text","text":" is now written as "},{"type":"codeVoice","code":"[SomeType]"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"SomeType[]"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"Added a new section about ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Dictionary-Type-Shorthand-Syntax","type":"reference","isActive":true},{"text":", which is written as ","type":"text"},{"type":"codeVoice","code":"[KeyType: ValueType]"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Added a new section about ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Hash-Values-for-Set-Types","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Examples of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Closure-Expressions"},{"type":"text","text":" now use the global "},{"type":"codeVoice","code":"sorted(_:_:)"},{"type":"text","text":" function rather than the global "},{"type":"codeVoice","code":"sort(_:_:)"},{"type":"text","text":" function, to reflect the new array value semantics."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Updated the information about "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Memberwise-Initializers-for-Structure-Types","isActive":true},{"type":"text","text":" to clarify that the memberwise structure initializer is made available even if a structure’s stored properties don’t have default values."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Updated to ","type":"text"},{"code":"..<","type":"codeVoice"},{"text":" rather than ","type":"text"},{"code":"..","type":"codeVoice"},{"text":" for the ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Half-Open-Range-Operator","isActive":true},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Added an example of "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Extending-a-Generic-Type"},{"type":"text","text":"."}]}]}],"type":"unorderedList"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swift\/revisionhistory"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/RevisionHistory"},"metadata":{"title":"Document Revision History","role":"article","modules":[{"name":"Swift"}],"roleHeading":"Article"},"abstract":[{"inlineContent":[{"text":"2022-06-06","type":"text"}],"type":"strong"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"sections":[],"references":{"doc://com.apple.Swift/documentation/Swift/ControlFlow#Switch":{"url":"\/documentation\/swift\/controlflow#Switch","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#Switch","title":"Switch","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes#Dictionary-Type-Shorthand-Syntax":{"url":"\/documentation\/swift\/collectiontypes#Dictionary-Type-Shorthand-Syntax","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Dictionary-Type-Shorthand-Syntax","title":"Dictionary Type Shorthand Syntax","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"url":"\/documentation\/swift\/stringsandcharacters","role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"text":"string","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a series of characters, such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":". Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"text":" type. The contents of a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" can be accessed in various ways, including as a collection of ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" values.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","type":"topic"},"doc://com.apple.Swift/documentation/Swift/ControlFlow#For-In-Loops":{"kind":"section","type":"topic","title":"For-In Loops","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#For-In-Loops","url":"\/documentation\/swift\/controlflow#For-In-Loops"},"doc://com.apple.Swift/documentation/Swift/Protocols#Class-Only-Protocols":{"url":"\/documentation\/swift\/protocols#Class-Only-Protocols","abstract":[],"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Class-Only-Protocols","title":"Class-Only Protocols","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Generics#Associated-Types-with-a-Generic-Where-Clause":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Associated-Types-with-a-Generic-Where-Clause","abstract":[],"kind":"section","url":"\/documentation\/swift\/generics#Associated-Types-with-a-Generic-Where-Clause","title":"Associated Types with a Generic Where Clause","type":"topic"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters#Unicode-Scalar-Values":{"url":"\/documentation\/swift\/stringsandcharacters#Unicode-Scalar-Values","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Unicode-Scalar-Values","title":"Unicode Scalar Values","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Statements#Break-Statement":{"url":"\/documentation\/swift\/statements#Break-Statement","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Break-Statement","title":"Break Statement","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Statements#Do-Statement":{"url":"\/documentation\/swift\/statements#Do-Statement","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Do-Statement","title":"Do Statement","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Value-Overflow":{"url":"\/documentation\/swift\/advancedoperators#Value-Overflow","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Value-Overflow","title":"Value Overflow","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Attributes#Type-Attributes":{"url":"\/documentation\/swift\/attributes#Type-Attributes","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Type-Attributes","title":"Type Attributes","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Protocols#Protocol-Extensions":{"url":"\/documentation\/swift\/protocols#Protocol-Extensions","title":"Protocol Extensions","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocol-Extensions","abstract":[],"type":"topic"},"doc://com.apple.Swift/documentation/Swift/Enumerations#Recursive-Enumerations":{"url":"\/documentation\/swift\/enumerations#Recursive-Enumerations","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Recursive-Enumerations","title":"Recursive Enumerations","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Concurrency#Sendable-Types":{"url":"\/documentation\/swift\/concurrency#Sendable-Types","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency#Sendable-Types","title":"Sendable Types","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting#Defining-a-Capture-List":{"url":"\/documentation\/swift\/automaticreferencecounting#Defining-a-Capture-List","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Defining-a-Capture-List","title":"Defining a Capture List","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting#Weak-References":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Weak-References","abstract":[],"title":"Weak References","kind":"section","type":"topic","url":"\/documentation\/swift\/automaticreferencecounting#Weak-References"},"doc://com.apple.Swift/documentation/Swift/Closures#Closure-Expressions":{"url":"\/documentation\/swift\/closures#Closure-Expressions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Closure-Expressions","title":"Closure Expressions","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/AccessControl#Access-Levels":{"title":"Access Levels","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Access-Levels","kind":"section","type":"topic","url":"\/documentation\/swift\/accesscontrol#Access-Levels"},"doc://com.apple.Swift/documentation/Swift/Declarations#Precedence-Group-Declaration":{"title":"Precedence Group Declaration","url":"\/documentation\/swift\/declarations#Precedence-Group-Declaration","abstract":[],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Precedence-Group-Declaration","kind":"section"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling#Handling-Errors":{"url":"\/documentation\/swift\/errorhandling#Handling-Errors","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling#Handling-Errors","title":"Handling Errors","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Generics#Contextual-Where-Clauses":{"title":"Contextual Where Clauses","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Contextual-Where-Clauses","kind":"section","type":"topic","url":"\/documentation\/swift\/generics#Contextual-Where-Clauses"},"doc://com.apple.Swift/documentation/Swift/Attributes":{"abstract":[{"text":"There are two kinds of attributes in Swift—those that apply to declarations and those that apply to types. An attribute provides additional information about the declaration or type. For example, the ","type":"text"},{"type":"codeVoice","code":"discardableResult"},{"text":" attribute on a function declaration indicates that, although the function returns a value, the compiler shouldn’t generate a warning if the return value is unused.","type":"text"}],"url":"\/documentation\/swift\/attributes","role":"article","title":"Attributes","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/TheBasics#Implicitly-Unwrapped-Optionals":{"title":"Implicitly Unwrapped Optionals","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Implicitly-Unwrapped-Optionals","kind":"section","type":"topic","url":"\/documentation\/swift\/thebasics#Implicitly-Unwrapped-Optionals"},"doc://com.apple.Swift/documentation/Swift/Properties#Type-Properties":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Type-Properties","abstract":[],"title":"Type Properties","kind":"section","type":"topic","url":"\/documentation\/swift\/properties#Type-Properties"},"doc://com.apple.Swift/documentation/Swift/Types#Self-Type":{"title":"Self Type","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Self-Type","kind":"section","type":"topic","url":"\/documentation\/swift\/types#Self-Type"},"doc://com.apple.Swift/documentation/Swift/Statements#While-Statement":{"title":"While Statement","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#While-Statement","kind":"section","type":"topic","url":"\/documentation\/swift\/statements#While-Statement"},"doc://com.apple.Swift/documentation/Swift/Statements#Availability-Condition":{"url":"\/documentation\/swift\/statements#Availability-Condition","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Availability-Condition","title":"Availability Condition","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Protocols#Checking-for-Protocol-Conformance":{"url":"\/documentation\/swift\/protocols#Checking-for-Protocol-Conformance","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Checking-for-Protocol-Conformance","title":"Checking for Protocol Conformance","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/TheBasics#Optional-Binding":{"url":"\/documentation\/swift\/thebasics#Optional-Binding","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Optional-Binding","title":"Optional Binding","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Declarations#Protocol-Declaration":{"title":"Protocol Declaration","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Declaration","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Protocol-Declaration"},"doc://com.apple.Swift/documentation/Swift/Types#Any-Type":{"title":"Any Type","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Any-Type","kind":"section","type":"topic","url":"\/documentation\/swift\/types#Any-Type"},"doc://com.apple.Swift/documentation/Swift/Expressions#Optional-Chaining-Expression":{"title":"Optional-Chaining Expression","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Optional-Chaining-Expression","kind":"section","type":"topic","url":"\/documentation\/swift\/expressions#Optional-Chaining-Expression"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Precedence-for-Custom-Infix-Operators":{"title":"Precedence for Custom Infix Operators","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Precedence-for-Custom-Infix-Operators","kind":"section","type":"topic","url":"\/documentation\/swift\/advancedoperators#Precedence-for-Custom-Infix-Operators"},"doc://com.apple.Swift/documentation/Swift/ControlFlow#Repeat-While":{"title":"Repeat-While","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#Repeat-While","kind":"section","type":"topic","url":"\/documentation\/swift\/controlflow#Repeat-While"},"doc://com.apple.Swift/documentation/Swift/Generics#Generic-Where-Clauses":{"url":"\/documentation\/swift\/generics#Generic-Where-Clauses","title":"Generic Where Clauses","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Generic-Where-Clauses","abstract":[],"type":"topic"},"doc://com.apple.Swift/documentation/Swift/Generics#Extensions-with-a-Generic-Where-Clause":{"url":"\/documentation\/swift\/generics#Extensions-with-a-Generic-Where-Clause","title":"Extensions with a Generic Where Clause","abstract":[],"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Extensions-with-a-Generic-Where-Clause","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Declarations#Asynchronous-Functions-and-Methods":{"url":"\/documentation\/swift\/declarations#Asynchronous-Functions-and-Methods","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Asynchronous-Functions-and-Methods","title":"Asynchronous Functions and Methods","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Declarations#Protocol-Associated-Type-Declaration":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Associated-Type-Declaration","title":"Protocol Associated Type Declaration","url":"\/documentation\/swift\/declarations#Protocol-Associated-Type-Declaration","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/CollectionTypes#Accessing-and-Modifying-an-Array":{"url":"\/documentation\/swift\/collectiontypes#Accessing-and-Modifying-an-Array","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Accessing-and-Modifying-an-Array","title":"Accessing and Modifying an Array","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Statements#Defer-Statement":{"url":"\/documentation\/swift\/statements#Defer-Statement","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Defer-Statement","title":"Defer Statement","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters#String-Literals":{"title":"String Literals","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#String-Literals","kind":"section","type":"topic","url":"\/documentation\/swift\/stringsandcharacters#String-Literals"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes#Sets":{"title":"Sets","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Sets","kind":"section","type":"topic","url":"\/documentation\/swift\/collectiontypes#Sets"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/swift\/optionalchaining","role":"article","title":"Optional Chaining","abstract":[{"inlineContent":[{"text":"Optional chaining","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", the property, method, or subscript call returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},"doc://com.apple.Swift/documentation/Swift/Protocols#Conditionally-Conforming-to-a-Protocol":{"url":"\/documentation\/swift\/protocols#Conditionally-Conforming-to-a-Protocol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Conditionally-Conforming-to-a-Protocol","title":"Conditionally Conforming to a Protocol","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling#Representing-and-Throwing-Errors":{"url":"\/documentation\/swift\/errorhandling#Representing-and-Throwing-Errors","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling#Representing-and-Throwing-Errors","title":"Representing and Throwing Errors","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes#Arrays":{"url":"\/documentation\/swift\/collectiontypes#Arrays","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Arrays","title":"Arrays","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters#Extended-Grapheme-Clusters":{"title":"Extended Grapheme Clusters","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Extended-Grapheme-Clusters","kind":"section","type":"topic","url":"\/documentation\/swift\/stringsandcharacters#Extended-Grapheme-Clusters"},"doc://com.apple.Swift/documentation/Swift/Statements#Throw-Statement":{"title":"Throw Statement","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Throw-Statement","kind":"section","type":"topic","url":"\/documentation\/swift\/statements#Throw-Statement"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling#Converting-Errors-to-Optional-Values":{"url":"\/documentation\/swift\/errorhandling#Converting-Errors-to-Optional-Values","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling#Converting-Errors-to-Optional-Values","title":"Converting Errors to Optional Values","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"title":"Control Flow","url":"\/documentation\/swift\/controlflow","abstract":[{"text":"Swift provides a variety of control flow statements. These include ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" loops to perform a task multiple times; ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"continue"},{"text":" to transfer the flow of execution to another point in your code.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Attributes#frozen":{"url":"\/documentation\/swift\/attributes#frozen","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#frozen","title":"frozen","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes#Hash-Values-for-Set-Types":{"title":"Hash Values for Set Types","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Hash-Values-for-Set-Types","kind":"section","type":"topic","url":"\/documentation\/swift\/collectiontypes#Hash-Values-for-Set-Types"},"doc://com.apple.Swift/documentation/Swift/Functions#Default-Parameter-Values":{"abstract":[],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Default-Parameter-Values","title":"Default Parameter Values","kind":"section","url":"\/documentation\/swift\/functions#Default-Parameter-Values"},"doc://com.apple.Swift/documentation/Swift/Initialization#Memberwise-Initializers-for-Structure-Types":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Memberwise-Initializers-for-Structure-Types","abstract":[],"title":"Memberwise Initializers for Structure Types","kind":"section","type":"topic","url":"\/documentation\/swift\/initialization#Memberwise-Initializers-for-Structure-Types"},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"title":"Access Control","url":"\/documentation\/swift\/accesscontrol","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Expressions#Selector-Expression":{"title":"Selector Expression","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Selector-Expression","kind":"section","type":"topic","url":"\/documentation\/swift\/expressions#Selector-Expression"},"doc://com.apple.Swift/documentation/Swift/Attributes#unchecked":{"title":"unchecked","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#unchecked","kind":"section","type":"topic","url":"\/documentation\/swift\/attributes#unchecked"},"doc://com.apple.Swift/documentation/Swift/BasicOperators#Half-Open-Range-Operator":{"url":"\/documentation\/swift\/basicoperators#Half-Open-Range-Operator","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Half-Open-Range-Operator","title":"Half-Open Range Operator","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Functions":{"title":"Functions","url":"\/documentation\/swift\/functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure#Regular-Expression-Literals":{"url":"\/documentation\/swift\/lexicalstructure#Regular-Expression-Literals","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Regular-Expression-Literals","title":"Regular Expression Literals","abstract":[],"kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Expressions#Try-Operator":{"title":"Try Operator","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Try-Operator","kind":"section","type":"topic","url":"\/documentation\/swift\/expressions#Try-Operator"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure#String-Literals":{"title":"String Literals","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#String-Literals","kind":"section","type":"topic","url":"\/documentation\/swift\/lexicalstructure#String-Literals"},"doc://com.apple.Swift/documentation/Swift/Enumerations#Raw-Values":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Raw-Values","abstract":[],"title":"Raw Values","kind":"section","type":"topic","url":"\/documentation\/swift\/enumerations#Raw-Values"},"doc://com.apple.Swift/documentation/Swift/Generics#Generic-Subscripts":{"title":"Generic Subscripts","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Generic-Subscripts","kind":"section","type":"topic","url":"\/documentation\/swift\/generics#Generic-Subscripts"},"doc://com.apple.Swift/documentation/Swift/Declarations#Constant-Declaration":{"title":"Constant Declaration","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Constant-Declaration","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Constant-Declaration"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Compound-Assignment-Operators":{"title":"Compound Assignment Operators","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Compound-Assignment-Operators","kind":"section","type":"topic","url":"\/documentation\/swift\/advancedoperators#Compound-Assignment-Operators"},"doc://com.apple.Swift/documentation/Swift/TypeCasting#Type-Casting-for-Any-and-AnyObject":{"type":"topic","kind":"section","title":"Type Casting for Any and AnyObject","url":"\/documentation\/swift\/typecasting#Type-Casting-for-Any-and-AnyObject","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting#Type-Casting-for-Any-and-AnyObject","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Closures#Capturing-Values":{"title":"Capturing Values","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Capturing-Values","kind":"section","type":"topic","url":"\/documentation\/swift\/closures#Capturing-Values"},"doc://com.apple.Swift/documentation/Swift/Closures#Closures-Are-Reference-Types":{"abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Closures-Are-Reference-Types","title":"Closures Are Reference Types","url":"\/documentation\/swift\/closures#Closures-Are-Reference-Types"},"doc://com.apple.Swift/documentation/Swift/Attributes#resultBuilder":{"abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#resultBuilder","title":"resultBuilder","url":"\/documentation\/swift\/attributes#resultBuilder"},"doc://com.apple.Swift/documentation/Swift/Enumerations":{"role":"article","abstract":[{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"enumeration","type":"text"}]},{"text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","kind":"article","url":"\/documentation\/swift\/enumerations","title":"Enumerations"},"doc://com.apple.Swift/documentation/Swift/GuidedTour":{"abstract":[{"text":"Tradition suggests that the first program in a new language should print the words “Hello, world!” on the screen. In Swift, this can be done in a single line:","type":"text"}],"url":"\/documentation\/swift\/guidedtour","role":"article","title":"A Swift Tour","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GuidedTour","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Declarations#Actor-Declaration":{"title":"Actor Declaration","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Actor-Declaration","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Actor-Declaration"},"doc://com.apple.Swift/documentation/Swift/Functions#Variadic-Parameters":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Variadic-Parameters","abstract":[],"title":"Variadic Parameters","kind":"section","type":"topic","url":"\/documentation\/swift\/functions#Variadic-Parameters"},"doc://com.apple.Swift/documentation/Swift/Statements#Conditional-Compilation-Block":{"abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Conditional-Compilation-Block","title":"Conditional Compilation Block","url":"\/documentation\/swift\/statements#Conditional-Compilation-Block"},"doc://com.apple.Swift/documentation/Swift/Closures#Autoclosures":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Autoclosures","kind":"section","url":"\/documentation\/swift\/closures#Autoclosures","abstract":[],"title":"Autoclosures","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Statements#Compiler-Control-Statements":{"abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Compiler-Control-Statements","title":"Compiler Control Statements","url":"\/documentation\/swift\/statements#Compiler-Control-Statements"},"doc://com.apple.Swift/documentation/Swift/Expressions#Function-Call-Expression":{"abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Function-Call-Expression","title":"Function Call Expression","url":"\/documentation\/swift\/expressions#Function-Call-Expression"},"doc://com.apple.Swift/documentation/Swift/Declarations#Rethrowing-Functions-and-Methods":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Rethrowing-Functions-and-Methods","kind":"section","url":"\/documentation\/swift\/declarations#Rethrowing-Functions-and-Methods","abstract":[],"title":"Rethrowing Functions and Methods","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Attributes#main":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#main","kind":"section","url":"\/documentation\/swift\/attributes#main","abstract":[],"title":"main","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Properties#Property-Observers":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Property-Observers","abstract":[],"title":"Property Observers","kind":"section","type":"topic","url":"\/documentation\/swift\/properties#Property-Observers"},"doc://com.apple.Swift/documentation/Swift/Declarations#Declaration-Modifiers":{"abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Declaration-Modifiers","title":"Declaration Modifiers","url":"\/documentation\/swift\/declarations#Declaration-Modifiers"},"doc://com.apple.Swift/documentation/Swift/TheBasics#Assertions-and-Preconditions":{"abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Assertions-and-Preconditions","title":"Assertions and Preconditions","url":"\/documentation\/swift\/thebasics#Assertions-and-Preconditions"},"doc://com.apple.Swift/documentation/Swift/Attributes#Declaration-Attributes":{"abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Declaration-Attributes","title":"Declaration Attributes","url":"\/documentation\/swift\/attributes#Declaration-Attributes"},"doc://com.apple.Swift/documentation/Swift/Initialization#Initializer-Parameters-Without-Argument-Labels":{"abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Initializer-Parameters-Without-Argument-Labels","title":"Initializer Parameters Without Argument Labels","url":"\/documentation\/swift\/initialization#Initializer-Parameters-Without-Argument-Labels"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Prefix-and-Postfix-Operators":{"abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Prefix-and-Postfix-Operators","title":"Prefix and Postfix Operators","url":"\/documentation\/swift\/advancedoperators#Prefix-and-Postfix-Operators"},"doc://com.apple.Swift/documentation/Swift/Types#Metatype-Type":{"abstract":[],"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Metatype-Type","title":"Metatype Type","url":"\/documentation\/swift\/types#Metatype-Type"},"doc://com.apple.Swift/documentation/Swift/BasicOperators#Nil-Coalescing-Operator":{"abstract":[],"title":"Nil-Coalescing Operator","type":"topic","url":"\/documentation\/swift\/basicoperators#Nil-Coalescing-Operator","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Nil-Coalescing-Operator","kind":"section"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes#Accessing-and-Modifying-a-Dictionary":{"abstract":[],"title":"Accessing and Modifying a Dictionary","type":"topic","url":"\/documentation\/swift\/collectiontypes#Accessing-and-Modifying-a-Dictionary","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Accessing-and-Modifying-a-Dictionary","kind":"section"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Custom-Operators":{"url":"\/documentation\/swift\/advancedoperators#Custom-Operators","title":"Custom Operators","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Custom-Operators","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Generics#Associated-Types":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Associated-Types","abstract":[],"title":"Associated Types","kind":"section","type":"topic","url":"\/documentation\/swift\/generics#Associated-Types"},"doc://com.apple.Swift/documentation/Swift/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints":{"abstract":[],"title":"Using a Protocol in Its Associated Type’s Constraints","type":"topic","url":"\/documentation\/swift\/generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Using-a-Protocol-in-Its-Associated-Types-Constraints","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Declarations#Failable-Initializers":{"abstract":[],"title":"Failable Initializers","type":"topic","url":"\/documentation\/swift\/declarations#Failable-Initializers","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Failable-Initializers","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"title":"Initialization","url":"\/documentation\/swift\/initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/TheBasics#Printing-Constants-and-Variables":{"abstract":[],"title":"Printing Constants and Variables","type":"topic","url":"\/documentation\/swift\/thebasics#Printing-Constants-and-Variables","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Printing-Constants-and-Variables","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Statements#Compile-Time-Diagnostic-Statement":{"abstract":[],"title":"Compile-Time Diagnostic Statement","type":"topic","url":"\/documentation\/swift\/statements#Compile-Time-Diagnostic-Statement","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Compile-Time-Diagnostic-Statement","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Patterns":{"abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"text":" represents the structure of a single value or a composite value. For example, the structure of a tuple ","type":"text"},{"type":"codeVoice","code":"(1, 2)"},{"text":" is a comma-separated list of two elements. Because patterns represent the structure of a value rather than any one particular value, you can match them with a variety of values. For instance, the pattern ","type":"text"},{"type":"codeVoice","code":"(x, y)"},{"text":" matches the tuple ","type":"text"},{"type":"codeVoice","code":"(1, 2)"},{"text":" and any other two-element tuple. In addition to matching a pattern with a value, you can extract part or all of a composite value and bind each part to a constant or variable name.","type":"text"}],"url":"\/documentation\/swift\/patterns","role":"article","title":"Patterns","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Initialization#Initializer-Inheritance-and-Overriding":{"type":"topic","title":"Initializer Inheritance and Overriding","url":"\/documentation\/swift\/initialization#Initializer-Inheritance-and-Overriding","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Initializer-Inheritance-and-Overriding","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Declarations#Extension-Declaration":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Extension-Declaration","abstract":[],"title":"Extension Declaration","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Extension-Declaration"},"doc://com.apple.Swift/documentation/Swift/Declarations#In-Out-Parameters":{"type":"topic","kind":"section","title":"In-Out Parameters","url":"\/documentation\/swift\/declarations#In-Out-Parameters","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#In-Out-Parameters","abstract":[]},"doc://com.apple.Swift/documentation/Swift/CollectionTypes#Mutability-of-Collections":{"abstract":[],"title":"Mutability of Collections","type":"topic","url":"\/documentation\/swift\/collectiontypes#Mutability-of-Collections","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Mutability-of-Collections","kind":"section"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters#Concatenating-Strings-and-Characters":{"type":"topic","kind":"section","abstract":[],"title":"Concatenating Strings and Characters","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Concatenating-Strings-and-Characters","url":"\/documentation\/swift\/stringsandcharacters#Concatenating-Strings-and-Characters"},"doc://com.apple.Swift/documentation/Swift/Protocols#Protocol-Composition":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocol-Composition","abstract":[],"title":"Protocol Composition","kind":"section","type":"topic","url":"\/documentation\/swift\/protocols#Protocol-Composition"},"doc://com.apple.Swift/documentation/Swift/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation":{"type":"topic","kind":"section","abstract":[],"title":"Adopting a Protocol Using a Synthesized Implementation","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation","url":"\/documentation\/swift\/protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","abstract":[{"text":"An ","type":"text"},{"inlineContent":[{"text":"operator","type":"text"}],"type":"emphasis"},{"text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (","type":"text"},{"code":"+","type":"codeVoice"},{"text":") adds two numbers, as in ","type":"text"},{"code":"let i = 1 + 2","type":"codeVoice"},{"text":", and the logical AND operator (","type":"text"},{"code":"&&","type":"codeVoice"},{"text":") combines two Boolean values, as in ","type":"text"},{"code":"if enteredDoorCode && passedRetinaScan","type":"codeVoice"},{"text":".","type":"text"}],"kind":"article","url":"\/documentation\/swift\/basicoperators","title":"Basic Operators","type":"topic","role":"article"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Operator-Methods":{"url":"\/documentation\/swift\/advancedoperators#Operator-Methods","title":"Operator Methods","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Operator-Methods","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Protocols#Optional-Protocol-Requirements":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Optional-Protocol-Requirements","abstract":[],"title":"Optional Protocol Requirements","kind":"section","type":"topic","url":"\/documentation\/swift\/protocols#Optional-Protocol-Requirements"},"doc://com.apple.Swift/documentation/Swift/ControlFlow#Early-Exit":{"abstract":[],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#Early-Exit","title":"Early Exit","kind":"section","url":"\/documentation\/swift\/controlflow#Early-Exit"},"doc://com.apple.Swift/documentation/Swift/Attributes#dynamicMemberLookup":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#dynamicMemberLookup","abstract":[],"title":"dynamicMemberLookup","kind":"section","type":"topic","url":"\/documentation\/swift\/attributes#dynamicMemberLookup"},"doc://com.apple.Swift/documentation/Swift/Protocols#Initializer-Requirements":{"type":"topic","kind":"section","abstract":[],"title":"Initializer Requirements","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Initializer-Requirements","url":"\/documentation\/swift\/protocols#Initializer-Requirements"},"doc://com.apple.Swift/documentation/Swift/Inheritance":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","abstract":[{"text":"A class can ","type":"text"},{"inlineContent":[{"text":"inherit","type":"text"}],"type":"emphasis"},{"text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a ","type":"text"},{"inlineContent":[{"text":"subclass","type":"text"}],"type":"emphasis"},{"text":", and the class it inherits from is known as its ","type":"text"},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/inheritance","title":"Inheritance","type":"topic","role":"article"},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"title":"Opaque Types","role":"article","kind":"article","url":"\/documentation\/swift\/opaquetypes","type":"topic","abstract":[{"text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t.","type":"text"}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes"},"doc://com.apple.Swift/documentation/Swift/Closures#Escaping-Closures":{"type":"topic","kind":"section","abstract":[],"title":"Escaping Closures","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Escaping-Closures","url":"\/documentation\/swift\/closures#Escaping-Closures"},"doc://com.apple.Swift/documentation/Swift/Expressions#Implicit-Member-Expression":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Implicit-Member-Expression","title":"Implicit Member Expression","url":"\/documentation\/swift\/expressions#Implicit-Member-Expression","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Protocols#Failable-Initializer-Requirements":{"type":"topic","kind":"section","abstract":[],"title":"Failable Initializer Requirements","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Failable-Initializer-Requirements","url":"\/documentation\/swift\/protocols#Failable-Initializer-Requirements"},"doc://com.apple.Swift/documentation/Swift/Closures#Trailing-Closures":{"type":"topic","kind":"section","abstract":[],"title":"Trailing Closures","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Trailing-Closures","url":"\/documentation\/swift\/closures#Trailing-Closures"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters#Extended-String-Delimiters":{"type":"topic","kind":"section","abstract":[],"title":"Extended String Delimiters","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Extended-String-Delimiters","url":"\/documentation\/swift\/stringsandcharacters#Extended-String-Delimiters"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure#Identifiers":{"url":"\/documentation\/swift\/lexicalstructure#Identifiers","title":"Identifiers","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Identifiers","kind":"section"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining#Accessing-Subscripts-of-Optional-Type":{"type":"topic","kind":"section","abstract":[],"title":"Accessing Subscripts of Optional Type","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining#Accessing-Subscripts-of-Optional-Type","url":"\/documentation\/swift\/optionalchaining#Accessing-Subscripts-of-Optional-Type"},"doc://com.apple.Swift/documentation/Swift/Attributes#Sendable":{"type":"topic","kind":"section","abstract":[],"title":"Sendable","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#Sendable","url":"\/documentation\/swift\/attributes#Sendable"},"doc://com.apple.Swift/documentation/Swift/Statements#Guard-Statement":{"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Guard-Statement","url":"\/documentation\/swift\/statements#Guard-Statement","title":"Guard Statement","abstract":[]},"doc://com.apple.Swift/documentation/Swift/ControlFlow#Checking-API-Availability":{"type":"topic","kind":"section","abstract":[],"title":"Checking API Availability","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#Checking-API-Availability","url":"\/documentation\/swift\/controlflow#Checking-API-Availability"},"doc://com.apple.Swift/documentation/Swift/Subscripts#Subscript-Options":{"type":"topic","kind":"section","abstract":[],"title":"Subscript Options","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts#Subscript-Options","url":"\/documentation\/swift\/subscripts#Subscript-Options"},"doc://com.apple.Swift/documentation/Swift/Expressions#Type-Casting-Operators":{"type":"topic","kind":"section","abstract":[],"title":"Type-Casting Operators","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Type-Casting-Operators","url":"\/documentation\/swift\/expressions#Type-Casting-Operators"},"doc://com.apple.Swift/documentation/Swift/TheBasics#Type-Annotations":{"type":"topic","kind":"section","abstract":[],"title":"Type Annotations","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Type-Annotations","url":"\/documentation\/swift\/thebasics#Type-Annotations"},"doc://com.apple.Swift/documentation/Swift/Expressions#Initializer-Expression":{"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Initializer-Expression","title":"Initializer Expression","kind":"section","url":"\/documentation\/swift\/expressions#Initializer-Expression","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Declarations#Enumerations-with-Cases-of-Any-Type":{"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Enumerations-with-Cases-of-Any-Type","title":"Enumerations with Cases of Any Type","kind":"section","url":"\/documentation\/swift\/declarations#Enumerations-with-Cases-of-Any-Type","abstract":[]},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting":{"title":"Automatic Reference Counting","url":"\/documentation\/swift\/automaticreferencecounting","abstract":[{"text":"Swift uses ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Declarations#Stored-Variable-Observers-and-Property-Observers":{"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Stored-Variable-Observers-and-Property-Observers","title":"Stored Variable Observers and Property Observers","kind":"section","url":"\/documentation\/swift\/declarations#Stored-Variable-Observers-and-Property-Observers","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Statements#Line-Control-Statement":{"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Line-Control-Statement","title":"Line Control Statement","kind":"section","url":"\/documentation\/swift\/statements#Line-Control-Statement","abstract":[]},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters#String-Interpolation":{"abstract":[],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#String-Interpolation","title":"String Interpolation","kind":"section","url":"\/documentation\/swift\/stringsandcharacters#String-Interpolation"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure#Keywords-and-Punctuation":{"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Keywords-and-Punctuation","title":"Keywords and Punctuation","kind":"section","url":"\/documentation\/swift\/lexicalstructure#Keywords-and-Punctuation","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Types#Protocol-Composition-Type":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Protocol-Composition-Type","abstract":[],"title":"Protocol Composition Type","kind":"section","type":"topic","url":"\/documentation\/swift\/types#Protocol-Composition-Type"},"doc://com.apple.Swift/documentation/Swift/Generics":{"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner.","type":"text"}],"url":"\/documentation\/swift\/generics","role":"article","title":"Generics","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Enumerations#Iterating-over-Enumeration-Cases":{"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Iterating-over-Enumeration-Cases","title":"Iterating over Enumeration Cases","kind":"section","url":"\/documentation\/swift\/enumerations#Iterating-over-Enumeration-Cases","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Patterns#Optional-Pattern":{"kind":"section","type":"topic","url":"\/documentation\/swift\/patterns#Optional-Pattern","title":"Optional Pattern","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns#Optional-Pattern","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Patterns#Enumeration-Case-Pattern":{"title":"Enumeration Case Pattern","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns#Enumeration-Case-Pattern","kind":"section","abstract":[],"type":"topic","url":"\/documentation\/swift\/patterns#Enumeration-Case-Pattern"},"doc://com.apple.Swift/documentation/Swift/AccessControl#Access-Levels-for-Unit-Test-Targets":{"type":"topic","title":"Access Levels for Unit Test Targets","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Access-Levels-for-Unit-Test-Targets","url":"\/documentation\/swift\/accesscontrol#Access-Levels-for-Unit-Test-Targets","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Declarations#Type-Alias-Declaration":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Type-Alias-Declaration","abstract":[],"title":"Type Alias Declaration","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Type-Alias-Declaration"},"doc://com.apple.Swift/documentation/Swift/Initialization#Failable-Initializers":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Failable-Initializers","title":"Failable Initializers","url":"\/documentation\/swift\/initialization#Failable-Initializers","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters#Special-Characters-in-String-Literals":{"type":"topic","title":"Special Characters in String Literals","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Special-Characters-in-String-Literals","url":"\/documentation\/swift\/stringsandcharacters#Special-Characters-in-String-Literals","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Subscripts#Type-Subscripts":{"type":"topic","title":"Type Subscripts","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts#Type-Subscripts","url":"\/documentation\/swift\/subscripts#Type-Subscripts","abstract":[]},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters#Comparing-Strings":{"type":"topic","title":"Comparing Strings","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#Comparing-Strings","url":"\/documentation\/swift\/stringsandcharacters#Comparing-Strings","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Expressions#Key-Path-Expression":{"type":"topic","title":"Key-Path Expression","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Key-Path-Expression","url":"\/documentation\/swift\/expressions#Key-Path-Expression","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Expressions#Literal-Expression":{"type":"topic","title":"Literal Expression","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Literal-Expression","url":"\/documentation\/swift\/expressions#Literal-Expression","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Concurrency":{"title":"Concurrency","url":"\/documentation\/swift\/concurrency","abstract":[{"text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Parallel code","type":"text"}]},{"type":"text","text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/BasicOperators#Range-Operators":{"type":"topic","title":"Range Operators","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Range-Operators","url":"\/documentation\/swift\/basicoperators#Range-Operators","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Properties#Property-Wrappers":{"type":"topic","title":"Property Wrappers","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Property-Wrappers","url":"\/documentation\/swift\/properties#Property-Wrappers","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Expressions#Explicit-Member-Expression":{"type":"topic","title":"Explicit Member Expression","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Explicit-Member-Expression","url":"\/documentation\/swift\/expressions#Explicit-Member-Expression","abstract":[]},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Result-Builders":{"title":"Result Builders","kind":"section","type":"topic","abstract":[],"url":"\/documentation\/swift\/advancedoperators#Result-Builders","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Result-Builders"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure":{"abstract":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"lexical structure","type":"text"}]},{"text":" of Swift describes what sequence of characters form valid tokens of the language. These valid tokens form the lowest-level building blocks of the language and are used to describe the rest of the language in subsequent chapters. A token consists of an identifier, keyword, punctuation, literal, or operator.","type":"text"}],"url":"\/documentation\/swift\/lexicalstructure","role":"article","title":"Lexical Structure","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Attributes#unknown":{"title":"unknown","kind":"section","type":"topic","abstract":[],"url":"\/documentation\/swift\/attributes#unknown","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#unknown"},"doc://com.apple.Swift/documentation/Swift/Protocols":{"role":"article","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"protocol","type":"text"}]},{"text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be ","type":"text"},{"inlineContent":[{"text":"adopted","type":"text"}],"type":"emphasis"},{"text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to ","type":"text"},{"inlineContent":[{"text":"conform","type":"text"}],"type":"emphasis"},{"type":"text","text":" to that protocol."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","kind":"article","url":"\/documentation\/swift\/protocols","title":"Protocols"},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"title":"Memory Safety","url":"\/documentation\/swift\/memorysafety","abstract":[{"text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/GenericParametersAndArguments":{"abstract":[{"text":"This chapter describes parameters and arguments for generic types, functions, and initializers. When you declare a generic type, function, subscript, or initializer, you specify the type parameters that the generic type, function, or initializer can work with. These type parameters act as placeholders that are replaced by actual concrete type arguments when an instance of a generic type is created or a generic function or initializer is called.","type":"text"}],"url":"\/documentation\/swift\/genericparametersandarguments","role":"article","title":"Generic Parameters and Arguments","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/TheBasics#Optionals":{"abstract":[],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Optionals","title":"Optionals","kind":"section","url":"\/documentation\/swift\/thebasics#Optionals"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"url":"\/documentation\/swift\/errorhandling","role":"article","title":"Error Handling","abstract":[{"inlineContent":[{"type":"text","text":"Error handling"}],"type":"emphasis"},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","type":"topic"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"url":"\/documentation\/swift\/thebasics","role":"article","title":"The Basics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","type":"topic"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes#Array-Type-Shorthand-Syntax":{"title":"Array Type Shorthand Syntax","kind":"section","type":"topic","abstract":[],"url":"\/documentation\/swift\/collectiontypes#Array-Type-Shorthand-Syntax","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Array-Type-Shorthand-Syntax"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"url":"\/documentation\/swift\/advancedoperators","role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","isActive":true},{"type":"text","text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","type":"topic"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling#Handling-Errors-Using-Do-Catch":{"title":"Handling Errors Using Do-Catch","kind":"section","type":"topic","abstract":[],"url":"\/documentation\/swift\/errorhandling#Handling-Errors-Using-Do-Catch","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling#Handling-Errors-Using-Do-Catch"},"doc://com.apple.Swift/documentation/Swift/BasicOperators#Comparison-Operators":{"title":"Comparison Operators","kind":"section","type":"topic","abstract":[],"url":"\/documentation\/swift\/basicoperators#Comparison-Operators","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Comparison-Operators"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure#Literals":{"title":"Literals","kind":"section","type":"topic","abstract":[],"url":"\/documentation\/swift\/lexicalstructure#Literals","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Literals"},"doc://com.apple.Swift/documentation/Swift/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type":{"title":"Enumerations with Cases of a Raw-Value Type","kind":"section","type":"topic","abstract":[],"url":"\/documentation\/swift\/declarations#Enumerations-with-Cases-of-a-Raw-Value-Type","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Enumerations-with-Cases-of-a-Raw-Value-Type"},"doc://com.apple.Swift/documentation/Swift/Declarations#Function-Declaration":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Function-Declaration","abstract":[],"title":"Function Declaration","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Function-Declaration"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters#String-Indices":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters#String-Indices","url":"\/documentation\/swift\/stringsandcharacters#String-Indices","abstract":[],"kind":"section","title":"String Indices","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Declarations#Type-Variable-Properties":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Type-Variable-Properties","url":"\/documentation\/swift\/declarations#Type-Variable-Properties","abstract":[],"kind":"section","title":"Type Variable Properties","type":"topic"},"doc://com.apple.Swift/documentation/Swift/TheBasics#Debugging-with-Assertions":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Debugging-with-Assertions","url":"\/documentation\/swift\/thebasics#Debugging-with-Assertions","abstract":[],"kind":"section","title":"Debugging with Assertions","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Functions#Functions-With-an-Implicit-Return":{"title":"Functions With an Implicit Return","url":"\/documentation\/swift\/functions#Functions-With-an-Implicit-Return","abstract":[],"kind":"section","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Functions-With-an-Implicit-Return"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure#Operators":{"title":"Operators","abstract":[],"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Operators","type":"topic","url":"\/documentation\/swift\/lexicalstructure#Operators"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting#Unowned-Optional-References":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Unowned-Optional-References","url":"\/documentation\/swift\/automaticreferencecounting#Unowned-Optional-References","abstract":[],"kind":"section","title":"Unowned Optional References","type":"topic"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining#Calling-Methods-Through-Optional-Chaining":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining#Calling-Methods-Through-Optional-Chaining","url":"\/documentation\/swift\/optionalchaining#Calling-Methods-Through-Optional-Chaining","abstract":[],"kind":"section","title":"Calling Methods Through Optional Chaining","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Initialization#Required-Initializers":{"url":"\/documentation\/swift\/initialization#Required-Initializers","abstract":[],"title":"Required Initializers","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Required-Initializers","kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Declarations#Methods-with-Special-Names":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Methods-with-Special-Names","abstract":[],"url":"\/documentation\/swift\/declarations#Methods-with-Special-Names","type":"topic","kind":"section","title":"Methods with Special Names"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Overflow-Operators":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Overflow-Operators","type":"topic","abstract":[],"kind":"section","url":"\/documentation\/swift\/advancedoperators#Overflow-Operators","title":"Overflow Operators"},"doc://com.apple.Swift/documentation/Swift/Statements":{"abstract":[{"text":"In Swift, there are three kinds of statements: simple statements, compiler control statements, and control flow statements. Simple statements are the most common and consist of either an expression or a declaration. Compiler control statements allow the program to change aspects of the compiler’s behavior and include a conditional compilation block and a line control statement.","type":"text"}],"url":"\/documentation\/swift\/statements","role":"article","title":"Statements","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Generics#Extending-a-Generic-Type":{"url":"\/documentation\/swift\/generics#Extending-a-Generic-Type","title":"Extending a Generic Type","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Extending-a-Generic-Type","abstract":[],"type":"topic"},"doc://com.apple.Swift/documentation/Swift/Types":{"abstract":[{"text":"In Swift, there are two kinds of types: named types and compound types. A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"named type","type":"text"}]},{"text":" is a type that can be given a particular name when it’s defined. Named types include classes, structures, enumerations, and protocols. For example, instances of a user-defined class named ","type":"text"},{"type":"codeVoice","code":"MyClass"},{"text":" have the type ","type":"text"},{"type":"codeVoice","code":"MyClass"},{"text":". In addition to user-defined named types, the Swift standard library defines many commonly used named types, including those that represent arrays, dictionaries, and optional values.","type":"text"}],"url":"\/documentation\/swift\/types","role":"article","title":"Types","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift":{"title":"Swift","url":"\/documentation\/swift","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","role":"collection","type":"topic"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining#Accessing-Properties-Through-Optional-Chaining":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining#Accessing-Properties-Through-Optional-Chaining","type":"topic","abstract":[],"kind":"section","url":"\/documentation\/swift\/optionalchaining#Accessing-Properties-Through-Optional-Chaining","title":"Accessing Properties Through Optional Chaining"},"doc://com.apple.Swift/documentation/Swift/Declarations":{"abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"declaration","type":"text"}]},{"text":" introduces a new name or construct into your program. For example, you use declarations to introduce functions and methods, to introduce variables and constants, and to define enumeration, structure, class, and protocol types. You can also use a declaration to extend the behavior of an existing named type and to import symbols into your program that are declared elsewhere.","type":"text"}],"url":"\/documentation\/swift\/declarations","role":"article","title":"Declarations","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Attributes#dynamicCallable":{"title":"dynamicCallable","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#dynamicCallable","kind":"section","abstract":[],"type":"topic","url":"\/documentation\/swift\/attributes#dynamicCallable"},"doc://com.apple.Swift/documentation/Swift/Initialization#Overriding-a-Failable-Initializer":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Overriding-a-Failable-Initializer","type":"topic","abstract":[],"kind":"section","url":"\/documentation\/swift\/initialization#Overriding-a-Failable-Initializer","title":"Overriding a Failable Initializer"},"doc://com.apple.Swift/documentation/Swift/Enumerations#Implicitly-Assigned-Raw-Values":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Implicitly-Assigned-Raw-Values","type":"topic","abstract":[],"kind":"section","url":"\/documentation\/swift\/enumerations#Implicitly-Assigned-Raw-Values","title":"Implicitly Assigned Raw Values"},"doc://com.apple.Swift/documentation/Swift/Initialization#Assigning-Constant-Properties-During-Initialization":{"type":"topic","title":"Assigning Constant Properties During Initialization","url":"\/documentation\/swift\/initialization#Assigning-Constant-Properties-During-Initialization","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Assigning-Constant-Properties-During-Initialization","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Expressions":{"abstract":[{"text":"In Swift, there are four kinds of expressions: prefix expressions, infix expressions, primary expressions, and postfix expressions. Evaluating an expression returns a value, causes a side effect, or both.","type":"text"}],"url":"\/documentation\/swift\/expressions","role":"article","title":"Expressions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Statements#Switch-Statement":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Switch-Statement","type":"topic","abstract":[],"kind":"section","url":"\/documentation\/swift\/statements#Switch-Statement","title":"Switch Statement"},"doc://com.apple.Swift/documentation/Swift/Declarations#Functions-that-Never-Return":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Functions-that-Never-Return","kind":"section","url":"\/documentation\/swift\/declarations#Functions-that-Never-Return","title":"Functions that Never Return","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Expressions#Await-Operator":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Await-Operator","kind":"section","url":"\/documentation\/swift\/expressions#Await-Operator","title":"Await Operator","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Properties#Shorthand-Getter-Declaration":{"title":"Shorthand Getter Declaration","url":"\/documentation\/swift\/properties#Shorthand-Getter-Declaration","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Shorthand-Getter-Declaration","abstract":[],"kind":"section"},"doc://com.apple.Swift/documentation/Swift/Types#Function-Type":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Function-Type","kind":"section","url":"\/documentation\/swift\/types#Function-Type","title":"Function Type","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Equivalence-Operators":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Equivalence-Operators","kind":"section","url":"\/documentation\/swift\/advancedoperators#Equivalence-Operators","title":"Equivalence Operators","type":"topic","abstract":[]}}}