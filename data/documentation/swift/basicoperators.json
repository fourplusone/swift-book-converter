{"abstract":[{"text":"An ","type":"text"},{"inlineContent":[{"type":"text","text":"operator"}],"type":"emphasis"},{"text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (","type":"text"},{"code":"+","type":"codeVoice"},{"text":") adds two numbers, as in ","type":"text"},{"code":"let i = 1 + 2","type":"codeVoice"},{"text":", and the logical AND operator (","type":"text"},{"code":"&&","type":"codeVoice"},{"text":") combines two Boolean values, as in ","type":"text"},{"code":"if enteredDoorCode && passedRetinaScan","type":"codeVoice"},{"text":".","type":"text"}],"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"sections":[],"metadata":{"title":"Basic Operators","modules":[{"name":"Swift"}],"roleHeading":"Article","role":"article"},"kind":"article","identifier":{"url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/swift\/basicoperators"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"title":"Language Guide","identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"],"generated":true}],"primaryContentSections":[{"kind":"content","content":[{"level":2,"anchor":"overview","text":"Overview","type":"heading"},{"inlineContent":[{"text":"Swift supports the operators you may already know from languages like C, and improves several capabilities to eliminate common coding errors. The assignment operator (","type":"text"},{"code":"=","type":"codeVoice"},{"text":") doesn’t return a value, to prevent it from being mistakenly used when the equal to operator (","type":"text"},{"code":"==","type":"codeVoice"},{"text":") is intended. Arithmetic operators (","type":"text"},{"code":"+","type":"codeVoice"},{"text":", ","type":"text"},{"code":"-","type":"codeVoice"},{"text":", ","type":"text"},{"code":"*","type":"codeVoice"},{"text":", ","type":"text"},{"code":"\/","type":"codeVoice"},{"text":", ","type":"text"},{"code":"%","type":"codeVoice"},{"text":" and so forth) detect and disallow value overflow, to avoid unexpected results when working with numbers that become larger or smaller than the allowed value range of the type that stores them. You can opt in to value overflow behavior by using Swift’s overflow operators, as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Overflow-Operators"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Swift also provides range operators that aren’t found in C, such as "},{"type":"codeVoice","code":"a..<b"},{"type":"text","text":" and "},{"type":"codeVoice","code":"a...b"},{"type":"text","text":", as a shortcut for expressing a range of values."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This chapter describes the common operators in Swift. "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","type":"reference","isActive":true},{"type":"text","text":" covers Swift’s advanced operators, and describes how to define your own custom operators and implement the standard operators for your own custom types."}],"type":"paragraph"},{"level":2,"anchor":"Terminology","text":"Terminology","type":"heading"},{"inlineContent":[{"type":"text","text":"Operators are unary, binary, or ternary:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Unary"}],"type":"emphasis"},{"text":" operators operate on a single target (such as ","type":"text"},{"code":"-a","type":"codeVoice"},{"text":"). Unary ","type":"text"},{"inlineContent":[{"type":"text","text":"prefix"}],"type":"emphasis"},{"text":" operators appear immediately before their target (such as ","type":"text"},{"code":"!b","type":"codeVoice"},{"text":"), and unary ","type":"text"},{"inlineContent":[{"type":"text","text":"postfix"}],"type":"emphasis"},{"text":" operators appear immediately after their target (such as ","type":"text"},{"code":"c!","type":"codeVoice"},{"text":").","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Binary"}]},{"type":"text","text":" operators operate on two targets (such as "},{"code":"2 + 3","type":"codeVoice"},{"type":"text","text":") and are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"infix"}]},{"type":"text","text":" because they appear in between their two targets."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Ternary"}],"type":"emphasis"},{"text":" operators operate on three targets. Like C, Swift has only one ternary operator, the ternary conditional operator (","type":"text"},{"code":"a ? b : c","type":"codeVoice"},{"text":").","type":"text"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The values that operators affect are "},{"inlineContent":[{"type":"text","text":"operands"}],"type":"emphasis"},{"type":"text","text":". In the expression "},{"type":"codeVoice","code":"1 + 2"},{"type":"text","text":", the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" symbol is an infix operator and its two operands are the values "},{"type":"codeVoice","code":"1"},{"type":"text","text":" and "},{"type":"codeVoice","code":"2"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Assignment-Operator","text":"Assignment Operator","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"assignment operator"}],"type":"emphasis"},{"text":" (","type":"text"},{"code":"a = b","type":"codeVoice"},{"text":") initializes or updates the value of ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" with the value of ","type":"text"},{"code":"b","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let b = 10","var a = 5","a = b","\/\/ a is now equal to 10"],"type":"codeListing"},{"inlineContent":[{"text":"If the right side of the assignment is a tuple with multiple values, its elements can be decomposed into multiple constants or variables at once:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let (x, y) = (1, 2)","\/\/ x is equal to 1, and y is equal to 2"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Unlike the assignment operator in C and Objective-C, the assignment operator in Swift doesn’t itself return a value. The following statement isn’t valid:"}],"type":"paragraph"},{"syntax":"swift","code":["if x = y {","    \/\/ This isn't valid, because x = y doesn't return a value.","}"],"type":"codeListing"},{"inlineContent":[{"text":"This feature prevents the assignment operator (","type":"text"},{"type":"codeVoice","code":"="},{"text":") from being used by accident when the equal to operator (","type":"text"},{"type":"codeVoice","code":"=="},{"text":") is actually intended. By making ","type":"text"},{"type":"codeVoice","code":"if x = y"},{"text":" invalid, Swift helps you to avoid these kinds of errors in your code.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Arithmetic-Operators","text":"Arithmetic Operators","type":"heading"},{"inlineContent":[{"text":"Swift supports the four standard ","type":"text"},{"inlineContent":[{"type":"text","text":"arithmetic operators"}],"type":"emphasis"},{"text":" for all number types:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Addition (","type":"text"},{"type":"codeVoice","code":"+"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Subtraction ("},{"code":"-","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Multiplication ("},{"type":"codeVoice","code":"*"},{"type":"text","text":")"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Division ("},{"code":"\/","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]}],"type":"unorderedList"},{"syntax":"swift","code":["1 + 2       \/\/ equals 3","5 - 3       \/\/ equals 2","2 * 3       \/\/ equals 6","10.0 \/ 2.5  \/\/ equals 4.0"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Unlike the arithmetic operators in C and Objective-C, the Swift arithmetic operators don’t allow values to overflow by default. You can opt in to value overflow behavior by using Swift’s overflow operators (such as "},{"type":"codeVoice","code":"a &+ b"},{"type":"text","text":"). See "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Overflow-Operators","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"The addition operator is also supported for ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" concatenation:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\"hello, \" + \"world\"  \/\/ equals \"hello, world\""],"type":"codeListing"},{"level":3,"anchor":"Remainder-Operator","text":"Remainder Operator","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"remainder operator"}],"type":"emphasis"},{"text":" (","type":"text"},{"type":"codeVoice","code":"a % b"},{"text":") works out how many multiples of ","type":"text"},{"type":"codeVoice","code":"b"},{"text":" will fit inside ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" and returns the value that’s left over (known as the ","type":"text"},{"inlineContent":[{"type":"text","text":"remainder"}],"type":"emphasis"},{"text":").","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":"The remainder operator ("},{"type":"codeVoice","code":"%"},{"type":"text","text":") is also known as a "},{"inlineContent":[{"type":"text","text":"modulo operator"}],"type":"emphasis"},{"type":"text","text":" in other languages. However, its behavior in Swift for negative numbers means that, strictly speaking, it’s a remainder rather than a modulo operation."}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"Here’s how the remainder operator works. To calculate "},{"type":"codeVoice","code":"9 % 4"},{"type":"text","text":", you first work out how many "},{"type":"codeVoice","code":"4"},{"type":"text","text":"s will fit inside "},{"type":"codeVoice","code":"9"},{"type":"text","text":":"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"remainderInteger"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can fit two "},{"code":"4","type":"codeVoice"},{"type":"text","text":"s inside "},{"code":"9","type":"codeVoice"},{"type":"text","text":", and the remainder is "},{"code":"1","type":"codeVoice"},{"type":"text","text":" (shown in orange)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In Swift, this would be written as:"}],"type":"paragraph"},{"syntax":"swift","code":["9 % 4    \/\/ equals 1"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"To determine the answer for "},{"code":"a % b","type":"codeVoice"},{"type":"text","text":", the "},{"code":"%","type":"codeVoice"},{"type":"text","text":" operator calculates the following equation and returns "},{"code":"remainder","type":"codeVoice"},{"type":"text","text":" as its output:"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"a"},{"type":"text","text":" = ("},{"type":"codeVoice","code":"b"},{"type":"text","text":" x "},{"type":"codeVoice","code":"some multiplier"},{"type":"text","text":") + "},{"type":"codeVoice","code":"remainder"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"where "},{"code":"some multiplier","type":"codeVoice"},{"type":"text","text":" is the largest number of multiples of "},{"code":"b","type":"codeVoice"},{"type":"text","text":" that will fit inside "},{"code":"a","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Inserting ","type":"text"},{"type":"codeVoice","code":"9"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"4"},{"text":" into this equation yields:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"codeVoice","code":"9"},{"text":" = (","type":"text"},{"type":"codeVoice","code":"4"},{"text":" x ","type":"text"},{"type":"codeVoice","code":"2"},{"text":") + ","type":"text"},{"type":"codeVoice","code":"1"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The same method is applied when calculating the remainder for a negative value of "},{"code":"a","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["-9 % 4   \/\/ equals -1"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Inserting "},{"type":"codeVoice","code":"-9"},{"type":"text","text":" and "},{"type":"codeVoice","code":"4"},{"type":"text","text":" into the equation yields:"}],"type":"paragraph"},{"inlineContent":[{"code":"-9","type":"codeVoice"},{"type":"text","text":" = ("},{"code":"4","type":"codeVoice"},{"type":"text","text":" x "},{"code":"-2","type":"codeVoice"},{"type":"text","text":") + "},{"code":"-1","type":"codeVoice"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"giving a remainder value of "},{"code":"-1","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The sign of "},{"type":"codeVoice","code":"b"},{"type":"text","text":" is ignored for negative values of "},{"type":"codeVoice","code":"b"},{"type":"text","text":". This means that "},{"type":"codeVoice","code":"a % b"},{"type":"text","text":" and "},{"type":"codeVoice","code":"a % -b"},{"type":"text","text":" always give the same answer."}],"type":"paragraph"},{"level":3,"anchor":"Unary-Minus-Operator","text":"Unary Minus Operator","type":"heading"},{"inlineContent":[{"text":"The sign of a numeric value can be toggled using a prefixed ","type":"text"},{"code":"-","type":"codeVoice"},{"text":", known as the ","type":"text"},{"inlineContent":[{"text":"unary minus operator","type":"text"}],"type":"emphasis"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let three = 3","let minusThree = -three       \/\/ minusThree equals -3","let plusThree = -minusThree   \/\/ plusThree equals 3, or \"minus minus three\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The unary minus operator ("},{"type":"codeVoice","code":"-"},{"type":"text","text":") is prepended directly before the value it operates on, without any white space."}],"type":"paragraph"},{"level":3,"anchor":"Unary-Plus-Operator","text":"Unary Plus Operator","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"unary plus operator"}],"type":"emphasis"},{"text":" (","type":"text"},{"type":"codeVoice","code":"+"},{"text":") simply returns the value it operates on, without any change:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let minusSix = -6","let alsoMinusSix = +minusSix  \/\/ alsoMinusSix equals -6"],"type":"codeListing"},{"inlineContent":[{"text":"Although the unary plus operator doesn’t actually do anything, you can use it to provide symmetry in your code for positive numbers when also using the unary minus operator for negative numbers.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Compound-Assignment-Operators","text":"Compound Assignment Operators","type":"heading"},{"inlineContent":[{"text":"Like C, Swift provides ","type":"text"},{"inlineContent":[{"type":"text","text":"compound assignment operators"}],"type":"emphasis"},{"text":" that combine assignment (","type":"text"},{"code":"=","type":"codeVoice"},{"text":") with another operation. One example is the ","type":"text"},{"inlineContent":[{"type":"text","text":"addition assignment operator"}],"type":"emphasis"},{"text":" (","type":"text"},{"code":"+=","type":"codeVoice"},{"text":"):","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var a = 1","a += 2","\/\/ a is now equal to 3"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The expression "},{"type":"codeVoice","code":"a += 2"},{"type":"text","text":" is shorthand for "},{"type":"codeVoice","code":"a = a + 2"},{"type":"text","text":". Effectively, the addition and the assignment are combined into one operator that performs both tasks at the same time."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The compound assignment operators don’t return a value. For example, you can’t write ","type":"text"},{"type":"codeVoice","code":"let b = a += 2"},{"text":".","type":"text"}]}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"For information about the operators provided by the Swift standard library, see "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","type":"reference","isActive":true},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations]"},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"anchor":"Comparison-Operators","text":"Comparison Operators","type":"heading"},{"inlineContent":[{"text":"Swift supports the following comparison operators:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Equal to (","type":"text"},{"code":"a == b","type":"codeVoice"},{"text":")","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Not equal to (","type":"text"},{"code":"a != b","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Greater than (","type":"text"},{"type":"codeVoice","code":"a > b"},{"text":")","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Less than ("},{"type":"codeVoice","code":"a < b"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Greater than or equal to (","type":"text"},{"type":"codeVoice","code":"a >= b"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Less than or equal to (","type":"text"},{"code":"a <= b","type":"codeVoice"},{"text":")","type":"text"}]}]}],"type":"unorderedList"},{"content":[{"type":"paragraph","inlineContent":[{"text":"Swift also provides two ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"identity operators"}]},{"text":" (","type":"text"},{"type":"codeVoice","code":"==="},{"text":" and ","type":"text"},{"type":"codeVoice","code":"!=="},{"text":"), which you use to test whether two object references both refer to the same object instance. For more information, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Identity-Operators","type":"reference","isActive":true},{"text":".","type":"text"}]}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"text":"Each of the comparison operators returns a ","type":"text"},{"type":"codeVoice","code":"Bool"},{"text":" value to indicate whether or not the statement is true:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["1 == 1   \/\/ true because 1 is equal to 1","2 != 1   \/\/ true because 2 isn't equal to 1","2 > 1    \/\/ true because 2 is greater than 1","1 < 2    \/\/ true because 1 is less than 2","1 >= 1   \/\/ true because 1 is greater than or equal to 1","2 <= 1   \/\/ false because 2 isn't less than or equal to 1"],"type":"codeListing"},{"inlineContent":[{"text":"Comparison operators are often used in conditional statements, such as the ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statement:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let name = \"world\"","if name == \"world\" {","    print(\"hello, world\")","} else {","    print(\"I'm sorry \\(name), but I don't recognize you\")","}","\/\/ Prints \"hello, world\", because name is indeed equal to \"world\"."],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"if"},{"type":"text","text":" statement, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can compare two tuples if they have the same type and the same number of values. Tuples are compared from left to right, one value at a time, until the comparison finds two values that aren’t equal. Those two values are compared, and the result of that comparison determines the overall result of the tuple comparison. If all the elements are equal, then the tuples themselves are equal. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["(1, \"zebra\") < (2, \"apple\")   \/\/ true because 1 is less than 2; \"zebra\" and \"apple\" aren't compared","(3, \"apple\") < (3, \"bird\")    \/\/ true because 3 is equal to 3, and \"apple\" is less than \"bird\"","(4, \"dog\") == (4, \"dog\")      \/\/ true because 4 is equal to 4, and \"dog\" is equal to \"dog\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the example above, you can see the left-to-right comparison behavior on the first line. Because "},{"code":"1","type":"codeVoice"},{"type":"text","text":" is less than "},{"code":"2","type":"codeVoice"},{"type":"text","text":", "},{"code":"(1, \"zebra\")","type":"codeVoice"},{"type":"text","text":" is considered less than "},{"code":"(2, \"apple\")","type":"codeVoice"},{"type":"text","text":", regardless of any other values in the tuples. It doesn’t matter that "},{"code":"\"zebra\"","type":"codeVoice"},{"type":"text","text":" isn’t less than "},{"code":"\"apple\"","type":"codeVoice"},{"type":"text","text":", because the comparison is already determined by the tuples’ first elements. However, when the tuples’ first elements are the same, their second elements "},{"type":"emphasis","inlineContent":[{"type":"text","text":"are"}]},{"type":"text","text":" compared—this is what happens on the second and third line."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Tuples can be compared with a given operator only if the operator can be applied to each value in the respective tuples. For example, as demonstrated in the code below, you can compare two tuples of type "},{"code":"(String, Int)","type":"codeVoice"},{"type":"text","text":" because both "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" values can be compared using the "},{"code":"<","type":"codeVoice"},{"type":"text","text":" operator. In contrast, two tuples of type "},{"code":"(String, Bool)","type":"codeVoice"},{"type":"text","text":" can’t be compared with the "},{"code":"<","type":"codeVoice"},{"type":"text","text":" operator because the "},{"code":"<","type":"codeVoice"},{"type":"text","text":" operator can’t be applied to "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" values."}],"type":"paragraph"},{"syntax":"swift","code":["(\"blue\", -1) < (\"purple\", 1)        \/\/ OK, evaluates to true","(\"blue\", false) < (\"purple\", true)  \/\/ Error because < can't compare Boolean values"],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The Swift standard library includes tuple comparison operators for tuples with fewer than seven elements. To compare tuples with seven or more elements, you must implement the comparison operators yourself.","type":"text"}]}],"name":"Note","type":"aside","style":"note"},{"level":2,"anchor":"Ternary-Conditional-Operator","text":"Ternary Conditional Operator","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"ternary conditional operator"}]},{"type":"text","text":" is a special operator with three parts, which takes the form "},{"code":"question ? answer1 : answer2","type":"codeVoice"},{"type":"text","text":". It’s a shortcut for evaluating one of two expressions based on whether "},{"code":"question","type":"codeVoice"},{"type":"text","text":" is true or false. If "},{"code":"question","type":"codeVoice"},{"type":"text","text":" is true, it evaluates "},{"code":"answer1","type":"codeVoice"},{"type":"text","text":" and returns its value; otherwise, it evaluates "},{"code":"answer2","type":"codeVoice"},{"type":"text","text":" and returns its value."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The ternary conditional operator is shorthand for the code below:"}],"type":"paragraph"},{"syntax":"swift","code":["if question {","    answer1","} else {","    answer2","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Here’s an example, which calculates the height for a table row. The row height should be 50 points taller than the content height if the row has a header, and 20 points taller if the row doesn’t have a header:"}],"type":"paragraph"},{"syntax":"swift","code":["let contentHeight = 40","let hasHeader = true","let rowHeight = contentHeight + (hasHeader ? 50 : 20)","\/\/ rowHeight is equal to 90"],"type":"codeListing"},{"inlineContent":[{"text":"The example above is shorthand for the code below:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let contentHeight = 40","let hasHeader = true","let rowHeight: Int","if hasHeader {","    rowHeight = contentHeight + 50","} else {","    rowHeight = contentHeight + 20","}","\/\/ rowHeight is equal to 90"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The first example’s use of the ternary conditional operator means that "},{"type":"codeVoice","code":"rowHeight"},{"type":"text","text":" can be set to the correct value on a single line of code, which is more concise than the code used in the second example."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The ternary conditional operator provides an efficient shorthand for deciding which of two expressions to consider. Use the ternary conditional operator with care, however. Its conciseness can lead to hard-to-read code if overused. Avoid combining multiple instances of the ternary conditional operator into one compound statement."}],"type":"paragraph"},{"level":2,"anchor":"Nil-Coalescing-Operator","text":"Nil-Coalescing Operator","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"nil-coalescing operator"}],"type":"emphasis"},{"text":" (","type":"text"},{"code":"a ?? b","type":"codeVoice"},{"text":") unwraps an optional ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" if it contains a value, or returns a default value ","type":"text"},{"code":"b","type":"codeVoice"},{"text":" if ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". The expression ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" is always of an optional type. The expression ","type":"text"},{"code":"b","type":"codeVoice"},{"text":" must match the type that’s stored inside ","type":"text"},{"code":"a","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The nil-coalescing operator is shorthand for the code below:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["a != nil ? a! : b"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The code above uses the ternary conditional operator and forced unwrapping ("},{"type":"codeVoice","code":"a!"},{"type":"text","text":") to access the value wrapped inside "},{"type":"codeVoice","code":"a"},{"type":"text","text":" when "},{"type":"codeVoice","code":"a"},{"type":"text","text":" isn’t "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", and to return "},{"type":"codeVoice","code":"b"},{"type":"text","text":" otherwise. The nil-coalescing operator provides a more elegant way to encapsulate this conditional checking and unwrapping in a concise and readable form."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the value of "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the value of "},{"type":"codeVoice","code":"b"},{"type":"text","text":" isn’t evaluated. This is known as "},{"type":"emphasis","inlineContent":[{"text":"short-circuit evaluation","type":"text"}]},{"type":"text","text":"."}]}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"The example below uses the nil-coalescing operator to choose between a default color name and an optional user-defined color name:"}],"type":"paragraph"},{"syntax":"swift","code":["let defaultColorName = \"red\"","var userDefinedColorName: String?   \/\/ defaults to nil","","var colorNameToUse = userDefinedColorName ?? defaultColorName","\/\/ userDefinedColorName is nil, so colorNameToUse is set to the default of \"red\""],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"userDefinedColorName"},{"text":" variable is defined as an optional ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", with a default value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":". Because ","type":"text"},{"type":"codeVoice","code":"userDefinedColorName"},{"text":" is of an optional type, you can use the nil-coalescing operator to consider its value. In the example above, the operator is used to determine an initial value for a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" variable called ","type":"text"},{"type":"codeVoice","code":"colorNameToUse"},{"text":". Because ","type":"text"},{"type":"codeVoice","code":"userDefinedColorName"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":", the expression ","type":"text"},{"type":"codeVoice","code":"userDefinedColorName ?? defaultColorName"},{"text":" returns the value of ","type":"text"},{"type":"codeVoice","code":"defaultColorName"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"\"red\""},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you assign a non-","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value to ","type":"text"},{"code":"userDefinedColorName","type":"codeVoice"},{"text":" and perform the nil-coalescing operator check again, the value wrapped inside ","type":"text"},{"code":"userDefinedColorName","type":"codeVoice"},{"text":" is used instead of the default:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["userDefinedColorName = \"green\"","colorNameToUse = userDefinedColorName ?? defaultColorName","\/\/ userDefinedColorName isn't nil, so colorNameToUse is set to \"green\""],"type":"codeListing"},{"level":2,"anchor":"Range-Operators","text":"Range Operators","type":"heading"},{"inlineContent":[{"type":"text","text":"Swift includes several "},{"type":"emphasis","inlineContent":[{"text":"range operators","type":"text"}]},{"type":"text","text":", which are shortcuts for expressing a range of values."}],"type":"paragraph"},{"level":3,"anchor":"Closed-Range-Operator","text":"Closed Range Operator","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"closed range operator"}],"type":"emphasis"},{"text":" (","type":"text"},{"code":"a...b","type":"codeVoice"},{"text":") defines a range that runs from ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"b","type":"codeVoice"},{"text":", and includes the values ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"b","type":"codeVoice"},{"text":". The value of ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" must not be greater than ","type":"text"},{"code":"b","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The closed range operator is useful when iterating over a range in which you want all of the values to be used, such as with a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop:"}],"type":"paragraph"},{"syntax":"swift","code":["for index in 1...5 {","    print(\"\\(index) times 5 is \\(index * 5)\")","}","\/\/ 1 times 5 is 5","\/\/ 2 times 5 is 10","\/\/ 3 times 5 is 15","\/\/ 4 times 5 is 20","\/\/ 5 times 5 is 25"],"type":"codeListing"},{"inlineContent":[{"text":"For more about ","type":"text"},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"type":"codeVoice","code":"in"},{"text":" loops, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Half-Open-Range-Operator","text":"Half-Open Range Operator","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"half-open range operator","type":"text"}]},{"text":" (","type":"text"},{"type":"codeVoice","code":"a..<b"},{"text":") defines a range that runs from ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"b"},{"text":", but doesn’t include ","type":"text"},{"type":"codeVoice","code":"b"},{"text":". It’s said to be ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"half-open"}]},{"text":" because it contains its first value, but not its final value. As with the closed range operator, the value of ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" must not be greater than ","type":"text"},{"type":"codeVoice","code":"b"},{"text":". If the value of ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" is equal to ","type":"text"},{"type":"codeVoice","code":"b"},{"text":", then the resulting range will be empty.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Half-open ranges are particularly useful when you work with zero-based lists such as arrays, where it’s useful to count up to (but not including) the length of the list:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let names = [\"Anna\", \"Alex\", \"Brian\", \"Jack\"]","let count = names.count","for i in 0..<count {","    print(\"Person \\(i + 1) is called \\(names[i])\")","}","\/\/ Person 1 is called Anna","\/\/ Person 2 is called Alex","\/\/ Person 3 is called Brian","\/\/ Person 4 is called Jack"],"type":"codeListing"},{"inlineContent":[{"text":"Note that the array contains four items, but ","type":"text"},{"code":"0..<count","type":"codeVoice"},{"text":" only counts as far as ","type":"text"},{"code":"3","type":"codeVoice"},{"text":" (the index of the last item in the array), because it’s a half-open range. For more about arrays, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Arrays","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"One-Sided-Ranges","text":"One-Sided Ranges","type":"heading"},{"inlineContent":[{"type":"text","text":"The closed range operator has an alternative form for ranges that continue as far as possible in one direction—for example, a range that includes all the elements of an array from index 2 to the end of the array. In these cases, you can omit the value from one side of the range operator. This kind of range is called a "},{"inlineContent":[{"text":"one-sided range","type":"text"}],"type":"emphasis"},{"type":"text","text":" because the operator has a value on only one side. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["for name in names[2...] {","    print(name)","}","\/\/ Brian","\/\/ Jack","","for name in names[...2] {","    print(name)","}","\/\/ Anna","\/\/ Alex","\/\/ Brian"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The half-open range operator also has a one-sided form that’s written with only its final value. Just like when you include a value on both sides, the final value isn’t part of the range. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["for name in names[..<2] {","    print(name)","}","\/\/ Anna","\/\/ Alex"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"One-sided ranges can be used in other contexts, not just in subscripts. You can’t iterate over a one-sided range that omits a first value, because it isn’t clear where iteration should begin. You "},{"type":"emphasis","inlineContent":[{"text":"can","type":"text"}]},{"type":"text","text":" iterate over a one-sided range that omits its final value; however, because the range continues indefinitely, make sure you add an explicit end condition for the loop. You can also check whether a one-sided range contains a particular value, as shown in the code below."}],"type":"paragraph"},{"syntax":"swift","code":["let range = ...5","range.contains(7)   \/\/ false","range.contains(4)   \/\/ true","range.contains(-1)  \/\/ true"],"type":"codeListing"},{"level":2,"anchor":"Logical-Operators","text":"Logical Operators","type":"heading"},{"inlineContent":[{"inlineContent":[{"type":"text","text":"Logical operators"}],"type":"emphasis"},{"text":" modify or combine the Boolean logic values ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"false"},{"text":". Swift supports the three standard logical operators found in C-based languages:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Logical NOT ("},{"code":"!a","type":"codeVoice"},{"type":"text","text":")"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Logical AND (","type":"text"},{"code":"a && b","type":"codeVoice"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Logical OR (","type":"text"},{"code":"a || b","type":"codeVoice"},{"text":")","type":"text"}]}]}],"type":"unorderedList"},{"level":3,"anchor":"Logical-NOT-Operator","text":"Logical NOT Operator","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"logical NOT operator"}]},{"text":" (","type":"text"},{"code":"!a","type":"codeVoice"},{"text":") inverts a Boolean value so that ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" becomes ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" becomes ","type":"text"},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The logical NOT operator is a prefix operator, and appears immediately before the value it operates on, without any white space. It can be read as “not "},{"code":"a","type":"codeVoice"},{"type":"text","text":"”, as seen in the following example:"}],"type":"paragraph"},{"syntax":"swift","code":["let allowedEntry = false","if !allowedEntry {","    print(\"ACCESS DENIED\")","}","\/\/ Prints \"ACCESS DENIED\""],"type":"codeListing"},{"inlineContent":[{"text":"The phrase ","type":"text"},{"code":"if !allowedEntry","type":"codeVoice"},{"text":" can be read as “if not allowed entry.” The subsequent line is only executed if “not allowed entry” is true; that is, if ","type":"text"},{"code":"allowedEntry","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"false","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"As in this example, careful choice of Boolean constant and variable names can help to keep code readable and concise, while avoiding double negatives or confusing logic statements.","type":"text"}],"type":"paragraph"},{"level":3,"anchor":"Logical-AND-Operator","text":"Logical AND Operator","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"text":"logical AND operator","type":"text"}]},{"type":"text","text":" ("},{"code":"a && b","type":"codeVoice"},{"type":"text","text":") creates logical expressions where both values must be "},{"code":"true","type":"codeVoice"},{"type":"text","text":" for the overall expression to also be "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If either value is "},{"type":"codeVoice","code":"false"},{"type":"text","text":", the overall expression will also be "},{"type":"codeVoice","code":"false"},{"type":"text","text":". In fact, if the "},{"type":"emphasis","inlineContent":[{"text":"first","type":"text"}]},{"type":"text","text":" value is "},{"type":"codeVoice","code":"false"},{"type":"text","text":", the second value won’t even be evaluated, because it can’t possibly make the overall expression equate to "},{"type":"codeVoice","code":"true"},{"type":"text","text":". This is known as "},{"type":"emphasis","inlineContent":[{"text":"short-circuit evaluation","type":"text"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This example considers two "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" values and only allows access if both values are "},{"code":"true","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["let enteredDoorCode = true","let passedRetinaScan = false","if enteredDoorCode && passedRetinaScan {","    print(\"Welcome!\")","} else {","    print(\"ACCESS DENIED\")","}","\/\/ Prints \"ACCESS DENIED\""],"type":"codeListing"},{"level":3,"anchor":"Logical-OR-Operator","text":"Logical OR Operator","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"logical OR operator"}]},{"type":"text","text":" ("},{"code":"a || b","type":"codeVoice"},{"type":"text","text":") is an infix operator made from two adjacent pipe characters. You use it to create logical expressions in which only "},{"type":"emphasis","inlineContent":[{"text":"one","type":"text"}]},{"type":"text","text":" of the two values has to be "},{"code":"true","type":"codeVoice"},{"type":"text","text":" for the overall expression to be "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Like the Logical AND operator above, the Logical OR operator uses short-circuit evaluation to consider its expressions. If the left side of a Logical OR expression is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", the right side isn’t evaluated, because it can’t change the outcome of the overall expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In the example below, the first ","type":"text"},{"code":"Bool","type":"codeVoice"},{"text":" value (","type":"text"},{"code":"hasDoorKey","type":"codeVoice"},{"text":") is ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", but the second value (","type":"text"},{"code":"knowsOverridePassword","type":"codeVoice"},{"text":") is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":". Because one value is ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", the overall expression also evaluates to ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", and access is allowed:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let hasDoorKey = false","let knowsOverridePassword = true","if hasDoorKey || knowsOverridePassword {","    print(\"Welcome!\")","} else {","    print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""],"type":"codeListing"},{"level":3,"anchor":"Combining-Logical-Operators","text":"Combining Logical Operators","type":"heading"},{"inlineContent":[{"text":"You can combine multiple logical operators to create longer compound expressions:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["if enteredDoorCode && passedRetinaScan || hasDoorKey || knowsOverridePassword {","    print(\"Welcome!\")","} else {","    print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This example uses multiple "},{"code":"&&","type":"codeVoice"},{"type":"text","text":" and "},{"code":"||","type":"codeVoice"},{"type":"text","text":" operators to create a longer compound expression. However, the "},{"code":"&&","type":"codeVoice"},{"type":"text","text":" and "},{"code":"||","type":"codeVoice"},{"type":"text","text":" operators still operate on only two values, so this is actually three smaller expressions chained together. The example can be read as:"}],"type":"paragraph"},{"inlineContent":[{"text":"If we’ve entered the correct door code and passed the retina scan, or if we have a valid door key, or if we know the emergency override password, then allow access.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Based on the values of "},{"code":"enteredDoorCode","type":"codeVoice"},{"type":"text","text":", "},{"code":"passedRetinaScan","type":"codeVoice"},{"type":"text","text":", and "},{"code":"hasDoorKey","type":"codeVoice"},{"type":"text","text":", the first two subexpressions are "},{"code":"false","type":"codeVoice"},{"type":"text","text":". However, the emergency override password is known, so the overall compound expression still evaluates to "},{"code":"true","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"The Swift logical operators ","type":"text"},{"code":"&&","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"||","type":"codeVoice"},{"text":" are left-associative, meaning that compound expressions with multiple logical operators evaluate the leftmost subexpression first.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"},{"level":3,"anchor":"Explicit-Parentheses","text":"Explicit Parentheses","type":"heading"},{"inlineContent":[{"text":"It’s sometimes useful to include parentheses when they’re not strictly needed, to make the intention of a complex expression easier to read. In the door access example above, it’s useful to add parentheses around the first part of the compound expression to make its intent explicit:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["if (enteredDoorCode && passedRetinaScan) || hasDoorKey || knowsOverridePassword {","    print(\"Welcome!\")","} else {","    print(\"ACCESS DENIED\")","}","\/\/ Prints \"Welcome!\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The parentheses make it clear that the first two values are considered as part of a separate possible state in the overall logic. The output of the compound expression doesn’t change, but the overall intention is clearer to the reader. Readability is always preferred over brevity; use parentheses where they help to make your intentions clear."}],"type":"paragraph"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"references":{"doc://com.apple.Swift/documentation/Swift/Methods":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C."}],"type":"topic","title":"Methods","role":"article","url":"\/documentation\/swift\/methods"},"doc://com.apple.Swift/documentation/Swift/Inheritance":{"role":"article","type":"topic","url":"\/documentation\/swift\/inheritance","abstract":[{"text":"A class can ","type":"text"},{"inlineContent":[{"type":"text","text":"inherit"}],"type":"emphasis"},{"text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a ","type":"text"},{"inlineContent":[{"type":"text","text":"subclass"}],"type":"emphasis"},{"type":"text","text":", and the class it inherits from is known as its "},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"type":"text","text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","title":"Inheritance","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Protocols":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"protocol","type":"text"}]},{"type":"text","text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to "},{"inlineContent":[{"type":"text","text":"conform"}],"type":"emphasis"},{"type":"text","text":" to that protocol."}],"type":"topic","title":"Protocols","role":"article","url":"\/documentation\/swift\/protocols"},"doc://com.apple.Swift/documentation/Swift/Subscripts":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"type":"topic","title":"Subscripts","role":"article","url":"\/documentation\/swift\/subscripts"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","abstract":[{"inlineContent":[{"type":"text","text":"Optional chaining"}],"type":"emphasis"},{"text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", the property, method, or subscript call returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/optionalchaining","type":"topic","role":"article","title":"Optional Chaining","kind":"article"},"remainderInteger":{"type":"image","identifier":"remainderInteger","variants":[{"url":"\/images\/remainderInteger@2x.png","traits":["2x","light"]}],"alt":null},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors."}],"type":"topic","title":"Memory Safety","role":"article","url":"\/documentation\/swift\/memorysafety"},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","abstract":[{"type":"text","text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t."}],"url":"\/documentation\/swift\/opaquetypes","type":"topic","role":"article","title":"Opaque Types","kind":"article"},"https://developer.apple.com/documentation/swift/operator_declarations":{"title":"Operator Declarations","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","titleInlineContent":[{"text":"Operator Declarations","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations"},"doc://com.apple.Swift/documentation/Swift/TypeCasting":{"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","title":"Type Casting","type":"topic","kind":"article","role":"article","url":"\/documentation\/swift\/typecasting"},"doc://com.apple.Swift/documentation/Swift/Enumerations":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code."}],"url":"\/documentation\/swift\/enumerations","type":"topic","role":"article","title":"Enumerations","kind":"article"},"doc://com.apple.Swift/documentation/Swift/NestedTypes":{"url":"\/documentation\/swift\/nestedtypes","type":"topic","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":", whereby you nest supporting enumerations, classes, and structures within the definition of the type they support."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","role":"article"},"doc://com.apple.Swift/documentation/Swift/Functions":{"title":"Functions","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed."}],"url":"\/documentation\/swift\/functions"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes#Arrays":{"title":"Arrays","type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Arrays","url":"\/documentation\/swift\/collectiontypes#Arrays"},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements. These include "},{"code":"while","type":"codeVoice"},{"type":"text","text":" loops to perform a task multiple times; "},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" to transfer the flow of execution to another point in your code."}],"type":"topic","title":"Control Flow","role":"article","url":"\/documentation\/swift\/controlflow"},"doc://com.apple.Swift/documentation/Swift/Concurrency":{"title":"Concurrency","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. "},{"type":"emphasis","inlineContent":[{"text":"Parallel code","type":"text"}]},{"text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way.","type":"text"}],"url":"\/documentation\/swift\/concurrency"},"doc://com.apple.Swift/documentation/Swift":{"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","abstract":[],"type":"topic","title":"Swift","role":"collection","url":"\/documentation\/swift"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"url":"\/documentation\/swift\/thebasics","type":"topic","role":"article","title":"The Basics","kind":"article"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"type":"topic","kind":"article","title":"Basic Operators","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","role":"article","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers, as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":", and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values, as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/basicoperators"},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","abstract":[{"inlineContent":[{"type":"text","text":"Access control"}],"type":"emphasis"},{"type":"text","text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used."}],"type":"topic","title":"Access Control","role":"article","url":"\/documentation\/swift\/accesscontrol"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"abstract":[{"type":"text","text":"In addition to the operators described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators"},{"type":"text","text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","title":"Advanced Operators","type":"topic","kind":"article","role":"article","url":"\/documentation\/swift\/advancedoperators"},"doc://com.apple.Swift/documentation/Swift/Properties":{"role":"article","type":"topic","url":"\/documentation\/swift\/properties","abstract":[{"inlineContent":[{"type":"text","text":"Properties"}],"type":"emphasis"},{"type":"text","text":" associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","title":"Properties","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use."}],"url":"\/documentation\/swift\/initialization","type":"topic","role":"article","title":"Initialization","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Extensions":{"type":"topic","kind":"article","title":"Extensions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as "},{"type":"emphasis","inlineContent":[{"text":"retroactive modeling","type":"text"}]},{"type":"text","text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)"}],"url":"\/documentation\/swift\/extensions"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Overflow-Operators":{"title":"Overflow Operators","type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Overflow-Operators","url":"\/documentation\/swift\/advancedoperators#Overflow-Operators"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed."}],"url":"\/documentation\/swift\/automaticreferencecounting","type":"topic","role":"article","title":"Automatic Reference Counting","kind":"article"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes":{"role":"article","type":"topic","url":"\/documentation\/swift\/collectiontypes","abstract":[{"type":"text","text":"Swift provides three primary "},{"inlineContent":[{"type":"text","text":"collection types"}],"type":"emphasis"},{"type":"text","text":", known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","title":"Collection Types","kind":"article"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"role":"article","type":"topic","url":"\/documentation\/swift\/classesandstructures","abstract":[{"inlineContent":[{"type":"text","text":"Structures"}],"type":"emphasis"},{"type":"text","text":" and "},{"inlineContent":[{"text":"classes","type":"text"}],"type":"emphasis"},{"type":"text","text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","title":"Structures and Classes","kind":"article"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures#Identity-Operators":{"title":"Identity Operators","type":"topic","abstract":[],"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Identity-Operators","url":"\/documentation\/swift\/classesandstructures#Identity-Operators"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"role":"article","type":"topic","url":"\/documentation\/swift\/stringsandcharacters","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"text":"string","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a series of characters, such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":". Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type. The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways, including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","title":"Strings and Characters","kind":"article"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"type":"topic","title":"Error Handling","role":"article","url":"\/documentation\/swift\/errorhandling"},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"role":"article","type":"topic","url":"\/documentation\/swift\/deinitialization","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"deinitializer"}],"type":"emphasis"},{"type":"text","text":" is called immediately before a class instance is deallocated. You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword, similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword. Deinitializers are only available on class types."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","title":"Deinitialization","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Generics":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner."}],"url":"\/documentation\/swift\/generics","type":"topic","role":"article","title":"Generics","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Closures":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages."}],"url":"\/documentation\/swift\/closures","type":"topic","role":"article","title":"Closures","kind":"article"}}}