{"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swift\/collectiontypes"]}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"CollectionTypes_intro"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Arrays, sets, and dictionaries in Swift are always clear about the types of values and keys that they can store. This means that you can’t insert a value of the wrong type into a collection by mistake. It also means you can be confident about the type of values you will retrieve from a collection."}]},{"name":"Note","content":[{"inlineContent":[{"text":"Swift’s array, set, and dictionary types are implemented as ","type":"text"},{"inlineContent":[{"type":"text","text":"generic collections"}],"type":"emphasis"},{"text":". For more about generic types and collections, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"anchor":"Mutability-of-Collections","level":2,"text":"Mutability of Collections","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If you create an array, a set, or a dictionary, and assign it to a variable, the collection that’s created will be ","type":"text"},{"inlineContent":[{"type":"text","text":"mutable"}],"type":"emphasis"},{"text":". This means that you can change (or ","type":"text"},{"inlineContent":[{"type":"text","text":"mutate"}],"type":"emphasis"},{"text":") the collection after it’s created by adding, removing, or changing items in the collection. If you assign an array, a set, or a dictionary to a constant, that collection is ","type":"text"},{"inlineContent":[{"type":"text","text":"immutable"}],"type":"emphasis"},{"text":", and its size and contents can’t be changed.","type":"text"}]},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"It’s good practice to create immutable collections in all cases where the collection doesn’t need to change. Doing so makes it easier for you to reason about your code and enables the Swift compiler to optimize the performance of the collections you create."}],"type":"paragraph"}],"type":"aside","style":"note"},{"anchor":"Arrays","level":2,"text":"Arrays","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"text":"array","type":"text"}]},{"type":"text","text":" stores values of the same type in an ordered list. The same value can appear in an array multiple times at different positions."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Array"},{"text":" type is bridged to Foundation’s ","type":"text"},{"type":"codeVoice","code":"NSArray"},{"text":" class.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For more information about using ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" with Foundation and Cocoa, see ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730","isActive":true,"type":"reference"},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/array#2846730]","type":"text"},{"type":"text","text":"."}]}],"type":"aside","style":"note"},{"anchor":"Array-Type-Shorthand-Syntax","level":3,"text":"Array Type Shorthand Syntax","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The type of a Swift array is written in full as ","type":"text"},{"code":"Array<Element>","type":"codeVoice"},{"text":", where ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" is the type of values the array is allowed to store. You can also write the type of an array in shorthand form as ","type":"text"},{"code":"[Element]","type":"codeVoice"},{"text":". Although the two forms are functionally identical, the shorthand form is preferred and is used throughout this guide when referring to the type of an array.","type":"text"}]},{"anchor":"Creating-an-Empty-Array","level":3,"text":"Creating an Empty Array","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can create an empty array of a certain type using initializer syntax:","type":"text"}]},{"code":["var someInts: [Int] = []","print(\"someInts is of type [Int] with \\(someInts.count) items.\")","\/\/ Prints \"someInts is of type [Int] with 0 items.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the type of the "},{"code":"someInts","type":"codeVoice"},{"type":"text","text":" variable is inferred to be "},{"code":"[Int]","type":"codeVoice"},{"text":" from the type of the initializer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, if the context already provides type information, such as a function argument or an already typed variable or constant, you can create an empty array with an empty array literal, which is written as "},{"type":"codeVoice","code":"[]"},{"type":"text","text":" (an empty pair of square brackets):"}]},{"code":["someInts.append(3)","\/\/ someInts now contains 1 value of type Int","someInts = []","\/\/ someInts is now an empty array, but is still of type [Int]"],"syntax":"swift","type":"codeListing"},{"anchor":"Creating-an-Array-with-a-Default-Value","level":3,"text":"Creating an Array with a Default Value","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" type also provides an initializer for creating an array of a certain size with all of its values set to the same default value. You pass this initializer a default value of the appropriate type (called "},{"type":"codeVoice","code":"repeating"},{"type":"text","text":"): and the number of times that value is repeated in the new array (called "},{"type":"codeVoice","code":"count"},{"type":"text","text":"):"}]},{"code":["var threeDoubles = Array(repeating: 0.0, count: 3)","\/\/ threeDoubles is of type [Double], and equals [0.0, 0.0, 0.0]"],"syntax":"swift","type":"codeListing"},{"anchor":"Creating-an-Array-by-Adding-Two-Arrays-Together","level":3,"text":"Creating an Array by Adding Two Arrays Together","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can create a new array by adding together two existing arrays with compatible types with the addition operator (","type":"text"},{"code":"+","type":"codeVoice"},{"text":"). The new array’s type is inferred from the type of the two arrays you add together:","type":"text"}]},{"code":["var anotherThreeDoubles = Array(repeating: 2.5, count: 3)","\/\/ anotherThreeDoubles is of type [Double], and equals [2.5, 2.5, 2.5]","","var sixDoubles = threeDoubles + anotherThreeDoubles","\/\/ sixDoubles is inferred as [Double], and equals [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]"],"syntax":"swift","type":"codeListing"},{"anchor":"Creating-an-Array-with-an-Array-Literal","level":3,"text":"Creating an Array with an Array Literal","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also initialize an array with an "},{"inlineContent":[{"type":"text","text":"array literal"}],"type":"emphasis"},{"type":"text","text":", which is a shorthand way to write one or more values as an array collection. An array literal is written as a list of values, separated by commas, surrounded by a pair of square brackets:"}]},{"code":["[value 1, value 2, value 3]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below creates an array called "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" to store "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values:"}]},{"code":["var shoppingList: [String] = [\"Eggs\", \"Milk\"]","\/\/ shoppingList has been initialized with two initial items"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"shoppingList"},{"text":" variable is declared as “an array of string values”, written as ","type":"text"},{"type":"codeVoice","code":"[String]"},{"text":". Because this particular array has specified a value type of ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", it’s allowed to store ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values only. Here, the ","type":"text"},{"type":"codeVoice","code":"shoppingList"},{"text":" array is initialized with two ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values (","type":"text"},{"type":"codeVoice","code":"\"Eggs\""},{"text":" and ","type":"text"},{"type":"codeVoice","code":"\"Milk\""},{"text":"), written within an array literal.","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"shoppingList"},{"type":"text","text":" array is declared as a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" introducer) and not a constant (with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" introducer) because more items are added to the shopping list in the examples below."}]}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"text":"In this case, the array literal contains two ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values and nothing else. This matches the type of the ","type":"text"},{"type":"codeVoice","code":"shoppingList"},{"text":" variable’s declaration (an array that can only contain ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" values), and so the assignment of the array literal is permitted as a way to initialize ","type":"text"},{"type":"codeVoice","code":"shoppingList"},{"text":" with two initial items.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Thanks to Swift’s type inference, you don’t have to write the type of the array if you’re initializing it with an array literal containing values of the same type. The initialization of "},{"code":"shoppingList","type":"codeVoice"},{"type":"text","text":" could have been written in a shorter form instead:"}]},{"code":["var shoppingList = [\"Eggs\", \"Milk\"]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Because all values in the array literal are of the same type, Swift can infer that ","type":"text"},{"code":"[String]","type":"codeVoice"},{"text":" is the correct type to use for the ","type":"text"},{"code":"shoppingList","type":"codeVoice"},{"text":" variable.","type":"text"}]},{"anchor":"Accessing-and-Modifying-an-Array","level":3,"text":"Accessing and Modifying an Array","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify an array through its methods and properties, or by using subscript syntax."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To find out the number of items in an array, check its read-only "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property:"}]},{"code":["print(\"The shopping list contains \\(shoppingList.count) items.\")","\/\/ Prints \"The shopping list contains 2 items.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Use the Boolean ","type":"text"},{"code":"isEmpty","type":"codeVoice"},{"text":" property as a shortcut for checking whether the ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" property is equal to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["if shoppingList.isEmpty {","    print(\"The shopping list is empty.\")","} else {","    print(\"The shopping list isn't empty.\")","}","\/\/ Prints \"The shopping list isn't empty.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can add a new item to the end of an array by calling the array’s "},{"type":"codeVoice","code":"append(_:)"},{"type":"text","text":" method:"}]},{"code":["shoppingList.append(\"Flour\")","\/\/ shoppingList now contains 3 items, and someone is making pancakes"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Alternatively, append an array of one or more compatible items with the addition assignment operator (","type":"text"},{"code":"+=","type":"codeVoice"},{"text":"):","type":"text"}]},{"code":["shoppingList += [\"Baking Powder\"]","\/\/ shoppingList now contains 4 items","shoppingList += [\"Chocolate Spread\", \"Cheese\", \"Butter\"]","\/\/ shoppingList now contains 7 items"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Retrieve a value from the array by using ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscript syntax"}]},{"text":", passing the index of the value you want to retrieve within square brackets immediately after the name of the array:","type":"text"}]},{"code":["var firstItem = shoppingList[0]","\/\/ firstItem is equal to \"Eggs\""],"syntax":"swift","type":"codeListing"},{"name":"Note","content":[{"inlineContent":[{"text":"The first item in the array has an index of ","type":"text"},{"type":"codeVoice","code":"0"},{"text":", not ","type":"text"},{"type":"codeVoice","code":"1"},{"text":". Arrays in Swift are always zero-indexed.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use subscript syntax to change an existing value at a given index:"}]},{"code":["shoppingList[0] = \"Six eggs\"","\/\/ the first item in the list is now equal to \"Six eggs\" rather than \"Eggs\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When you use subscript syntax, the index you specify needs to be valid. For example, writing ","type":"text"},{"code":"shoppingList[shoppingList.count] = \"Salt\"","type":"codeVoice"},{"text":" to try to append an item to the end of the array results in a runtime error.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can also use subscript syntax to change a range of values at once, even if the replacement set of values has a different length than the range you are replacing. The following example replaces ","type":"text"},{"type":"codeVoice","code":"\"Chocolate Spread\""},{"text":", ","type":"text"},{"type":"codeVoice","code":"\"Cheese\""},{"text":", and ","type":"text"},{"type":"codeVoice","code":"\"Butter\""},{"text":" with ","type":"text"},{"type":"codeVoice","code":"\"Bananas\""},{"text":" and ","type":"text"},{"type":"codeVoice","code":"\"Apples\""},{"type":"text","text":":"}]},{"code":["shoppingList[4...6] = [\"Bananas\", \"Apples\"]","\/\/ shoppingList now contains 6 items"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"To insert an item into the array at a specified index, call the array’s ","type":"text"},{"type":"codeVoice","code":"insert(_:at:)"},{"text":" method:","type":"text"}]},{"code":["shoppingList.insert(\"Maple Syrup\", at: 0)","\/\/ shoppingList now contains 7 items","\/\/ \"Maple Syrup\" is now the first item in the list"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This call to the "},{"type":"codeVoice","code":"insert(_:at:)"},{"type":"text","text":" method inserts a new item with a value of "},{"type":"codeVoice","code":"\"Maple Syrup\""},{"type":"text","text":" at the very beginning of the shopping list, indicated by an index of "},{"type":"codeVoice","code":"0"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, you remove an item from the array with the "},{"code":"remove(at:)","type":"codeVoice"},{"type":"text","text":" method. This method removes the item at the specified index and returns the removed item (although you can ignore the returned value if you don’t need it):"}]},{"code":["let mapleSyrup = shoppingList.remove(at: 0)","\/\/ the item that was at index 0 has just been removed","\/\/ shoppingList now contains 6 items, and no Maple Syrup","\/\/ the mapleSyrup constant is now equal to the removed \"Maple Syrup\" string"],"syntax":"swift","type":"codeListing"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"If you try to access or modify a value for an index that’s outside of an array’s existing bounds, you will trigger a runtime error. You can check that an index is valid before using it by comparing it to the array’s "},{"type":"codeVoice","code":"count"},{"type":"text","text":" property. The largest valid index in an array is "},{"type":"codeVoice","code":"count - 1"},{"type":"text","text":" because arrays are indexed from zero—however, when "},{"type":"codeVoice","code":"count"},{"type":"text","text":" is "},{"type":"codeVoice","code":"0"},{"type":"text","text":" (meaning the array is empty), there are no valid indexes."}],"type":"paragraph"}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any gaps in an array are closed when an item is removed, and so the value at index "},{"type":"codeVoice","code":"0"},{"type":"text","text":" is once again equal to "},{"type":"codeVoice","code":"\"Six eggs\""},{"type":"text","text":":"}]},{"code":["firstItem = shoppingList[0]","\/\/ firstItem is now equal to \"Six eggs\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you want to remove the final item from an array, use the "},{"code":"removeLast()","type":"codeVoice"},{"type":"text","text":" method rather than the "},{"code":"remove(at:)","type":"codeVoice"},{"type":"text","text":" method to avoid the need to query the array’s "},{"code":"count","type":"codeVoice"},{"type":"text","text":" property. Like the "},{"code":"remove(at:)","type":"codeVoice"},{"type":"text","text":" method, "},{"code":"removeLast()","type":"codeVoice"},{"type":"text","text":" returns the removed item:"}]},{"code":["let apples = shoppingList.removeLast()","\/\/ the last item in the array has just been removed","\/\/ shoppingList now contains 5 items, and no apples","\/\/ the apples constant is now equal to the removed \"Apples\" string"],"syntax":"swift","type":"codeListing"},{"anchor":"Iterating-Over-an-Array","level":3,"text":"Iterating Over an Array","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can iterate over the entire set of values in an array with the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop:"}]},{"code":["for item in shoppingList {","    print(item)","}","\/\/ Six eggs","\/\/ Milk","\/\/ Flour","\/\/ Baking Powder","\/\/ Bananas"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need the integer index of each item as well as its value, use the "},{"code":"enumerated()","type":"codeVoice"},{"type":"text","text":" method to iterate over the array instead. For each item in the array, the "},{"type":"codeVoice","code":"enumerated()"},{"type":"text","text":" method returns a tuple composed of an integer and the item. The integers start at zero and count up by one for each item; if you enumerate over a whole array, these integers match the items’ indices. You can decompose the tuple into temporary constants or variables as part of the iteration:"}]},{"code":["for (index, value) in shoppingList.enumerated() {","    print(\"Item \\(index + 1): \\(value)\")","}","\/\/ Item 1: Six eggs","\/\/ Item 2: Milk","\/\/ Item 3: Flour","\/\/ Item 4: Baking Powder","\/\/ Item 5: Bananas"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"For more about the ","type":"text"},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#For-In-Loops","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"anchor":"Sets","level":2,"text":"Sets","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"set","type":"text"}]},{"type":"text","text":" stores distinct values of the same type in a collection with no defined ordering. You can use a set instead of an array when the order of items isn’t important, or when you need to ensure that an item only appears once."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Swift’s ","type":"text"},{"code":"Set","type":"codeVoice"},{"text":" type is bridged to Foundation’s ","type":"text"},{"code":"NSSet","type":"codeVoice"},{"text":" class.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For more information about using ","type":"text"},{"code":"Set","type":"codeVoice"},{"text":" with Foundation and Cocoa, see ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530","type":"reference","isActive":true},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/set#2845530]","type":"text"},{"text":".","type":"text"}]}],"type":"aside","style":"note"},{"anchor":"Hash-Values-for-Set-Types","level":3,"text":"Hash Values for Set Types","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A type must be "},{"inlineContent":[{"type":"text","text":"hashable"}],"type":"emphasis"},{"type":"text","text":" in order to be stored in a set—that is, the type must provide a way to compute a "},{"inlineContent":[{"text":"hash value","type":"text"}],"type":"emphasis"},{"type":"text","text":" for itself. A hash value is an "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" value that’s the same for all objects that compare equally, such that if "},{"code":"a == b","type":"codeVoice"},{"type":"text","text":", the hash value of "},{"code":"a","type":"codeVoice"},{"type":"text","text":" is equal to the hash value of "},{"code":"b","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of Swift’s basic types (such as "},{"code":"String","type":"codeVoice"},{"type":"text","text":", "},{"code":"Int","type":"codeVoice"},{"type":"text","text":", "},{"code":"Double","type":"codeVoice"},{"type":"text","text":", and "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":") are hashable by default, and can be used as set value types or dictionary key types. Enumeration case values without associated values (as described in "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","type":"reference"},{"type":"text","text":") are also hashable by default."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"You can use your own custom types as set value types or dictionary key types by making them conform to the ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"text":" protocol from the Swift standard library. For information about implementing the required ","type":"text"},{"code":"hash(into:)","type":"codeVoice"},{"text":" method, see ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable","type":"reference","isActive":true},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/hashable]","type":"text"},{"text":". For information about conforming to protocols, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","type":"reference","isActive":true},{"text":".","type":"text"}]}],"type":"aside","style":"note"},{"anchor":"Set-Type-Syntax","level":3,"text":"Set Type Syntax","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The type of a Swift set is written as "},{"type":"codeVoice","code":"Set<Element>"},{"type":"text","text":", where "},{"type":"codeVoice","code":"Element"},{"type":"text","text":" is the type that the set is allowed to store. Unlike arrays, sets don’t have an equivalent shorthand form."}]},{"anchor":"Creating-and-Initializing-an-Empty-Set","level":3,"text":"Creating and Initializing an Empty Set","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create an empty set of a certain type using initializer syntax:"}]},{"code":["var letters = Set<Character>()","print(\"letters is of type Set<Character> with \\(letters.count) items.\")","\/\/ Prints \"letters is of type Set<Character> with 0 items.\""],"syntax":"swift","type":"codeListing"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"The type of the "},{"type":"codeVoice","code":"letters"},{"type":"text","text":" variable is inferred to be "},{"type":"codeVoice","code":"Set<Character>"},{"type":"text","text":", from the type of the initializer."}],"type":"paragraph"}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, if the context already provides type information, such as a function argument or an already typed variable or constant, you can create an empty set with an empty array literal:"}]},{"code":["letters.insert(\"a\")","\/\/ letters now contains 1 value of type Character","letters = []","\/\/ letters is now an empty set, but is still of type Set<Character>"],"syntax":"swift","type":"codeListing"},{"anchor":"Creating-a-Set-with-an-Array-Literal","level":3,"text":"Creating a Set with an Array Literal","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also initialize a set with an array literal, as a shorthand way to write one or more values as a set collection."}]},{"type":"paragraph","inlineContent":[{"text":"The example below creates a set called ","type":"text"},{"code":"favoriteGenres","type":"codeVoice"},{"text":" to store ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values:","type":"text"}]},{"code":["var favoriteGenres: Set<String> = [\"Rock\", \"Classical\", \"Hip hop\"]","\/\/ favoriteGenres has been initialized with three initial items"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" variable is declared as “a set of "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values”, written as "},{"type":"codeVoice","code":"Set<String>"},{"type":"text","text":". Because this particular set has specified a value type of "},{"type":"codeVoice","code":"String"},{"type":"text","text":", it’s "},{"type":"emphasis","inlineContent":[{"type":"text","text":"only"}]},{"type":"text","text":" allowed to store "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values. Here, the "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" set is initialized with three "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values ("},{"type":"codeVoice","code":"\"Rock\""},{"type":"text","text":", "},{"type":"codeVoice","code":"\"Classical\""},{"type":"text","text":", and "},{"type":"codeVoice","code":"\"Hip hop\""},{"type":"text","text":"), written within an array literal."}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" set is declared as a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" introducer) and not a constant (with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" introducer) because items are added and removed in the examples below."}]}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A set type can’t be inferred from an array literal alone, so the type "},{"type":"codeVoice","code":"Set"},{"type":"text","text":" must be explicitly declared. However, because of Swift’s type inference, you don’t have to write the type of the set’s elements if you’re initializing it with an array literal that contains values of just one type. The initialization of "},{"type":"codeVoice","code":"favoriteGenres"},{"type":"text","text":" could have been written in a shorter form instead:"}]},{"code":["var favoriteGenres: Set = [\"Rock\", \"Classical\", \"Hip hop\"]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Because all values in the array literal are of the same type, Swift can infer that ","type":"text"},{"code":"Set<String>","type":"codeVoice"},{"text":" is the correct type to use for the ","type":"text"},{"code":"favoriteGenres","type":"codeVoice"},{"text":" variable.","type":"text"}]},{"anchor":"Accessing-and-Modifying-a-Set","level":3,"text":"Accessing and Modifying a Set","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify a set through its methods and properties."}]},{"type":"paragraph","inlineContent":[{"text":"To find out the number of items in a set, check its read-only ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" property:","type":"text"}]},{"code":["print(\"I have \\(favoriteGenres.count) favorite music genres.\")","\/\/ Prints \"I have 3 favorite music genres.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Use the Boolean ","type":"text"},{"type":"codeVoice","code":"isEmpty"},{"text":" property as a shortcut for checking whether the ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" property is equal to ","type":"text"},{"type":"codeVoice","code":"0"},{"text":":","type":"text"}]},{"code":["if favoriteGenres.isEmpty {","    print(\"As far as music goes, I'm not picky.\")","} else {","    print(\"I have particular music preferences.\")","}","\/\/ Prints \"I have particular music preferences.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can add a new item into a set by calling the set’s ","type":"text"},{"code":"insert(_:)","type":"codeVoice"},{"text":" method:","type":"text"}]},{"code":["favoriteGenres.insert(\"Jazz\")","\/\/ favoriteGenres now contains 4 items"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can remove an item from a set by calling the set’s ","type":"text"},{"code":"remove(_:)","type":"codeVoice"},{"text":" method, which removes the item if it’s a member of the set, and returns the removed value, or returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if the set didn’t contain it. Alternatively, all items in a set can be removed with its ","type":"text"},{"code":"removeAll()","type":"codeVoice"},{"text":" method.","type":"text"}]},{"code":["if let removedGenre = favoriteGenres.remove(\"Rock\") {","    print(\"\\(removedGenre)? I'm over it.\")","} else {","    print(\"I never much cared for that.\")","}","\/\/ Prints \"Rock? I'm over it.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To check whether a set contains a particular item, use the "},{"type":"codeVoice","code":"contains(_:)"},{"type":"text","text":" method."}]},{"code":["if favoriteGenres.contains(\"Funk\") {","    print(\"I get up on the good foot.\")","} else {","    print(\"It's too funky in here.\")","}","\/\/ Prints \"It's too funky in here.\""],"syntax":"swift","type":"codeListing"},{"anchor":"Iterating-Over-a-Set","level":3,"text":"Iterating Over a Set","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can iterate over the values in a set with a "},{"code":"for","type":"codeVoice"},{"type":"text","text":"-"},{"code":"in","type":"codeVoice"},{"type":"text","text":" loop."}]},{"code":["for genre in favoriteGenres {","    print(\"\\(genre)\")","}","\/\/ Classical","\/\/ Jazz","\/\/ Hip hop"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"For more about the ","type":"text"},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#For-In-Loops"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Set"},{"text":" type doesn’t have a defined ordering. To iterate over the values of a set in a specific order, use the ","type":"text"},{"type":"codeVoice","code":"sorted()"},{"text":" method, which returns the set’s elements as an array sorted using the ","type":"text"},{"type":"codeVoice","code":"<"},{"text":" operator.","type":"text"}]},{"code":["for genre in favoriteGenres.sorted() {","    print(\"\\(genre)\")","}","\/\/ Classical","\/\/ Hip hop","\/\/ Jazz"],"syntax":"swift","type":"codeListing"},{"anchor":"Performing-Set-Operations","level":2,"text":"Performing Set Operations","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can efficiently perform fundamental set operations, such as combining two sets together, determining which values two sets have in common, or determining whether two sets contain all, some, or none of the same values.","type":"text"}]},{"anchor":"Fundamental-Set-Operations","level":3,"text":"Fundamental Set Operations","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The illustration below depicts two sets—"},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":"—with the results of various set operations represented by the shaded regions."}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"setVennDiagram"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"intersection(_:)"},{"text":" method to create a new set with only the values common to both sets.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"code":"symmetricDifference(_:)","type":"codeVoice"},{"type":"text","text":" method to create a new set with values in either set, but not both."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"union(_:)","type":"codeVoice"},{"text":" method to create a new set with all of the values in both sets.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"code":"subtracting(_:)","type":"codeVoice"},{"text":" method to create a new set with values not in the specified set.","type":"text"}],"type":"paragraph"}]}]},{"code":["let oddDigits: Set = [1, 3, 5, 7, 9]","let evenDigits: Set = [0, 2, 4, 6, 8]","let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]","","oddDigits.union(evenDigits).sorted()","\/\/ [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]","oddDigits.intersection(evenDigits).sorted()","\/\/ []","oddDigits.subtracting(singleDigitPrimeNumbers).sorted()","\/\/ [1, 9]","oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()","\/\/ [1, 2, 9]"],"syntax":"swift","type":"codeListing"},{"anchor":"Set-Membership-and-Equality","level":3,"text":"Set Membership and Equality","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The illustration below depicts three sets—","type":"text"},{"code":"a","type":"codeVoice"},{"text":", ","type":"text"},{"code":"b","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"c","type":"codeVoice"},{"text":"—with overlapping regions representing elements shared among sets. Set ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" is a ","type":"text"},{"inlineContent":[{"text":"superset","type":"text"}],"type":"emphasis"},{"text":" of set ","type":"text"},{"code":"b","type":"codeVoice"},{"text":", because ","type":"text"},{"code":"a","type":"codeVoice"},{"text":" contains all elements in ","type":"text"},{"code":"b","type":"codeVoice"},{"text":". Conversely, set ","type":"text"},{"code":"b","type":"codeVoice"},{"text":" is a ","type":"text"},{"inlineContent":[{"text":"subset","type":"text"}],"type":"emphasis"},{"text":" of set ","type":"text"},{"code":"a","type":"codeVoice"},{"text":", because all elements in ","type":"text"},{"code":"b","type":"codeVoice"},{"text":" are also contained by ","type":"text"},{"code":"a","type":"codeVoice"},{"text":". Set ","type":"text"},{"code":"b","type":"codeVoice"},{"text":" and set ","type":"text"},{"code":"c","type":"codeVoice"},{"text":" are ","type":"text"},{"inlineContent":[{"type":"text","text":"disjoint"}],"type":"emphasis"},{"text":" with one another, because they share no elements in common.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"setEulerDiagram","type":"image"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the “is equal” operator (","type":"text"},{"type":"codeVoice","code":"=="},{"text":") to determine whether two sets contain all of the same values.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"code":"isSubset(of:)","type":"codeVoice"},{"text":" method to determine whether all of the values of a set are contained in the specified set.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"isSuperset(of:)","type":"codeVoice"},{"text":" method to determine whether a set contains all of the values in a specified set.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Use the ","type":"text"},{"type":"codeVoice","code":"isStrictSubset(of:)"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"isStrictSuperset(of:)"},{"text":" methods to determine whether a set is a subset or superset, but not equal to, a specified set.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"type":"codeVoice","code":"isDisjoint(with:)"},{"type":"text","text":" method to determine whether two sets have no values in common."}],"type":"paragraph"}]}]},{"code":["let houseAnimals: Set = [\"🐶\", \"🐱\"]","let farmAnimals: Set = [\"🐮\", \"🐔\", \"🐑\", \"🐶\", \"🐱\"]","let cityAnimals: Set = [\"🐦\", \"🐭\"]","","houseAnimals.isSubset(of: farmAnimals)","\/\/ true","farmAnimals.isSuperset(of: houseAnimals)","\/\/ true","farmAnimals.isDisjoint(with: cityAnimals)","\/\/ true"],"syntax":"swift","type":"codeListing"},{"anchor":"Dictionaries","level":2,"text":"Dictionaries","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"dictionary","type":"text"}]},{"text":" stores associations between keys of the same type and values of the same type in a collection with no defined ordering. Each value is associated with a unique ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"key"}]},{"text":", which acts as an identifier for that value within the dictionary. Unlike items in an array, items in a dictionary don’t have a specified order. You use a dictionary when you need to look up values based on their identifier, in much the same way that a real-world dictionary is used to look up the definition for a particular word.","type":"text"}]},{"name":"Note","content":[{"inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" type is bridged to Foundation’s ","type":"text"},{"type":"codeVoice","code":"NSDictionary"},{"text":" class.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For more information about using "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" with Foundation and Cocoa, see "},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239","type":"reference"},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239]"},{"type":"text","text":"."}],"type":"paragraph"}],"type":"aside","style":"note"},{"anchor":"Dictionary-Type-Shorthand-Syntax","level":3,"text":"Dictionary Type Shorthand Syntax","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"The type of a Swift dictionary is written in full as ","type":"text"},{"code":"Dictionary<Key, Value>","type":"codeVoice"},{"text":", where ","type":"text"},{"code":"Key","type":"codeVoice"},{"text":" is the type of value that can be used as a dictionary key, and ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":" is the type of value that the dictionary stores for those keys.","type":"text"}]},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"A dictionary "},{"type":"codeVoice","code":"Key"},{"type":"text","text":" type must conform to the "},{"type":"codeVoice","code":"Hashable"},{"type":"text","text":" protocol, like a set’s value type."}],"type":"paragraph"}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also write the type of a dictionary in shorthand form as "},{"type":"codeVoice","code":"[Key: Value]"},{"type":"text","text":". Although the two forms are functionally identical, the shorthand form is preferred and is used throughout this guide when referring to the type of a dictionary."}]},{"anchor":"Creating-an-Empty-Dictionary","level":3,"text":"Creating an Empty Dictionary","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"As with arrays, you can create an empty ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" of a certain type by using initializer syntax:","type":"text"}]},{"code":["var namesOfIntegers: [Int: String] = [:]","\/\/ namesOfIntegers is an empty [Int: String] dictionary"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example creates an empty dictionary of type "},{"code":"[Int: String]","type":"codeVoice"},{"type":"text","text":" to store human-readable names of integer values. Its keys are of type "},{"code":"Int","type":"codeVoice"},{"type":"text","text":", and its values are of type "},{"code":"String","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"If the context already provides type information, you can create an empty dictionary with an empty dictionary literal, which is written as ","type":"text"},{"code":"[:]","type":"codeVoice"},{"text":" (a colon inside a pair of square brackets):","type":"text"}]},{"code":["namesOfIntegers[16] = \"sixteen\"","\/\/ namesOfIntegers now contains 1 key-value pair","namesOfIntegers = [:]","\/\/ namesOfIntegers is once again an empty dictionary of type [Int: String]"],"syntax":"swift","type":"codeListing"},{"anchor":"Creating-a-Dictionary-with-a-Dictionary-Literal","level":3,"text":"Creating a Dictionary with a Dictionary Literal","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also initialize a dictionary with a "},{"type":"emphasis","inlineContent":[{"text":"dictionary literal","type":"text"}]},{"type":"text","text":", which has a similar syntax to the array literal seen earlier. A dictionary literal is a shorthand way to write one or more key-value pairs as a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" collection."}]},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"key-value pair","type":"text"}],"type":"emphasis"},{"text":" is a combination of a key and a value. In a dictionary literal, the key and value in each key-value pair are separated by a colon. The key-value pairs are written as a list, separated by commas, surrounded by a pair of square brackets:","type":"text"}]},{"code":["[key 1: value 1, key 2: value 2, key 3: value 3]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The example below creates a dictionary to store the names of international airports. In this dictionary, the keys are three-letter International Air Transport Association codes, and the values are airport names:","type":"text"}]},{"code":["var airports: [String: String] = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"airports"},{"text":" dictionary is declared as having a type of ","type":"text"},{"type":"codeVoice","code":"[String: String]"},{"text":", which means “a ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" whose keys are of type ","type":"text"},{"type":"codeVoice","code":"String"},{"text":", and whose values are also of type ","type":"text"},{"type":"codeVoice","code":"String"},{"text":"”.","type":"text"}]},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary is declared as a variable (with the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" introducer), and not a constant (with the "},{"type":"codeVoice","code":"let"},{"type":"text","text":" introducer), because more airports are added to the dictionary in the examples below."}],"type":"paragraph"}],"type":"aside","style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary is initialized with a dictionary literal containing two key-value pairs. The first pair has a key of "},{"type":"codeVoice","code":"\"YYZ\""},{"type":"text","text":" and a value of "},{"type":"codeVoice","code":"\"Toronto Pearson\""},{"type":"text","text":". The second pair has a key of "},{"type":"codeVoice","code":"\"DUB\""},{"type":"text","text":" and a value of "},{"type":"codeVoice","code":"\"Dublin\""},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This dictionary literal contains two "},{"type":"codeVoice","code":"String: String"},{"type":"text","text":" pairs. This key-value type matches the type of the "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" variable declaration (a dictionary with only "},{"type":"codeVoice","code":"String"},{"type":"text","text":" keys, and only "},{"type":"codeVoice","code":"String"},{"type":"text","text":" values), and so the assignment of the dictionary literal is permitted as a way to initialize the "},{"type":"codeVoice","code":"airports"},{"type":"text","text":" dictionary with two initial items."}]},{"type":"paragraph","inlineContent":[{"text":"As with arrays, you don’t have to write the type of the dictionary if you’re initializing it with a dictionary literal whose keys and values have consistent types. The initialization of ","type":"text"},{"code":"airports","type":"codeVoice"},{"text":" could have been written in a shorter form instead:","type":"text"}]},{"code":["var airports = [\"YYZ\": \"Toronto Pearson\", \"DUB\": \"Dublin\"]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Because all keys in the literal are of the same type as each other, and likewise all values are of the same type as each other, Swift can infer that ","type":"text"},{"code":"[String: String]","type":"codeVoice"},{"text":" is the correct type to use for the ","type":"text"},{"code":"airports","type":"codeVoice"},{"text":" dictionary.","type":"text"}]},{"anchor":"Accessing-and-Modifying-a-Dictionary","level":3,"text":"Accessing and Modifying a Dictionary","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You access and modify a dictionary through its methods and properties, or by using subscript syntax."}]},{"type":"paragraph","inlineContent":[{"text":"As with an array, you find out the number of items in a ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" by checking its read-only ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" property:","type":"text"}]},{"code":["print(\"The airports dictionary contains \\(airports.count) items.\")","\/\/ Prints \"The airports dictionary contains 2 items.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Use the Boolean ","type":"text"},{"code":"isEmpty","type":"codeVoice"},{"text":" property as a shortcut for checking whether the ","type":"text"},{"code":"count","type":"codeVoice"},{"text":" property is equal to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["if airports.isEmpty {","    print(\"The airports dictionary is empty.\")","} else {","    print(\"The airports dictionary isn't empty.\")","}","\/\/ Prints \"The airports dictionary isn't empty.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can add a new item to a dictionary with subscript syntax. Use a new key of the appropriate type as the subscript index, and assign a new value of the appropriate type:","type":"text"}]},{"code":["airports[\"LHR\"] = \"London\"","\/\/ the airports dictionary now contains 3 items"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can also use subscript syntax to change the value associated with a particular key:","type":"text"}]},{"code":["airports[\"LHR\"] = \"London Heathrow\"","\/\/ the value for \"LHR\" has been changed to \"London Heathrow\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"As an alternative to subscripting, use a dictionary’s ","type":"text"},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"text":" method to set or update the value for a particular key. Like the subscript examples above, the ","type":"text"},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"text":" method sets a value for a key if none exists, or updates the value if that key already exists. Unlike a subscript, however, the ","type":"text"},{"type":"codeVoice","code":"updateValue(_:forKey:)"},{"text":" method returns the ","type":"text"},{"inlineContent":[{"type":"text","text":"old"}],"type":"emphasis"},{"text":" value after performing an update. This enables you to check whether or not an update took place.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"updateValue(_:forKey:)","type":"codeVoice"},{"text":" method returns an optional value of the dictionary’s value type. For a dictionary that stores ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" values, for example, the method returns a value of type ","type":"text"},{"code":"String?","type":"codeVoice"},{"text":", or “optional ","type":"text"},{"code":"String","type":"codeVoice"},{"text":"”. This optional value contains the old value for that key if one existed before the update, or ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" if no value existed:","type":"text"}]},{"code":["if let oldValue = airports.updateValue(\"Dublin Airport\", forKey: \"DUB\") {","    print(\"The old value for DUB was \\(oldValue).\")","}","\/\/ Prints \"The old value for DUB was Dublin.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"You can also use subscript syntax to retrieve a value from the dictionary for a particular key. Because it’s possible to request a key for which no value exists, a dictionary’s subscript returns an optional value of the dictionary’s value type. If the dictionary contains a value for the requested key, the subscript returns an optional value containing the existing value for that key. Otherwise, the subscript returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["if let airportName = airports[\"DUB\"] {","    print(\"The name of the airport is \\(airportName).\")","} else {","    print(\"That airport isn't in the airports dictionary.\")","}","\/\/ Prints \"The name of the airport is Dublin Airport.\""],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can use subscript syntax to remove a key-value pair from a dictionary by assigning a value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" for that key:"}]},{"code":["airports[\"APL\"] = \"Apple International\"","\/\/ \"Apple International\" isn't the real airport for APL, so delete it","airports[\"APL\"] = nil","\/\/ APL has now been removed from the dictionary"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively, remove a key-value pair from a dictionary with the "},{"type":"codeVoice","code":"removeValue(forKey:)"},{"type":"text","text":" method. This method removes the key-value pair if it exists and returns the removed value, or returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if no value existed:"}]},{"code":["if let removedValue = airports.removeValue(forKey: \"DUB\") {","    print(\"The removed airport's name is \\(removedValue).\")","} else {","    print(\"The airports dictionary doesn't contain a value for DUB.\")","}","\/\/ Prints \"The removed airport's name is Dublin Airport.\""],"syntax":"swift","type":"codeListing"},{"anchor":"Iterating-Over-a-Dictionary","level":3,"text":"Iterating Over a Dictionary","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can iterate over the key-value pairs in a dictionary with a "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop. Each item in the dictionary is returned as a "},{"type":"codeVoice","code":"(key, value)"},{"type":"text","text":" tuple, and you can decompose the tuple’s members into temporary constants or variables as part of the iteration:"}]},{"code":["for (airportCode, airportName) in airports {","    print(\"\\(airportCode): \\(airportName)\")","}","\/\/ LHR: London Heathrow","\/\/ YYZ: Toronto Pearson"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For more about the "},{"type":"codeVoice","code":"for"},{"type":"text","text":"-"},{"type":"codeVoice","code":"in"},{"type":"text","text":" loop, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#For-In-Loops"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"You can also retrieve an iterable collection of a dictionary’s keys or values by accessing its ","type":"text"},{"code":"keys","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"values","type":"codeVoice"},{"text":" properties:","type":"text"}]},{"code":["for airportCode in airports.keys {","    print(\"Airport code: \\(airportCode)\")","}","\/\/ Airport code: LHR","\/\/ Airport code: YYZ","","for airportName in airports.values {","    print(\"Airport name: \\(airportName)\")","}","\/\/ Airport name: London Heathrow","\/\/ Airport name: Toronto Pearson"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you need to use a dictionary’s keys or values with an API that takes an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance, initialize a new array with the "},{"type":"codeVoice","code":"keys"},{"type":"text","text":" or "},{"type":"codeVoice","code":"values"},{"type":"text","text":" property:"}]},{"code":["let airportCodes = [String](airports.keys)","\/\/ airportCodes is [\"LHR\", \"YYZ\"]","","let airportNames = [String](airports.values)","\/\/ airportNames is [\"London Heathrow\", \"Toronto Pearson\"]"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Swift’s ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":" type doesn’t have a defined ordering. To iterate over the keys or values of a dictionary in a specific order, use the ","type":"text"},{"type":"codeVoice","code":"sorted()"},{"text":" method on its ","type":"text"},{"type":"codeVoice","code":"keys"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"values"},{"text":" property.","type":"text"}]}]}],"sections":[],"kind":"article","identifier":{"url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Swift provides three primary "},{"type":"emphasis","inlineContent":[{"text":"collection types","type":"text"}]},{"type":"text","text":", known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations."}],"schemaVersion":{"minor":3,"major":0,"patch":0},"seeAlsoSections":[{"generated":true,"title":"Language Guide","identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"]}],"metadata":{"roleHeading":"Article","title":"Collection Types","modules":[{"name":"Swift"}],"role":"article"},"references":{"doc://com.apple.Swift/documentation/Swift/Concurrency":{"type":"topic","role":"article","kind":"article","abstract":[{"text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. ","type":"text"},{"inlineContent":[{"type":"text","text":"Asynchronous code"}],"type":"emphasis"},{"text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. ","type":"text"},{"inlineContent":[{"type":"text","text":"Parallel code"}],"type":"emphasis"},{"text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way.","type":"text"}],"title":"Concurrency","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","url":"\/documentation\/swift\/concurrency"},"setVennDiagram":{"identifier":"setVennDiagram","alt":null,"type":"image","variants":[{"url":"\/images\/setVennDiagram@2x.png","traits":["2x","light"]}]},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"url":"\/documentation\/swift\/opaquetypes","title":"Opaque Types","abstract":[{"text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"type":"topic","role":"article","kind":"article","abstract":[{"type":"emphasis","inlineContent":[{"text":"Error handling","type":"text"}]},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"title":"Error Handling","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","url":"\/documentation\/swift\/errorhandling"},"doc://com.apple.Swift/documentation/Swift/NestedTypes":{"role":"article","type":"topic","title":"Nested Types","abstract":[{"text":"Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define ","type":"text"},{"inlineContent":[{"text":"nested types","type":"text"}],"type":"emphasis"},{"text":", whereby you nest supporting enumerations, classes, and structures within the definition of the type they support.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/nestedtypes","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes"},"doc://com.apple.Swift/documentation/Swift/Protocols":{"url":"\/documentation\/swift\/protocols","title":"Protocols","abstract":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"protocol","type":"text"}],"type":"emphasis"},{"text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be ","type":"text"},{"inlineContent":[{"type":"text","text":"adopted"}],"type":"emphasis"},{"text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"conform","type":"text"}]},{"text":" to that protocol.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","abstract":[{"inlineContent":[{"text":"Structures","type":"text"}],"type":"emphasis"},{"text":" and ","type":"text"},{"inlineContent":[{"text":"classes","type":"text"}],"type":"emphasis"},{"text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions.","type":"text"}],"title":"Structures and Classes","url":"\/documentation\/swift\/classesandstructures","role":"article"},"doc://com.apple.Swift/documentation/Swift/Extensions":{"kind":"article","role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"retroactive modeling"}]},{"type":"text","text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)"}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","title":"Extensions","type":"topic","url":"\/documentation\/swift\/extensions"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","role":"article","url":"\/documentation\/swift\/advancedoperators","abstract":[{"text":"In addition to the operators described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","isActive":true},{"text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C.","type":"text"}],"title":"Advanced Operators","kind":"article"},"doc://com.apple.Swift/documentation/Swift/ControlFlow#For-In-Loops":{"url":"\/documentation\/swift\/controlflow#For-In-Loops","abstract":[],"title":"For-In Loops","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow#For-In-Loops","type":"topic","kind":"section"},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"title":"Access Control","abstract":[{"inlineContent":[{"text":"Access control","type":"text"}],"type":"emphasis"},{"text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used.","type":"text"}],"kind":"article","role":"article","type":"topic","url":"\/documentation\/swift\/accesscontrol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl"},"doc://com.apple.Swift/documentation/Swift/Inheritance":{"kind":"article","role":"article","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"text":"inherit","type":"text"}]},{"type":"text","text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":", and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"text":"superclass","type":"text"}]},{"type":"text","text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","title":"Inheritance","type":"topic","url":"\/documentation\/swift\/inheritance"},"https://developer.apple.com/documentation/swift/dictionary#2846239":{"type":"link","title":"Bridging Between Dictionary and NSDictionary","titleInlineContent":[{"text":"Bridging Between Dictionary and NSDictionary","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/dictionary#2846239"},"doc://com.apple.Swift/documentation/Swift/Properties":{"url":"\/documentation\/swift\/properties","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"text":"Properties","type":"text"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","kind":"article","role":"article"},"https://developer.apple.com/documentation/swift/hashable":{"type":"link","title":"Hashable","titleInlineContent":[{"text":"Hashable","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/hashable","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/hashable"},"doc://com.apple.Swift/documentation/Swift/Generics":{"role":"article","type":"topic","title":"Generics","kind":"article","abstract":[{"inlineContent":[{"type":"text","text":"Generic code"}],"type":"emphasis"},{"text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner.","type":"text"}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","url":"\/documentation\/swift\/generics"},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"role":"article","type":"topic","title":"Control Flow","abstract":[{"text":"Swift provides a variety of control flow statements. These include ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" loops to perform a task multiple times; ","type":"text"},{"code":"if","type":"codeVoice"},{"text":", ","type":"text"},{"code":"guard","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" to transfer the flow of execution to another point in your code."}],"kind":"article","url":"\/documentation\/swift\/controlflow","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"url":"\/documentation\/swift\/thebasics","title":"The Basics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","kind":"article","role":"article"},"CollectionTypes_intro":{"alt":null,"variants":[{"url":"\/images\/CollectionTypes_intro@2x.png","traits":["2x","light"]}],"type":"image","identifier":"CollectionTypes_intro"},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"kind":"article","role":"article","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","title":"Memory Safety","type":"topic","url":"\/documentation\/swift\/memorysafety"},"doc://com.apple.Swift/documentation/Swift":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","abstract":[],"title":"Swift","url":"\/documentation\/swift","role":"collection"},"doc://com.apple.Swift/documentation/Swift/Methods":{"url":"\/documentation\/swift\/methods","title":"Methods","abstract":[{"inlineContent":[{"type":"text","text":"Methods"}],"type":"emphasis"},{"text":" are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/Enumerations":{"title":"Enumerations","kind":"article","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code."}],"url":"\/documentation\/swift\/enumerations","type":"topic"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"title":"Optional Chaining","kind":"article","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/optionalchaining","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"deinitializer","type":"text"}]},{"type":"text","text":" is called immediately before a class instance is deallocated. You write deinitializers with the "},{"code":"deinit","type":"codeVoice"},{"text":" keyword, similar to how initializers are written with the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" keyword. Deinitializers are only available on class types.","type":"text"}],"kind":"article","role":"article","type":"topic","url":"\/documentation\/swift\/deinitialization","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization"},"doc://com.apple.Swift/documentation/Swift/Subscripts":{"abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"text":"subscripts","type":"text"}]},{"type":"text","text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","title":"Subscripts","url":"\/documentation\/swift\/subscripts","role":"article","kind":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"url":"\/documentation\/swift\/initialization","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","type":"topic","title":"Initialization","kind":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use.","type":"text"}]},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"title":"Strings and Characters","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"string","type":"text"}]},{"type":"text","text":" is a series of characters, such as "},{"code":"\"hello, world\"","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"\"albatross\"","type":"codeVoice"},{"text":". Swift strings are represented by the ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type. The contents of a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" can be accessed in various ways, including as a collection of ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" values.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","role":"article","url":"\/documentation\/swift\/stringsandcharacters"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting":{"url":"\/documentation\/swift\/automaticreferencecounting","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"text":"Automatic Reference Counting","type":"text"}]},{"type":"text","text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/TypeCasting":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","role":"article","abstract":[{"inlineContent":[{"text":"Type casting","type":"text"}],"type":"emphasis"},{"text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy.","type":"text"}],"title":"Type Casting","url":"\/documentation\/swift\/typecasting","type":"topic"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"abstract":[{"type":"text","text":"An "},{"inlineContent":[{"text":"operator","type":"text"}],"type":"emphasis"},{"text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (","type":"text"},{"type":"codeVoice","code":"+"},{"text":") adds two numbers, as in ","type":"text"},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":", and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values, as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"type":"topic","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","url":"\/documentation\/swift\/basicoperators","kind":"article","title":"Basic Operators"},"doc://com.apple.Swift/documentation/Swift/Functions":{"role":"article","type":"topic","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed."}],"kind":"article","url":"\/documentation\/swift\/functions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions"},"setEulerDiagram":{"identifier":"setEulerDiagram","alt":null,"type":"image","variants":[{"url":"\/images\/setEulerDiagram@2x.png","traits":["2x","light"]}]},"https://developer.apple.com/documentation/swift/array#2846730":{"type":"link","title":"Bridging Between Array and NSArray","titleInlineContent":[{"text":"Bridging Between Array and NSArray","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/array#2846730"},"doc://com.apple.Swift/documentation/Swift/Closures":{"role":"article","type":"topic","title":"Closures","abstract":[{"inlineContent":[{"type":"text","text":"Closures"}],"type":"emphasis"},{"text":" are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/closures","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures"},"https://developer.apple.com/documentation/swift/set#2845530":{"type":"link","title":"Bridging Between Set and NSSet","titleInlineContent":[{"text":"Bridging Between Set and NSSet","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/set#2845530"}}}