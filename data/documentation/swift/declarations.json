{"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"metadata":{"modules":[{"name":"Swift"}],"title":"Declarations","roleHeading":"Article","role":"article"},"schemaVersion":{"patch":0,"minor":3,"major":0},"kind":"article","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"declaration","type":"text"}]},{"type":"text","text":" introduces a new name or construct into your program. For example, you use declarations to introduce functions and methods, to introduce variables and constants, and to define enumeration, structure, class, and protocol types. You can also use a declaration to extend the behavior of an existing named type and to import symbols into your program that are declared elsewhere."}],"identifier":{"url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"title":"Language Reference","identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/AboutTheLanguageReference","doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar"]}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"In Swift, most declarations are also definitions in the sense that they’re implemented or initialized at the same time they’re declared. That said, because protocols don’t implement their members, most protocol members are declarations only. For convenience and because the distinction isn’t that important in Swift, the term "},{"type":"emphasis","inlineContent":[{"text":"declaration","type":"text"}]},{"type":"text","text":" covers both declarations and definitions."}],"type":"paragraph"},{"style":"note","name":"Grammar of a declaration","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"type":"aside"},{"text":"Top-Level Code","type":"heading","anchor":"Top-Level-Code","level":2},{"inlineContent":[{"text":"The top-level code in a Swift source file consists of zero or more statements, declarations, and expressions. By default, variables, constants, and other named declarations that are declared at the top-level of a source file are accessible to code in every source file that’s part of the same module. You can override this default behavior by marking the declaration with an access-level modifier, as described in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Access-Control-Levels","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are two kinds of top-level code: top-level declarations and executable top-level code. Top-level declarations consist of only declarations, and are allowed in all Swift source files. Executable top-level code contains statements and expressions, not just declarations, and is allowed only as the top-level entry point for the program."}],"type":"paragraph"},{"inlineContent":[{"text":"The Swift code you compile to make an executable can contain at most one of the following approaches to mark the top-level entry point, regardless of how the code is organized into files and modules: the ","type":"text"},{"type":"codeVoice","code":"main"},{"text":" attribute, the ","type":"text"},{"type":"codeVoice","code":"NSApplicationMain"},{"text":" attribute, the ","type":"text"},{"type":"codeVoice","code":"UIApplicationMain"},{"text":" attribute, a ","type":"text"},{"type":"codeVoice","code":"main.swift"},{"text":" file, or a file that contains top-level executable code.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Grammar of a top-level declaration","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}],"type":"aside"},{"text":"Code Blocks","type":"heading","anchor":"Code-Blocks","level":2},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"code block"}],"type":"emphasis"},{"text":" is used by a variety of declarations and control structures to group statements together. It has the following form:","type":"text"}],"type":"paragraph"},{"code":["{","    statements","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"statements"}]},{"text":" inside a code block include declarations, expressions, and other kinds of statements and are executed in order of their appearance in source code.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Grammar of a code block","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}],"type":"aside"},{"text":"Import Declaration","type":"heading","anchor":"Import-Declaration","level":2},{"inlineContent":[{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"import declaration","type":"text"}]},{"text":" lets you access symbols that are declared outside the current file. The basic form imports the entire module; it consists of the ","type":"text"},{"type":"codeVoice","code":"import"},{"text":" keyword followed by a module name:","type":"text"}],"type":"paragraph"},{"code":["import module"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Providing more detail limits which symbols are imported—you can specify a specific submodule or a specific declaration within a module or submodule. When this detailed form is used, only the imported symbol (and not the module that declares it) is made available in the current scope."}],"type":"paragraph"},{"code":["import import kind module.symbol name","import module.submodule"],"type":"codeListing","syntax":"swift"},{"style":"note","name":"Grammar of an import declaration","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"type":"aside"},{"text":"Constant Declaration","type":"heading","anchor":"Constant-Declaration","level":2},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"constant declaration"}],"type":"emphasis"},{"text":" introduces a constant named value into your program. Constant declarations are declared using the ","type":"text"},{"code":"let","type":"codeVoice"},{"text":" keyword and have the following form:","type":"text"}],"type":"paragraph"},{"code":["let constant name: type = expression"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"A constant declaration defines an immutable binding between the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"constant name","type":"text"}]},{"text":" and the value of the initializer ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"expression","type":"text"}]},{"text":"; after the value of a constant is set, it can’t be changed. That said, if a constant is initialized with a class object, the object itself can change, but the binding between the constant name and the object it refers to can’t.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When a constant is declared at global scope, it must be initialized with a value. When a constant declaration occurs in the context of a function or method, it can be initialized later, as long as it’s guaranteed to have a value set before the first time its value is read. If the compiler can prove that the constant’s value is never read, the constant isn’t required to have a value set at all. When a constant declaration occurs in the context of a class or structure declaration, it’s considered a "},{"type":"emphasis","inlineContent":[{"text":"constant property","type":"text"}]},{"type":"text","text":". Constant declarations aren’t computed properties and therefore don’t have getters or setters."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If the "},{"type":"emphasis","inlineContent":[{"text":"constant name","type":"text"}]},{"type":"text","text":" of a constant declaration is a tuple pattern, the name of each item in the tuple is bound to the corresponding value in the initializer "},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]},{"type":"text","text":"."}],"type":"paragraph"},{"code":["let (firstNumber, secondNumber) = (10, 42)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"In this example, ","type":"text"},{"type":"codeVoice","code":"firstNumber"},{"text":" is a named constant for the value ","type":"text"},{"type":"codeVoice","code":"10"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"secondNumber"},{"text":" is a named constant for the value ","type":"text"},{"type":"codeVoice","code":"42"},{"text":". Both constants can now be used independently:","type":"text"}],"type":"paragraph"},{"code":["print(\"The first number is \\(firstNumber).\")","\/\/ Prints \"The first number is 10.\"","print(\"The second number is \\(secondNumber).\")","\/\/ Prints \"The second number is 42.\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The type annotation (","type":"text"},{"code":":","type":"codeVoice"},{"text":" ","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"text":") is optional in a constant declaration when the type of the ","type":"text"},{"inlineContent":[{"type":"text","text":"constant name"}],"type":"emphasis"},{"text":" can be inferred, as described in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Type-Inference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To declare a constant type property, mark the declaration with the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" declaration modifier. A constant type property of a class is always implicitly final; you can’t mark it with the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" or "},{"type":"codeVoice","code":"final"},{"type":"text","text":" declaration modifier to allow or disallow overriding by subclasses. Type properties are discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Type-Properties"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For more information about constants and for guidance about when to use them, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Constants-and-Variables"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Stored-Properties"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","name":"Grammar of a constant declaration","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"type":"aside"},{"text":"Variable Declaration","type":"heading","anchor":"Variable-Declaration","level":2},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"variable declaration","type":"text"}],"type":"emphasis"},{"text":" introduces a variable named value into your program and is declared using the ","type":"text"},{"code":"var","type":"codeVoice"},{"text":" keyword.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Variable declarations have several forms that declare different kinds of named, mutable values, including stored and computed variables and properties, stored variable and property observers, and static variable properties. The appropriate form to use depends on the scope at which the variable is declared and the kind of variable you intend to declare."}],"type":"paragraph"},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also declare properties in the context of a protocol declaration, as described in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Property-Declaration","isActive":true},{"type":"text","text":"."}]}],"type":"aside"},{"inlineContent":[{"text":"You can override a property in a subclass by marking the subclass’s property declaration with the ","type":"text"},{"code":"override","type":"codeVoice"},{"text":" declaration modifier, as described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance#Overriding","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Stored Variables and Stored Variable Properties","type":"heading","anchor":"Stored-Variables-and-Stored-Variable-Properties","level":3},{"inlineContent":[{"type":"text","text":"The following form declares a stored variable or stored variable property:"}],"type":"paragraph"},{"code":["var variable name: type = expression"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You define this form of a variable declaration at global scope, the local scope of a function, or in the context of a class or structure declaration. When a variable declaration of this form is declared at global scope or the local scope of a function, it’s referred to as a "},{"type":"emphasis","inlineContent":[{"text":"stored variable","type":"text"}]},{"type":"text","text":". When it’s declared in the context of a class or structure declaration, it’s referred to as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"stored variable property"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The initializer "},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]},{"type":"text","text":" can’t be present in a protocol declaration, but in all other contexts, the initializer "},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]},{"type":"text","text":" is optional. That said, if no initializer "},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]},{"type":"text","text":" is present, the variable declaration must include an explicit type annotation ("},{"type":"codeVoice","code":":"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"text":"As with constant declarations, if the ","type":"text"},{"inlineContent":[{"text":"variable name","type":"text"}],"type":"emphasis"},{"text":" is a tuple pattern, the name of each item in the tuple is bound to the corresponding value in the initializer ","type":"text"},{"inlineContent":[{"type":"text","text":"expression"}],"type":"emphasis"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As their names suggest, the value of a stored variable or a stored variable property is stored in memory."}],"type":"paragraph"},{"text":"Computed Variables and Computed Properties","type":"heading","anchor":"Computed-Variables-and-Computed-Properties","level":3},{"inlineContent":[{"type":"text","text":"The following form declares a computed variable or computed property:"}],"type":"paragraph"},{"code":["var variable name: type {","    get {","        statements","    }","    set(setter name) {","        statements","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You define this form of a variable declaration at global scope, the local scope of a function, or in the context of a class, structure, enumeration, or extension declaration. When a variable declaration of this form is declared at global scope or the local scope of a function, it’s referred to as a "},{"inlineContent":[{"text":"computed variable","type":"text"}],"type":"emphasis"},{"type":"text","text":". When it’s declared in the context of a class, structure, or extension declaration, it’s referred to as a "},{"inlineContent":[{"type":"text","text":"computed property"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The getter is used to read the value, and the setter is used to write the value. The setter clause is optional, and when only a getter is needed, you can omit both clauses and simply return the requested value directly, as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Read-Only-Computed-Properties"},{"type":"text","text":". But if you provide a setter clause, you must also provide a getter clause."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"setter name"}]},{"text":" and enclosing parentheses is optional. If you provide a setter name, it’s used as the name of the parameter to the setter. If you don’t provide a setter name, the default parameter name to the setter is ","type":"text"},{"type":"codeVoice","code":"newValue"},{"text":", as described in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Shorthand-Setter-Declaration"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Unlike stored named values and stored variable properties, the value of a computed named value or a computed property isn’t stored in memory."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For more information and to see examples of computed properties, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Computed-Properties","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Stored Variable Observers and Property Observers","type":"heading","anchor":"Stored-Variable-Observers-and-Property-Observers","level":3},{"inlineContent":[{"text":"You can also declare a stored variable or property with ","type":"text"},{"code":"willSet","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"didSet","type":"codeVoice"},{"text":" observers. A stored variable or property declared with observers has the following form:","type":"text"}],"type":"paragraph"},{"code":["var variable name: type = expression {","    willSet(setter name) {","        statements","    }","    didSet(setter name) {","        statements","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You define this form of a variable declaration at global scope, the local scope of a function, or in the context of a class or structure declaration. When a variable declaration of this form is declared at global scope or the local scope of a function, the observers are referred to as "},{"inlineContent":[{"text":"stored variable observers","type":"text"}],"type":"emphasis"},{"type":"text","text":". When it’s declared in the context of a class or structure declaration, the observers are referred to as "},{"inlineContent":[{"type":"text","text":"property observers"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can add property observers to any stored property. You can also add property observers to any inherited property (whether stored or computed) by overriding the property within a subclass, as described in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The initializer "},{"inlineContent":[{"type":"text","text":"expression"}],"type":"emphasis"},{"type":"text","text":" is optional in the context of a class or structure declaration, but required elsewhere. The "},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"type":"text","text":" annotation is optional when the type can be inferred from the initializer "},{"inlineContent":[{"text":"expression","type":"text"}],"type":"emphasis"},{"type":"text","text":". This expression is evaluated the first time you read the property’s value. If you overwrite the property’s initial value without reading it, this expression is evaluated before the first time you write to the property."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" and "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observers provide a way to observe (and to respond appropriately) when the value of a variable or property is being set. The observers aren’t called when the variable or property is first initialized. Instead, they’re called only when the value is set outside of an initialization context."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" observer is called just before the value of the variable or property is set. The new value is passed to the "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" observer as a constant, and therefore it can’t be changed in the implementation of the "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" clause. The "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer is called immediately after the new value is set. In contrast to the "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" observer, the old value of the variable or property is passed to the "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer in case you still need access to it. That said, if you assign a value to a variable or property within its own "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer clause, that new value that you assign will replace the one that was just set and passed to the "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" observer."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"setter name","type":"text"}]},{"text":" and enclosing parentheses in the ","type":"text"},{"type":"codeVoice","code":"willSet"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" clauses are optional. If you provide setter names, they’re used as the parameter names to the ","type":"text"},{"type":"codeVoice","code":"willSet"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" observers. If you don’t provide setter names, the default parameter name to the ","type":"text"},{"type":"codeVoice","code":"willSet"},{"text":" observer is ","type":"text"},{"type":"codeVoice","code":"newValue"},{"text":" and the default parameter name to the ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" observer is ","type":"text"},{"type":"codeVoice","code":"oldValue"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" clause is optional when you provide a ","type":"text"},{"type":"codeVoice","code":"willSet"},{"text":" clause. Likewise, the ","type":"text"},{"type":"codeVoice","code":"willSet"},{"text":" clause is optional when you provide a ","type":"text"},{"type":"codeVoice","code":"didSet"},{"text":" clause.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If the body of the ","type":"text"},{"code":"didSet","type":"codeVoice"},{"text":" observer refers to the old value, the getter is called before the observer, to make the old value available. Otherwise, the new value is stored without calling the superclass’s getter. The example below shows a computed property that’s defined by the superclass and overridden by its subclasses to add an observer.","type":"text"}],"type":"paragraph"},{"code":["class Superclass {","    private var xValue = 12","    var x: Int {","        get { print(\"Getter was called\"); return xValue }","        set { print(\"Setter was called\"); xValue = newValue }","    }","}","","\/\/ This subclass doesn't refer to oldValue in its observer, so the","\/\/ superclass's getter is called only once to print the value.","class New: Superclass {","    override var x: Int {","        didSet { print(\"New value \\(x)\") }","    }","}","let new = New()","new.x = 100","\/\/ Prints \"Setter was called\"","\/\/ Prints \"Getter was called\"","\/\/ Prints \"New value 100\"","","\/\/ This subclass refers to oldValue in its observer, so the superclass's","\/\/ getter is called once before the setter, and again to print the value.","class NewAndOld: Superclass {","    override var x: Int {","        didSet { print(\"Old value \\(oldValue) - new value \\(x)\") }","    }","}","let newAndOld = NewAndOld()","newAndOld.x = 200","\/\/ Prints \"Getter was called\"","\/\/ Prints \"Setter was called\"","\/\/ Prints \"Getter was called\"","\/\/ Prints \"Old value 12 - new value 200\""],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"For more information and to see an example of how to use property observers, see "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Property-Observers","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Type Variable Properties","type":"heading","anchor":"Type-Variable-Properties","level":3},{"inlineContent":[{"text":"To declare a type variable property, mark the declaration with the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" declaration modifier. Classes can mark type computed properties with the ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" declaration modifier instead to allow subclasses to override the superclass’s implementation. Type properties are discussed in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Type-Properties","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"style":"note","name":"Grammar of a variable declaration","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"type":"aside"},{"text":"Type Alias Declaration","type":"heading","anchor":"Type-Alias-Declaration","level":2},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"type alias declaration"}],"type":"emphasis"},{"text":" introduces a named alias of an existing type into your program. Type alias declarations are declared using the ","type":"text"},{"code":"typealias","type":"codeVoice"},{"text":" keyword and have the following form:","type":"text"}],"type":"paragraph"},{"code":["typealias name = existing type"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"After a type alias is declared, the aliased ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"name"}]},{"text":" can be used instead of the ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"existing type","type":"text"}]},{"text":" everywhere in your program. The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"existing type"}]},{"text":" can be a named type or a compound type. Type aliases don’t create new types; they simply allow a name to refer to an existing type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A type alias declaration can use generic parameters to give a name to an existing generic type. The type alias can provide concrete types for some or all of the generic parameters of the existing type. For example:"}],"type":"paragraph"},{"code":["typealias StringDictionary<Value> = Dictionary<String, Value>","","\/\/ The following dictionaries have the same type.","var dictionary1: StringDictionary<Int> = [:]","var dictionary2: Dictionary<String, Int> = [:]"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"When a type alias is declared with generic parameters, the constraints on those parameters must match exactly the constraints on the existing type’s generic parameters. For example:","type":"text"}],"type":"paragraph"},{"code":["typealias DictionaryOfInts<Key: Hashable> = Dictionary<Key, Int>"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Because the type alias and the existing type can be used interchangeably, the type alias can’t introduce additional generic constraints."}],"type":"paragraph"},{"inlineContent":[{"text":"A type alias can forward an existing type’s generic parameters by omitting all generic parameters from the declaration. For example, the ","type":"text"},{"type":"codeVoice","code":"Diccionario"},{"text":" type alias declared here has the same generic parameters and constraints as ","type":"text"},{"type":"codeVoice","code":"Dictionary"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["typealias Diccionario = Dictionary"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Inside a protocol declaration, a type alias can give a shorter and more convenient name to a type that’s used frequently. For example:","type":"text"}],"type":"paragraph"},{"code":["protocol Sequence {","    associatedtype Iterator: IteratorProtocol","    typealias Element = Iterator.Element","}","","func sum<T: Sequence>(_ sequence: T) -> Int where T.Element == Int {","    \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Without this type alias, the "},{"code":"sum","type":"codeVoice"},{"type":"text","text":" function would have to refer to the associated type as "},{"code":"T.Iterator.Element","type":"codeVoice"},{"type":"text","text":" instead of "},{"code":"T.Element","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"See also ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Associated-Type-Declaration","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"style":"note","name":"Grammar of a type alias declaration","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"type":"aside"},{"text":"Function Declaration","type":"heading","anchor":"Function-Declaration","level":2},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"function declaration","type":"text"}]},{"type":"text","text":" introduces a function or method into your program. A function declared in the context of class, structure, enumeration, or protocol is referred to as a "},{"type":"emphasis","inlineContent":[{"text":"method","type":"text"}]},{"type":"text","text":". Function declarations are declared using the "},{"code":"func","type":"codeVoice"},{"type":"text","text":" keyword and have the following form:"}],"type":"paragraph"},{"code":["func function name(parameters) -> return type {","    statements","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"If the function has a return type of "},{"type":"codeVoice","code":"Void"},{"type":"text","text":", the return type can be omitted as follows:"}],"type":"paragraph"},{"code":["func function name(parameters) {","    statements","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The type of each parameter must be included—it can’t be inferred. If you write ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":" in front of a parameter’s type, the parameter can be modified inside the scope of the function. In-out parameters are discussed in detail in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#In-Out-Parameters","isActive":true,"type":"reference"},{"text":", below.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A function declaration whose "},{"inlineContent":[{"type":"text","text":"statements"}],"type":"emphasis"},{"type":"text","text":" include only a single expression is understood to return the value of that expression. This implicit return syntax is considered only when the expression’s type and the function’s return type aren’t "},{"code":"Void","type":"codeVoice"},{"type":"text","text":" and aren’t an enumeration like "},{"code":"Never","type":"codeVoice"},{"type":"text","text":" that doesn’t have any cases."}],"type":"paragraph"},{"inlineContent":[{"text":"Functions can return multiple values using a tuple type as the return type of the function.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A function definition can appear inside another function declaration. This kind of function is known as a ","type":"text"},{"inlineContent":[{"type":"text","text":"nested function"}],"type":"emphasis"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A nested function is nonescaping if it captures a value that’s guaranteed to never escape—such as an in-out parameter—or passed as a nonescaping function argument. Otherwise, the nested function is an escaping function."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For a discussion of nested functions, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Nested-Functions"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Parameter Names","type":"heading","anchor":"Parameter-Names","level":3},{"inlineContent":[{"type":"text","text":"Function parameters are a comma-separated list where each parameter has one of several forms. The order of arguments in a function call must match the order of parameters in the function’s declaration. The simplest entry in a parameter list has the following form:"}],"type":"paragraph"},{"code":["parameter name: parameter type"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"A parameter has a name, which is used within the function body, as well as an argument label, which is used when calling the function or method. By default, parameter names are also used as argument labels. For example:"}],"type":"paragraph"},{"code":["func f(x: Int, y: Int) -> Int { return x + y }","f(x: 1, y: 2) \/\/ both x and y are labeled"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"You can override the default behavior for argument labels with one of the following forms:"}],"type":"paragraph"},{"code":["argument label parameter name: parameter type","_ parameter name: parameter type"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"A name before the parameter name gives the parameter an explicit argument label, which can be different from the parameter name. The corresponding argument must use the given argument label in function or method calls."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An underscore ("},{"code":"_","type":"codeVoice"},{"type":"text","text":") before a parameter name suppresses the argument label. The corresponding argument must have no label in function or method calls."}],"type":"paragraph"},{"code":["func repeatGreeting(_ greeting: String, count n: Int) { \/* Greet n times *\/ }","repeatGreeting(\"Hello, world!\", count: 2) \/\/  count is labeled, greeting is not"],"type":"codeListing","syntax":"swift"},{"text":"In-Out Parameters","type":"heading","anchor":"In-Out-Parameters","level":3},{"inlineContent":[{"type":"text","text":"In-out parameters are passed as follows:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"When the function is called, the value of the argument is copied."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"In the body of the function, the copy is modified.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"When the function returns, the copy’s value is assigned to the original argument."}],"type":"paragraph"}]}],"type":"orderedList"},{"inlineContent":[{"type":"text","text":"This behavior is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"copy-in copy-out"}]},{"type":"text","text":" or "},{"type":"emphasis","inlineContent":[{"text":"call by value result","type":"text"}]},{"type":"text","text":". For example, when a computed property or a property with observers is passed as an in-out parameter, its getter is called as part of the function call and its setter is called as part of the function return."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As an optimization, when the argument is a value stored at a physical address in memory, the same memory location is used both inside and outside the function body. The optimized behavior is known as "},{"type":"emphasis","inlineContent":[{"text":"call by reference","type":"text"}]},{"type":"text","text":"; it satisfies all of the requirements of the copy-in copy-out model while removing the overhead of copying. Write your code using the model given by copy-in copy-out, without depending on the call-by-reference optimization, so that it behaves correctly with or without the optimization."}],"type":"paragraph"},{"inlineContent":[{"text":"Within a function, don’t access a value that was passed as an in-out argument, even if the original value is available in the current scope. Accessing the original is a simultaneous access of the value, which violates Swift’s memory exclusivity guarantee. For the same reason, you can’t pass the same value to multiple in-out parameters.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For more information about memory safety and memory exclusivity, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A closure or nested function that captures an in-out parameter must be nonescaping. If you need to capture an in-out parameter without mutating it, use a capture list to explicitly capture the parameter immutably."}],"type":"paragraph"},{"code":["func someFunction(a: inout Int) -> () -> Int {","    return { [a] in return a + 1 }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"If you need to capture and mutate an in-out parameter, use an explicit local copy, such as in multithreaded code that ensures all mutation has finished before the function returns.","type":"text"}],"type":"paragraph"},{"code":["func multithreadedFunction(queue: DispatchQueue, x: inout Int) {","    \/\/ Make a local copy and manually copy it back.","    var localX = x","    defer { x = localX }","","    \/\/ Operate on localX asynchronously, then wait before returning.","    queue.async { someMutatingOperation(&localX) }","    queue.sync {}","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"For more discussion and examples of in-out parameters, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#In-Out-Parameters","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Special Kinds of Parameters","type":"heading","anchor":"Special-Kinds-of-Parameters","level":3},{"inlineContent":[{"text":"Parameters can be ignored, take a variable number of values, and provide default values using the following forms:","type":"text"}],"type":"paragraph"},{"code":["_ : parameter type","parameter name: parameter type...","parameter name: parameter type = default argument value"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"An underscore ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") parameter is explicitly ignored and can’t be accessed within the body of the function."}],"type":"paragraph"},{"inlineContent":[{"text":"A parameter with a base type name followed immediately by three dots (","type":"text"},{"type":"codeVoice","code":"..."},{"text":") is understood as a variadic parameter. A parameter that immediately follows a variadic parameter must have an argument label. A function can have multiple variadic parameters. A variadic parameter is treated as an array that contains elements of the base type name. For example, the variadic parameter ","type":"text"},{"type":"codeVoice","code":"Int..."},{"text":" is treated as ","type":"text"},{"type":"codeVoice","code":"[Int]"},{"text":". For an example that uses a variadic parameter, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Variadic-Parameters","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A parameter with an equals sign (","type":"text"},{"type":"codeVoice","code":"="},{"text":") and an expression after its type is understood to have a default value of the given expression. The given expression is evaluated when the function is called. If the parameter is omitted when calling the function, the default value is used instead.","type":"text"}],"type":"paragraph"},{"code":["func f(x: Int = 42) -> Int { return x }","f()       \/\/ Valid, uses default value","f(x: 7)   \/\/ Valid, uses the value provided","f(7)      \/\/ Invalid, missing argument label"],"type":"codeListing","syntax":"swift"},{"text":"Special Kinds of Methods","type":"heading","anchor":"Special-Kinds-of-Methods","level":3},{"inlineContent":[{"type":"text","text":"Methods on an enumeration or a structure that modify "},{"type":"codeVoice","code":"self"},{"type":"text","text":" must be marked with the "},{"type":"codeVoice","code":"mutating"},{"type":"text","text":" declaration modifier."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Methods that override a superclass method must be marked with the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" declaration modifier. It’s a compile-time error to override a method without the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier or to use the "},{"type":"codeVoice","code":"override"},{"type":"text","text":" modifier on a method that doesn’t override a superclass method."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Methods associated with a type rather than an instance of a type must be marked with the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" declaration modifier for enumerations and structures, or with either the "},{"type":"codeVoice","code":"static"},{"type":"text","text":" or "},{"type":"codeVoice","code":"class"},{"type":"text","text":" declaration modifier for classes. A class type method marked with the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" declaration modifier can be overridden by a subclass implementation; a class type method marked with "},{"type":"codeVoice","code":"class final"},{"type":"text","text":" or "},{"type":"codeVoice","code":"static"},{"type":"text","text":" can’t be overridden."}],"type":"paragraph"},{"text":"Methods with Special Names","type":"heading","anchor":"Methods-with-Special-Names","level":3},{"inlineContent":[{"text":"Several methods that have special names enable syntactic sugar for function call syntax. If a type defines one of these methods, instances of the type can be used in function call syntax. The function call is understood to be a call to one of the specially named methods on that instance.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A class, structure, or enumeration type can support function call syntax by defining a "},{"code":"dynamicallyCall(withArguments:)","type":"codeVoice"},{"type":"text","text":" method or a "},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"type":"text","text":" method, as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#dynamicCallable"},{"type":"text","text":", or by defining a call-as-function method, as described below. If the type defines both a call-as-function method and one of the methods used by the "},{"code":"dynamicCallable","type":"codeVoice"},{"type":"text","text":" attribute, the compiler gives preference to the call-as-function method in circumstances where either method could be used."}],"type":"paragraph"},{"inlineContent":[{"text":"The name of a call-as-function method is ","type":"text"},{"code":"callAsFunction()","type":"codeVoice"},{"text":", or another name that begins with ","type":"text"},{"code":"callAsFunction(","type":"codeVoice"},{"text":" and adds labeled or unlabeled arguments—for example, ","type":"text"},{"code":"callAsFunction(_:_:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"callAsFunction(something:)","type":"codeVoice"},{"text":" are also valid call-as-function method names.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following function calls are equivalent:","type":"text"}],"type":"paragraph"},{"code":["struct CallableStruct {","    var value: Int","    func callAsFunction(_ number: Int, scale: Int) {","        print(scale * (number + value))","    }","}","let callable = CallableStruct(value: 100)","callable(4, scale: 2)","callable.callAsFunction(4, scale: 2)","\/\/ Both function calls print 208."],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The call-as-function methods and the methods from the "},{"code":"dynamicCallable","type":"codeVoice"},{"type":"text","text":" attribute make different trade-offs between how much information you encode into the type system and how much dynamic behavior is possible at runtime. When you declare a call-as-function method, you specify the number of arguments, and each argument’s type and label. The "},{"code":"dynamicCallable","type":"codeVoice"},{"type":"text","text":" attribute’s methods specify only the type used to hold the array of arguments."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Defining a call-as-function method, or a method from the "},{"type":"codeVoice","code":"dynamicCallable"},{"type":"text","text":" attribute, doesn’t let you use an instance of that type as if it were a function in any context other than a function call expression. For example:"}],"type":"paragraph"},{"code":["let someFunction1: (Int, Int) -> Void = callable(_:scale:)  \/\/ Error","let someFunction2: (Int, Int) -> Void = callable.callAsFunction(_:scale:)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"The "},{"code":"subscript(dynamicMember:)","type":"codeVoice"},{"type":"text","text":" subscript enables syntactic sugar for member lookup, as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#dynamicMemberLookup"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Throwing Functions and Methods","type":"heading","anchor":"Throwing-Functions-and-Methods","level":3},{"inlineContent":[{"type":"text","text":"Functions and methods that can throw an error must be marked with the "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" keyword. These functions and methods are known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"throwing functions"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"throwing methods"}]},{"type":"text","text":". They have the following form:"}],"type":"paragraph"},{"code":["func function name(parameters) throws -> return type {","    statements","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Calls to a throwing function or method must be wrapped in a ","type":"text"},{"type":"codeVoice","code":"try"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"try!"},{"text":" expression (that is, in the scope of a ","type":"text"},{"type":"codeVoice","code":"try"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"try!"},{"text":" operator).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"throws","type":"codeVoice"},{"type":"text","text":" keyword is part of a function’s type, and nonthrowing functions are subtypes of throwing functions. As a result, you can use a nonthrowing function in a context where as a throwing one is expected."}],"type":"paragraph"},{"inlineContent":[{"text":"You can’t overload a function based only on whether the function can throw an error. That said, you can overload a function based on whether a function ","type":"text"},{"inlineContent":[{"type":"text","text":"parameter"}],"type":"emphasis"},{"text":" can throw an error.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A throwing method can’t override a nonthrowing method, and a throwing method can’t satisfy a protocol requirement for a nonthrowing method. That said, a nonthrowing method can override a throwing method, and a nonthrowing method can satisfy a protocol requirement for a throwing method.","type":"text"}],"type":"paragraph"},{"text":"Rethrowing Functions and Methods","type":"heading","anchor":"Rethrowing-Functions-and-Methods","level":3},{"inlineContent":[{"text":"A function or method can be declared with the ","type":"text"},{"code":"rethrows","type":"codeVoice"},{"text":" keyword to indicate that it throws an error only if one of its function parameters throws an error. These functions and methods are known as ","type":"text"},{"inlineContent":[{"type":"text","text":"rethrowing functions"}],"type":"emphasis"},{"text":" and ","type":"text"},{"inlineContent":[{"text":"rethrowing methods","type":"text"}],"type":"emphasis"},{"text":". Rethrowing functions and methods must have at least one throwing function parameter.","type":"text"}],"type":"paragraph"},{"code":["func someFunction(callback: () throws -> Void) rethrows {","    try callback()","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"A rethrowing function or method can contain a ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":" statement only inside a ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" clause. This lets you call the throwing function inside a ","type":"text"},{"code":"do","type":"codeVoice"},{"text":"-","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" statement and handle errors in the ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" clause by throwing a different error. In addition, the ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" clause must handle only errors thrown by one of the rethrowing function’s throwing parameters. For example, the following is invalid because the ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":" clause would handle the error thrown by ","type":"text"},{"code":"alwaysThrows()","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"code":["func alwaysThrows() throws {","    throw SomeError.error","}","func someFunction(callback: () throws -> Void) rethrows {","    do {","        try callback()","        try alwaysThrows()  \/\/ Invalid, alwaysThrows() isn't a throwing parameter","    } catch {","        throw AnotherError.error","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"A throwing method can’t override a rethrowing method, and a throwing method can’t satisfy a protocol requirement for a rethrowing method. That said, a rethrowing method can override a throwing method, and a rethrowing method can satisfy a protocol requirement for a throwing method.","type":"text"}],"type":"paragraph"},{"text":"Asynchronous Functions and Methods","type":"heading","anchor":"Asynchronous-Functions-and-Methods","level":3},{"inlineContent":[{"type":"text","text":"Functions and methods that run asynchronously must be marked with the "},{"code":"async","type":"codeVoice"},{"type":"text","text":" keyword. These functions and methods are known as "},{"type":"emphasis","inlineContent":[{"text":"asynchronous functions","type":"text"}]},{"type":"text","text":" and "},{"type":"emphasis","inlineContent":[{"text":"asynchronous methods","type":"text"}]},{"type":"text","text":". They have the following form:"}],"type":"paragraph"},{"code":["func function name(parameters) async -> return type {","    statements","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Calls to an asynchronous function or method must be wrapped in an "},{"type":"codeVoice","code":"await"},{"type":"text","text":" expression—that is, they must be in the scope of an "},{"type":"codeVoice","code":"await"},{"type":"text","text":" operator."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"async","type":"codeVoice"},{"text":" keyword is part of the function’s type, and synchronous functions are subtypes of asynchronous functions. As a result, you can use a synchronous function in a context where an asynchronous function is expected. For example, you can override an asynchronous method with a synchronous method, and a synchronous method can satisfy a protocol requirement that requires an asynchronous method.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can overload a function based on whether or not the function is asynchronous. At the call site, context determines which overload is used: In an asynchronous context, the asynchronous function is used, and in a synchronous context, the synchronous function is used.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"An asynchronous method can’t override a synchronous method, and an asynchronous method can’t satisfy a protocol requirement for a synchronous method. That said, a synchronous method can override an asynchronous method, and a synchronous method can satisfy a protocol requirement for an asynchronous method.","type":"text"}],"type":"paragraph"},{"text":"Functions that Never Return","type":"heading","anchor":"Functions-that-Never-Return","level":3},{"inlineContent":[{"type":"text","text":"Swift defines a "},{"code":"Never","type":"codeVoice"},{"type":"text","text":" type, which indicates that a function or method doesn’t return to its caller. Functions and methods with the "},{"code":"Never","type":"codeVoice"},{"type":"text","text":" return type are called "},{"inlineContent":[{"type":"text","text":"nonreturning"}],"type":"emphasis"},{"type":"text","text":". Nonreturning functions and methods either cause an irrecoverable error or begin a sequence of work that continues indefinitely. This means that code that would otherwise run immediately after the call is never executed. Throwing and rethrowing functions can transfer program control to an appropriate "},{"code":"catch","type":"codeVoice"},{"type":"text","text":" block, even when they’re nonreturning."}],"type":"paragraph"},{"inlineContent":[{"text":"A nonreturning function or method can be called to conclude the ","type":"text"},{"code":"else","type":"codeVoice"},{"text":" clause of a guard statement, as discussed in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Guard-Statement","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can override a nonreturning method, but the new method must preserve its return type and nonreturning behavior.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Grammar of a function declaration","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}],"type":"aside"},{"text":"Enumeration Declaration","type":"heading","anchor":"Enumeration-Declaration","level":2},{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration declaration"}]},{"type":"text","text":" introduces a named enumeration type into your program."}],"type":"paragraph"},{"inlineContent":[{"text":"Enumeration declarations have two basic forms and are declared using the ","type":"text"},{"type":"codeVoice","code":"enum"},{"text":" keyword. The body of an enumeration declared using either form contains zero or more values—called ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration cases"}]},{"text":"—and any number of declarations, including computed properties, instance methods, type methods, initializers, type aliases, and even other enumeration, structure, class, and actor declarations. Enumeration declarations can’t contain deinitializer or protocol declarations.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Enumeration types can adopt any number of protocols, but can’t inherit from classes, structures, or other enumerations."}],"type":"paragraph"},{"inlineContent":[{"text":"Unlike classes and structures, enumeration types don’t have an implicitly provided default initializer; all initializers must be declared explicitly. Initializers can delegate to other initializers in the enumeration, but the initialization process is complete only after an initializer assigns one of the enumeration cases to ","type":"text"},{"type":"codeVoice","code":"self"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Like structures but unlike classes, enumerations are value types; instances of an enumeration are copied when assigned to variables or constants, or when passed as arguments to a function call. For information about value types, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"You can extend the behavior of an enumeration type with an extension declaration, as discussed in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Extension-Declaration","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Enumerations with Cases of Any Type","type":"heading","anchor":"Enumerations-with-Cases-of-Any-Type","level":3},{"inlineContent":[{"text":"The following form declares an enumeration type that contains enumeration cases of any type:","type":"text"}],"type":"paragraph"},{"code":["enum enumeration name: adopted protocols {","    case enumeration case 1","    case enumeration case 2(associated value types)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"Enumerations declared in this form are sometimes called "},{"type":"emphasis","inlineContent":[{"text":"discriminated unions","type":"text"}]},{"type":"text","text":" in other programming languages."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this form, each case block consists of the "},{"type":"codeVoice","code":"case"},{"type":"text","text":" keyword followed by one or more enumeration cases, separated by commas. The name of each case must be unique. Each case can also specify that it stores values of a given type. These types are specified in the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"associated value types"}]},{"type":"text","text":" tuple, immediately following the name of the case."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Enumeration cases that store associated values can be used as functions that create instances of the enumeration with the specified associated values. And just like functions, you can get a reference to an enumeration case and apply it later in your code."}],"type":"paragraph"},{"code":["enum Number {","    case integer(Int)","    case real(Double)","}","let f = Number.integer","\/\/ f is a function of type (Int) -> Number","","\/\/ Apply f to create an array of Number instances with integer values","let evenInts: [Number] = [0, 2, 4, 6].map(f)"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"For more information and to see examples of cases with associated value types, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Associated-Values"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Enumerations with Indirection","type":"heading","anchor":"Enumerations-with-Indirection","level":4},{"inlineContent":[{"type":"text","text":"Enumerations can have a recursive structure, that is, they can have cases with associated values that are instances of the enumeration type itself. However, instances of enumeration types have value semantics, which means they have a fixed layout in memory. To support recursion, the compiler must insert a layer of indirection."}],"type":"paragraph"},{"inlineContent":[{"text":"To enable indirection for a particular enumeration case, mark it with the ","type":"text"},{"code":"indirect","type":"codeVoice"},{"text":" declaration modifier. An indirect case must have an associated value.","type":"text"}],"type":"paragraph"},{"code":["enum Tree<T> {","    case empty","    indirect case node(value: T, left: Tree, right: Tree)","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"To enable indirection for all the cases of an enumeration that have an associated value, mark the entire enumeration with the ","type":"text"},{"code":"indirect","type":"codeVoice"},{"text":" modifier—this is convenient when the enumeration contains many cases that would each need to be marked with the ","type":"text"},{"code":"indirect","type":"codeVoice"},{"text":" modifier.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"An enumeration that’s marked with the ","type":"text"},{"type":"codeVoice","code":"indirect"},{"text":" modifier can contain a mixture of cases that have associated values and cases those that don’t. That said, it can’t contain any cases that are also marked with the ","type":"text"},{"type":"codeVoice","code":"indirect"},{"text":" modifier.","type":"text"}],"type":"paragraph"},{"text":"Enumerations with Cases of a Raw-Value Type","type":"heading","anchor":"Enumerations-with-Cases-of-a-Raw-Value-Type","level":3},{"inlineContent":[{"type":"text","text":"The following form declares an enumeration type that contains enumeration cases of the same basic type:"}],"type":"paragraph"},{"code":["enum enumeration name: raw-value type, adopted protocols {","    case enumeration case 1 = raw value 1","    case enumeration case 2 = raw value 2","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"In this form, each case block consists of the ","type":"text"},{"type":"codeVoice","code":"case"},{"text":" keyword, followed by one or more enumeration cases, separated by commas. Unlike the cases in the first form, each case has an underlying value, called a ","type":"text"},{"inlineContent":[{"type":"text","text":"raw value"}],"type":"emphasis"},{"text":", of the same basic type. The type of these values is specified in the ","type":"text"},{"inlineContent":[{"text":"raw-value type","type":"text"}],"type":"emphasis"},{"text":" and must represent an integer, floating-point number, string, or single character. In particular, the ","type":"text"},{"inlineContent":[{"type":"text","text":"raw-value type"}],"type":"emphasis"},{"text":" must conform to the ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"text":" protocol and one of the following protocols: ","type":"text"},{"type":"codeVoice","code":"ExpressibleByIntegerLiteral"},{"text":" for integer literals, ","type":"text"},{"type":"codeVoice","code":"ExpressibleByFloatLiteral"},{"text":" for floating-point literals, ","type":"text"},{"type":"codeVoice","code":"ExpressibleByStringLiteral"},{"text":" for string literals that contain any number of characters, and ","type":"text"},{"type":"codeVoice","code":"ExpressibleByUnicodeScalarLiteral"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"ExpressibleByExtendedGraphemeClusterLiteral"},{"text":" for string literals that contain only a single character. Each case must have a unique name and be assigned a unique raw value.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If the raw-value type is specified as ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" and you don’t assign a value to the cases explicitly, they’re implicitly assigned the values ","type":"text"},{"code":"0","type":"codeVoice"},{"text":", ","type":"text"},{"code":"1","type":"codeVoice"},{"text":", ","type":"text"},{"code":"2","type":"codeVoice"},{"text":", and so on. Each unassigned case of type ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" is implicitly assigned a raw value that’s automatically incremented from the raw value of the previous case.","type":"text"}],"type":"paragraph"},{"code":["enum ExampleEnum: Int {","    case a, b, c = 5, d","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"In the above example, the raw value of "},{"code":"ExampleEnum.a","type":"codeVoice"},{"type":"text","text":" is "},{"code":"0","type":"codeVoice"},{"type":"text","text":" and the value of "},{"code":"ExampleEnum.b","type":"codeVoice"},{"type":"text","text":" is "},{"code":"1","type":"codeVoice"},{"type":"text","text":". And because the value of "},{"code":"ExampleEnum.c","type":"codeVoice"},{"type":"text","text":" is explicitly set to "},{"code":"5","type":"codeVoice"},{"type":"text","text":", the value of "},{"code":"ExampleEnum.d","type":"codeVoice"},{"type":"text","text":" is automatically incremented from "},{"code":"5","type":"codeVoice"},{"type":"text","text":" and is therefore "},{"code":"6","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"If the raw-value type is specified as ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" and you don’t assign values to the cases explicitly, each unassigned case is implicitly assigned a string with the same text as the name of that case.","type":"text"}],"type":"paragraph"},{"code":["enum GamePlayMode: String {","    case cooperative, individual, competitive","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"In the above example, the raw value of ","type":"text"},{"type":"codeVoice","code":"GamePlayMode.cooperative"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"\"cooperative\""},{"text":", the raw value of ","type":"text"},{"type":"codeVoice","code":"GamePlayMode.individual"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"\"individual\""},{"text":", and the raw value of ","type":"text"},{"type":"codeVoice","code":"GamePlayMode.competitive"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"\"competitive\""},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Enumerations that have cases of a raw-value type implicitly conform to the ","type":"text"},{"type":"codeVoice","code":"RawRepresentable"},{"text":" protocol, defined in the Swift standard library. As a result, they have a ","type":"text"},{"type":"codeVoice","code":"rawValue"},{"text":" property and a failable initializer with the signature ","type":"text"},{"type":"codeVoice","code":"init?(rawValue: RawValue)"},{"text":". You can use the ","type":"text"},{"type":"codeVoice","code":"rawValue"},{"text":" property to access the raw value of an enumeration case, as in ","type":"text"},{"type":"codeVoice","code":"ExampleEnum.b.rawValue"},{"text":". You can also use a raw value to find a corresponding case, if there is one, by calling the enumeration’s failable initializer, as in ","type":"text"},{"type":"codeVoice","code":"ExampleEnum(rawValue: 5)"},{"text":", which returns an optional case. For more information and to see examples of cases with raw-value types, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Raw-Values"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Accessing Enumeration Cases","type":"heading","anchor":"Accessing-Enumeration-Cases","level":3},{"inlineContent":[{"type":"text","text":"To reference the case of an enumeration type, use dot ("},{"code":".","type":"codeVoice"},{"type":"text","text":") syntax, as in "},{"code":"EnumerationType.enumerationCase","type":"codeVoice"},{"type":"text","text":". When the enumeration type can be inferred from context, you can omit it (the dot is still required), as described in "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Enumeration-Syntax","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Implicit-Member-Expression","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"To check the values of enumeration cases, use a ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement, as shown in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement","type":"reference"},{"text":". The enumeration type is pattern-matched against the enumeration case patterns in the case blocks of the ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statement, as described in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns#Enumeration-Case-Pattern","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"style":"note","name":"Grammar of an enumeration declaration","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}],"type":"aside"},{"text":"Structure Declaration","type":"heading","anchor":"Structure-Declaration","level":2},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"text":"structure declaration","type":"text"}],"type":"emphasis"},{"type":"text","text":" introduces a named structure type into your program. Structure declarations are declared using the "},{"code":"struct","type":"codeVoice"},{"type":"text","text":" keyword and have the following form:"}],"type":"paragraph"},{"code":["struct structure name: adopted protocols {","    declarations","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"The body of a structure contains zero or more ","type":"text"},{"inlineContent":[{"type":"text","text":"declarations"}],"type":"emphasis"},{"text":". These ","type":"text"},{"inlineContent":[{"text":"declarations","type":"text"}],"type":"emphasis"},{"text":" can include both stored and computed properties, type properties, instance methods, type methods, initializers, subscripts, type aliases, and even other structure, class, actor, and enumeration declarations. Structure declarations can’t contain deinitializer or protocol declarations. For a discussion and several examples of structures that include various kinds of declarations, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Structure types can adopt any number of protocols, but can’t inherit from classes, enumerations, or other structures."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are three ways to create an instance of a previously declared structure:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"Call one of the initializers declared within the structure, as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Initializers"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If no initializers are declared, call the structure’s memberwise initializer, as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Memberwise-Initializers-for-Structure-Types"},{"type":"text","text":"."}]}]},{"content":[{"inlineContent":[{"text":"If no initializers are declared, and all properties of the structure declaration were given initial values, call the structure’s default initializer, as described in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Default-Initializers","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"text":"The process of initializing a structure’s declared properties is described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Properties of a structure instance can be accessed using dot (","type":"text"},{"code":".","type":"codeVoice"},{"text":") syntax, as described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Accessing-Properties","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Structures are value types; instances of a structure are copied when assigned to variables or constants, or when passed as arguments to a function call. For information about value types, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can extend the behavior of a structure type with an extension declaration, as discussed in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Extension-Declaration"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of a structure declaration","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"type":"aside","style":"note"},{"text":"Class Declaration","anchor":"Class-Declaration","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"class declaration"}],"type":"emphasis"},{"type":"text","text":" introduces a named class type into your program. Class declarations are declared using the "},{"type":"codeVoice","code":"class"},{"type":"text","text":" keyword and have the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["class class name: superclass, adopted protocols {","    declarations","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The body of a class contains zero or more "},{"type":"emphasis","inlineContent":[{"type":"text","text":"declarations"}]},{"type":"text","text":". These "},{"type":"emphasis","inlineContent":[{"text":"declarations","type":"text"}]},{"type":"text","text":" can include both stored and computed properties, instance methods, type methods, initializers, a single deinitializer, subscripts, type aliases, and even other class, structure, actor, and enumeration declarations. Class declarations can’t contain protocol declarations. For a discussion and several examples of classes that include various kinds of declarations, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A class type can inherit from only one parent class, its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":", but can adopt any number of protocols. The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":" appears first after the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"class name"}]},{"type":"text","text":" and colon, followed by any "},{"type":"emphasis","inlineContent":[{"text":"adopted protocols","type":"text"}]},{"type":"text","text":". Generic classes can inherit from other generic and nongeneric classes, but a nongeneric class can inherit only from other nongeneric classes. When you write the name of a generic superclass class after the colon, you must include the full name of that generic class, including its generic parameter clause."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As discussed in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Initializer-Declaration","isActive":true},{"type":"text","text":", classes can have designated and convenience initializers. The designated initializer of a class must initialize all of the class’s declared properties and it must do so before calling any of its superclass’s designated initializers."}],"type":"paragraph"},{"inlineContent":[{"text":"A class can override properties, methods, subscripts, and initializers of its superclass. Overridden properties, methods, subscripts, and designated initializers must be marked with the ","type":"text"},{"code":"override","type":"codeVoice"},{"text":" declaration modifier.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To require that subclasses implement a superclass’s initializer, mark the superclass’s initializer with the "},{"code":"required","type":"codeVoice"},{"type":"text","text":" declaration modifier. The subclass’s implementation of that initializer must also be marked with the "},{"code":"required","type":"codeVoice"},{"type":"text","text":" declaration modifier."}],"type":"paragraph"},{"inlineContent":[{"text":"Although properties and methods declared in the ","type":"text"},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"text":" are inherited by the current class, designated initializers declared in the ","type":"text"},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"text":" are only inherited when the subclass meets the conditions described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Automatic-Initializer-Inheritance","isActive":true,"type":"reference"},{"text":". Swift classes don’t inherit from a universal base class.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are two ways to create an instance of a previously declared class:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Call one of the initializers declared within the class, as described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Initializers","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"If no initializers are declared, and all properties of the class declaration were given initial values, call the class’s default initializer, as described in "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Default-Initializers","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Access properties of a class instance with dot ("},{"type":"codeVoice","code":"."},{"type":"text","text":") syntax, as described in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Accessing-Properties","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Classes are reference types; instances of a class are referred to, rather than copied, when assigned to variables or constants, or when passed as arguments to a function call. For information about reference types, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Classes-Are-Reference-Types","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can extend the behavior of a class type with an extension declaration, as discussed in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Extension-Declaration","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a class declaration","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"text":"Actor Declaration","anchor":"Actor-Declaration","type":"heading","level":2},{"inlineContent":[{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"actor declaration"}]},{"text":" introduces a named actor type into your program. Actor declarations are declared using the ","type":"text"},{"code":"actor","type":"codeVoice"},{"text":" keyword and have the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["actor actor name: adopted protocols {","    declarations","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The body of an actor contains zero or more "},{"type":"emphasis","inlineContent":[{"type":"text","text":"declarations"}]},{"type":"text","text":". These "},{"type":"emphasis","inlineContent":[{"type":"text","text":"declarations"}]},{"type":"text","text":" can include both stored and computed properties, instance methods, type methods, initializers, a single deinitializer, subscripts, type aliases, and even other class, structure, and enumeration declarations. For a discussion and several examples of actors that include various kinds of declarations, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency#Actors","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Actor types can adopt any number of protocols, but can’t inherit from classes, enumerations, structures, or other actors. However, an actor that is marked with the ","type":"text"},{"type":"codeVoice","code":"@objc"},{"text":" attribute implicitly conforms to the ","type":"text"},{"type":"codeVoice","code":"NSObjectProtocol"},{"text":" protocol and is exposed to the Objective-C runtime as a subtype of ","type":"text"},{"type":"codeVoice","code":"NSObject"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are two ways to create an instance of a previously declared actor:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Call one of the initializers declared within the actor, as described in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Initializers"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If no initializers are declared, and all properties of the actor declaration were given initial values, call the actor’s default initializer, as described in "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Default-Initializers","type":"reference"},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"inlineContent":[{"text":"By default, members of an actor are isolated to that actor. Code, such as the body of a method or the getter for a property, is executed on that actor. Code within the actor can interact with them synchronously because that code is already running on the same actor, but code outside the actor must mark them with ","type":"text"},{"code":"await","type":"codeVoice"},{"text":" to indicate that this code is asynchronously running code on another actor. Key paths can’t refer to isolated members of an actor. Actor-isolated stored properties can be passed as in-out parameters to synchronous functions, but not to asynchronous functions.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Actors can also have nonisolated members, whose declarations are marked with the "},{"code":"nonisolated","type":"codeVoice"},{"type":"text","text":" keyword. A nonisolated member executes like code outside of the actor: It can’t interact with any of the actor’s isolated state, and callers don’t mark it with "},{"code":"await","type":"codeVoice"},{"type":"text","text":" when using it."}],"type":"paragraph"},{"inlineContent":[{"text":"Members of an actor can be marked with the ","type":"text"},{"type":"codeVoice","code":"@objc"},{"text":" attribute only if they are nonisolated or asynchronous.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The process of initializing an actor’s declared properties is described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Properties of a actor instance can be accessed using dot ("},{"type":"codeVoice","code":"."},{"type":"text","text":") syntax, as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Accessing-Properties"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Actors are reference types; instances of an actor are referred to, rather than copied, when assigned to variables or constants, or when passed as arguments to a function call. For information about reference types, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Classes-Are-Reference-Types","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can extend the behavior of a structure type with an extension declaration, as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Extension-Declaration"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of an actor declaration","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"type":"aside","style":"note"},{"text":"Protocol Declaration","anchor":"Protocol-Declaration","type":"heading","level":2},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"protocol declaration"}],"type":"emphasis"},{"text":" introduces a named protocol type into your program. Protocol declarations are declared at global scope using the ","type":"text"},{"type":"codeVoice","code":"protocol"},{"text":" keyword and have the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["protocol protocol name: inherited protocols {","    protocol member declarations","}"],"type":"codeListing"},{"inlineContent":[{"text":"The body of a protocol contains zero or more ","type":"text"},{"inlineContent":[{"type":"text","text":"protocol member declarations"}],"type":"emphasis"},{"text":", which describe the conformance requirements that any type adopting the protocol must fulfill. In particular, a protocol can declare that conforming types must implement certain properties, methods, initializers, and subscripts. Protocols can also declare special kinds of type aliases, called ","type":"text"},{"inlineContent":[{"text":"associated types","type":"text"}],"type":"emphasis"},{"text":", that can specify relationships among the various declarations of the protocol. Protocol declarations can’t contain class, structure, enumeration, or other protocol declarations. The ","type":"text"},{"inlineContent":[{"text":"protocol member declarations","type":"text"}],"type":"emphasis"},{"text":" are discussed in detail below.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Protocol types can inherit from any number of other protocols. When a protocol type inherits from other protocols, the set of requirements from those other protocols are aggregated, and any type that inherits from the current protocol must conform to all those requirements. For an example of how to use protocol inheritance, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocol-Inheritance"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also aggregate the conformance requirements of multiple protocols using protocol composition types, as described in "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Protocol-Composition-Type","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocol-Composition","type":"reference","isActive":true},{"type":"text","text":"."}]}],"type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"You can add protocol conformance to a previously declared type by adopting the protocol in an extension declaration of that type. In the extension, you must implement all of the adopted protocol’s requirements. If the type already implements all of the requirements, you can leave the body of the extension declaration empty."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"By default, types that conform to a protocol must implement all properties, methods, and subscripts declared in the protocol. That said, you can mark these protocol member declarations with the "},{"type":"codeVoice","code":"optional"},{"type":"text","text":" declaration modifier to specify that their implementation by a conforming type is optional. The "},{"type":"codeVoice","code":"optional"},{"type":"text","text":" modifier can be applied only to members that are marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute, and only to members of protocols that are marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute. As a result, only class types can adopt and conform to a protocol that contains optional member requirements. For more information about how to use the "},{"type":"codeVoice","code":"optional"},{"type":"text","text":" declaration modifier and for guidance about how to access optional protocol members—for example, when you’re not sure whether a conforming type implements them—see "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Optional-Protocol-Requirements","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The cases of an enumeration can satisfy protocol requirements for type members. Specifically, an enumeration case without any associated values satisfies a protocol requirement for a get-only type variable of type "},{"type":"codeVoice","code":"Self"},{"type":"text","text":", and an enumeration case with associated values satisfies a protocol requirement for a function that returns "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" whose parameters and their argument labels match the case’s associated values. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["protocol SomeProtocol {","    static var someValue: Self { get }","    static func someFunction(x: Int) -> Self","}","enum MyEnum: SomeProtocol {","    case someValue","    case someFunction(x: Int)","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"To restrict the adoption of a protocol to class types only, include the "},{"code":"AnyObject","type":"codeVoice"},{"type":"text","text":" protocol in the "},{"inlineContent":[{"text":"inherited protocols","type":"text"}],"type":"emphasis"},{"type":"text","text":" list after the colon. For example, the following protocol can be adopted only by class types:"}],"type":"paragraph"},{"syntax":"swift","code":["protocol SomeProtocol: AnyObject {","    \/* Protocol members go here *\/","}"],"type":"codeListing"},{"inlineContent":[{"text":"Any protocol that inherits from a protocol that’s marked with the ","type":"text"},{"code":"AnyObject","type":"codeVoice"},{"text":" requirement can likewise be adopted only by class types.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"type":"text","text":"If a protocol is marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute, the "},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" requirement is implicitly applied to that protocol; there’s no need to mark the protocol with the "},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" requirement explicitly."}],"type":"paragraph"}],"type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"Protocols are named types, and thus they can appear in all the same places in your code as other named types, as discussed in "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocols-as-Types","type":"reference","isActive":true},{"type":"text","text":". However, you can’t construct an instance of a protocol, because protocols don’t actually provide the implementations for the requirements they specify."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can use protocols to declare which methods a delegate of a class or structure should implement, as described in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Delegation","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a protocol declaration","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"type":"aside","style":"note"},{"text":"Protocol Property Declaration","anchor":"Protocol-Property-Declaration","type":"heading","level":3},{"inlineContent":[{"text":"Protocols declare that conforming types must implement a property by including a ","type":"text"},{"inlineContent":[{"text":"protocol property declaration","type":"text"}],"type":"emphasis"},{"text":" in the body of the protocol declaration. Protocol property declarations have a special form of a variable declaration:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var property name: type { get set }"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"As with other protocol member declarations, these property declarations declare only the getter and setter requirements for types that conform to the protocol. As a result, you don’t implement the getter or setter directly in the protocol in which it’s declared."}],"type":"paragraph"},{"inlineContent":[{"text":"The getter and setter requirements can be satisfied by a conforming type in a variety of ways. If a property declaration includes both the ","type":"text"},{"code":"get","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"set","type":"codeVoice"},{"text":" keywords, a conforming type can implement it with a stored variable property or a computed property that’s both readable and writeable (that is, one that implements both a getter and a setter). However, that property declaration can’t be implemented as a constant property or a read-only computed property. If a property declaration includes only the ","type":"text"},{"code":"get","type":"codeVoice"},{"text":" keyword, it can be implemented as any kind of property. For examples of conforming types that implement the property requirements of a protocol, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Property-Requirements","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To declare a type property requirement in a protocol declaration, mark the property declaration with the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" keyword. Structures and enumerations that conform to the protocol declare the property with the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" keyword, and classes that conform to the protocol declare the property with either the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" keyword. Extensions that add protocol conformance to a structure, enumeration, or class use the same keyword as the type they extend uses. Extensions that provide a default implementation for a type property requirement use the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" keyword.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"See also ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Variable-Declaration","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of a protocol property declaration","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"type":"aside","style":"note"},{"text":"Protocol Method Declaration","anchor":"Protocol-Method-Declaration","type":"heading","level":3},{"inlineContent":[{"text":"Protocols declare that conforming types must implement a method by including a protocol method declaration in the body of the protocol declaration. Protocol method declarations have the same form as function declarations, with two exceptions: They don’t include a function body, and you can’t provide any default parameter values as part of the function declaration. For examples of conforming types that implement the method requirements of a protocol, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Method-Requirements"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To declare a class or static method requirement in a protocol declaration, mark the method declaration with the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" declaration modifier. Structures and enumerations that conform to the protocol declare the method with the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" keyword, and classes that conform to the protocol declare the method with either the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" keyword. Extensions that add protocol conformance to a structure, enumeration, or class use the same keyword as the type they extend uses. Extensions that provide a default implementation for a type method requirement use the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" keyword.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"See also ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Function-Declaration"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of a protocol method declaration","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"type":"aside","style":"note"},{"text":"Protocol Initializer Declaration","anchor":"Protocol-Initializer-Declaration","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Protocols declare that conforming types must implement an initializer by including a protocol initializer declaration in the body of the protocol declaration. Protocol initializer declarations have the same form as initializer declarations, except they don’t include the initializer’s body."}],"type":"paragraph"},{"inlineContent":[{"text":"A conforming type can satisfy a nonfailable protocol initializer requirement by implementing a nonfailable initializer or an ","type":"text"},{"code":"init!","type":"codeVoice"},{"text":" failable initializer. A conforming type can satisfy a failable protocol initializer requirement by implementing any kind of initializer.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"When a class implements an initializer to satisfy a protocol’s initializer requirement, the initializer must be marked with the ","type":"text"},{"code":"required","type":"codeVoice"},{"text":" declaration modifier if the class isn’t already marked with the ","type":"text"},{"code":"final","type":"codeVoice"},{"text":" declaration modifier.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"See also ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Initializer-Declaration","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of a protocol initializer declaration","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"type":"aside","style":"note"},{"text":"Protocol Subscript Declaration","anchor":"Protocol-Subscript-Declaration","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Protocols declare that conforming types must implement a subscript by including a protocol subscript declaration in the body of the protocol declaration. Protocol subscript declarations have a special form of a subscript declaration:"}],"type":"paragraph"},{"syntax":"swift","code":["subscript (parameters) -> return type { get set }"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Subscript declarations only declare the minimum getter and setter implementation requirements for types that conform to the protocol. If the subscript declaration includes both the "},{"code":"get","type":"codeVoice"},{"type":"text","text":" and "},{"code":"set","type":"codeVoice"},{"type":"text","text":" keywords, a conforming type must implement both a getter and a setter clause. If the subscript declaration includes only the "},{"code":"get","type":"codeVoice"},{"type":"text","text":" keyword, a conforming type must implement "},{"inlineContent":[{"text":"at least","type":"text"}],"type":"emphasis"},{"type":"text","text":" a getter clause and optionally can implement a setter clause."}],"type":"paragraph"},{"inlineContent":[{"text":"To declare a static subscript requirement in a protocol declaration, mark the subscript declaration with the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" declaration modifier. Structures and enumerations that conform to the protocol declare the subscript with the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" keyword, and classes that conform to the protocol declare the subscript with either the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" keyword. Extensions that add protocol conformance to a structure, enumeration, or class use the same keyword as the type they extend uses. Extensions that provide a default implementation for a static subscript requirement use the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" keyword.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"See also ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Subscript-Declaration","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of a protocol subscript declaration","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"type":"aside","style":"note"},{"text":"Protocol Associated Type Declaration","anchor":"Protocol-Associated-Type-Declaration","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Protocols declare associated types using the "},{"type":"codeVoice","code":"associatedtype"},{"type":"text","text":" keyword. An associated type provides an alias for a type that’s used as part of a protocol’s declaration. Associated types are similar to type parameters in generic parameter clauses, but they’re associated with "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" in the protocol in which they’re declared. In that context, "},{"type":"codeVoice","code":"Self"},{"type":"text","text":" refers to the eventual type that conforms to the protocol. For more information and examples, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Associated-Types"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You use a generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause in a protocol declaration to add constraints to an associated types inherited from another protocol, without redeclaring the associated types. For example, the declarations of "},{"type":"codeVoice","code":"SubProtocol"},{"type":"text","text":" below are equivalent:"}],"type":"paragraph"},{"syntax":"swift","code":["protocol SomeProtocol {","    associatedtype SomeType","}","","protocol SubProtocolA: SomeProtocol {","    \/\/ This syntax produces a warning.","    associatedtype SomeType: Equatable","}","","\/\/ This syntax is preferred.","protocol SubProtocolB: SomeProtocol where SomeType: Equatable { }"],"type":"codeListing"},{"inlineContent":[{"text":"See also ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Type-Alias-Declaration","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of a protocol associated type declaration","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"type":"aside","style":"note"},{"text":"Initializer Declaration","anchor":"Initializer-Declaration","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"text":"initializer declaration","type":"text"}]},{"type":"text","text":" introduces an initializer for a class, structure, or enumeration into your program. Initializer declarations are declared using the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword and have two basic forms."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Structure, enumeration, and class types can have any number of initializers, but the rules and associated behavior for class initializers are different. Unlike structures and enumerations, classes have two kinds of initializers: designated initializers and convenience initializers, as described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following form declares initializers for structures, enumerations, and designated initializers of classes:"}],"type":"paragraph"},{"syntax":"swift","code":["init(parameters) {","    statements","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"A designated initializer of a class initializes all of the class’s properties directly. It can’t call any other initializers of the same class, and if the class has a superclass, it must call one of the superclass’s designated initializers. If the class inherits any properties from its superclass, one of the superclass’s designated initializers must be called before any of these properties can be set or modified in the current class."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Designated initializers can be declared in the context of a class declaration only and therefore can’t be added to a class using an extension declaration."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Initializers in structures and enumerations can call other declared initializers to delegate part or all of the initialization process."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To declare convenience initializers for a class, mark the initializer declaration with the "},{"type":"codeVoice","code":"convenience"},{"type":"text","text":" declaration modifier."}],"type":"paragraph"},{"syntax":"swift","code":["convenience init(parameters) {","    statements","}"],"type":"codeListing"},{"inlineContent":[{"text":"Convenience initializers can delegate the initialization process to another convenience initializer or to one of the class’s designated initializers. That said, the initialization processes must end with a call to a designated initializer that ultimately initializes the class’s properties. Convenience initializers can’t call a superclass’s initializers.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can mark designated and convenience initializers with the "},{"code":"required","type":"codeVoice"},{"type":"text","text":" declaration modifier to require that every subclass implement the initializer. A subclass’s implementation of that initializer must also be marked with the "},{"code":"required","type":"codeVoice"},{"type":"text","text":" declaration modifier."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"By default, initializers declared in a superclass aren’t inherited by subclasses. That said, if a subclass initializes all of its stored properties with default values and doesn’t define any initializers of its own, it inherits all of the superclass’s initializers. If the subclass overrides all of the superclass’s designated initializers, it inherits the superclass’s convenience initializers."}],"type":"paragraph"},{"inlineContent":[{"text":"As with methods, properties, and subscripts, you need to mark overridden designated initializers with the ","type":"text"},{"code":"override","type":"codeVoice"},{"text":" declaration modifier.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you mark an initializer with the ","type":"text"},{"code":"required","type":"codeVoice"},{"text":" declaration modifier, you don’t also mark the initializer with the ","type":"text"},{"code":"override","type":"codeVoice"},{"text":" modifier when you override the required initializer in a subclass.","type":"text"}]}],"type":"aside","style":"note"},{"inlineContent":[{"text":"Just like functions and methods, initializers can throw or rethrow errors. And just like functions and methods, you use the ","type":"text"},{"type":"codeVoice","code":"throws"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"rethrows"},{"text":" keyword after an initializer’s parameters to indicate the appropriate behavior. Likewise, initializers can be asynchronous, and you use the ","type":"text"},{"type":"codeVoice","code":"async"},{"text":" keyword to indicate this.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To see examples of initializers in various type declarations, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Failable Initializers","anchor":"Failable-Initializers","type":"heading","level":3},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"failable initializer","type":"text"}],"type":"emphasis"},{"text":" is a type of initializer that produces an optional instance or an implicitly unwrapped optional instance of the type the initializer is declared on. As a result, a failable initializer can return ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" to indicate that initialization failed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To declare a failable initializer that produces an optional instance, append a question mark to the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword in the initializer declaration ("},{"type":"codeVoice","code":"init?"},{"type":"text","text":"). To declare a failable initializer that produces an implicitly unwrapped optional instance, append an exclamation point instead ("},{"type":"codeVoice","code":"init!"},{"type":"text","text":"). The example below shows an "},{"type":"codeVoice","code":"init?"},{"type":"text","text":" failable initializer that produces an optional instance of a structure."}],"type":"paragraph"},{"syntax":"swift","code":["struct SomeStruct {","    let property: String","    \/\/ produces an optional instance of 'SomeStruct'","    init?(input: String) {","        if input.isEmpty {","            \/\/ discard 'self' and return 'nil'","            return nil","        }","        property = input","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"You call an ","type":"text"},{"type":"codeVoice","code":"init?"},{"text":" failable initializer in the same way that you call a nonfailable initializer, except that you must deal with the optionality of the result.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["if let actualInstance = SomeStruct(input: \"Hello\") {","    \/\/ do something with the instance of 'SomeStruct'","} else {","    \/\/ initialization of 'SomeStruct' failed and the initializer returned 'nil'","}"],"type":"codeListing"},{"inlineContent":[{"text":"A failable initializer can return ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" at any point in the implementation of the initializer’s body.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A failable initializer can delegate to any kind of initializer. A nonfailable initializer can delegate to another nonfailable initializer or to an "},{"type":"codeVoice","code":"init!"},{"type":"text","text":" failable initializer. A nonfailable initializer can delegate to an "},{"type":"codeVoice","code":"init?"},{"type":"text","text":" failable initializer by force-unwrapping the result of the superclass’s initializer—for example, by writing "},{"type":"codeVoice","code":"super.init()!"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Initialization failure propagates through initializer delegation. Specifically, if a failable initializer delegates to an initializer that fails and returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", then the initializer that delegated also fails and implicitly returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". If a nonfailable initializer delegates to an ","type":"text"},{"code":"init!","type":"codeVoice"},{"text":" failable initializer that fails and returns ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", then a runtime error is raised (as if you used the ","type":"text"},{"code":"!","type":"codeVoice"},{"text":" operator to unwrap an optional that has a ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A failable designated initializer can be overridden in a subclass by any kind of designated initializer. A nonfailable designated initializer can be overridden in a subclass by a nonfailable designated initializer only.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For more information and to see examples of failable initializers, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Failable-Initializers","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of an initializer declaration","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"text":"Deinitializer Declaration","anchor":"Deinitializer-Declaration","type":"heading","level":2},{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"deinitializer declaration","type":"text"}]},{"text":" declares a deinitializer for a class type. Deinitializers take no parameters and have the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["deinit {","    statements","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"A deinitializer is called automatically when there are no longer any references to a class object, just before the class object is deallocated. A deinitializer can be declared only in the body of a class declaration—but not in an extension of a class—and each class can have at most one."}],"type":"paragraph"},{"inlineContent":[{"text":"A subclass inherits its superclass’s deinitializer, which is implicitly called just before the subclass object is deallocated. The subclass object isn’t deallocated until all deinitializers in its inheritance chain have finished executing.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Deinitializers aren’t called directly."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For an example of how to use a deinitializer in a class declaration, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a deinitializer declaration","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"type":"aside","style":"note"},{"text":"Extension Declaration","anchor":"Extension-Declaration","type":"heading","level":2},{"inlineContent":[{"text":"An ","type":"text"},{"inlineContent":[{"type":"text","text":"extension declaration"}],"type":"emphasis"},{"text":" allows you to extend the behavior of existing types. Extension declarations are declared using the ","type":"text"},{"code":"extension","type":"codeVoice"},{"text":" keyword and have the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension type name where requirements {","    declarations","}"],"type":"codeListing"},{"inlineContent":[{"text":"The body of an extension declaration contains zero or more ","type":"text"},{"inlineContent":[{"type":"text","text":"declarations"}],"type":"emphasis"},{"text":". These ","type":"text"},{"inlineContent":[{"text":"declarations","type":"text"}],"type":"emphasis"},{"text":" can include computed properties, computed type properties, instance methods, type methods, initializers, subscript declarations, and even class, structure, and enumeration declarations. Extension declarations can’t contain deinitializer or protocol declarations, stored properties, property observers, or other extension declarations. Declarations in a protocol extension can’t be marked ","type":"text"},{"code":"final","type":"codeVoice"},{"text":". For a discussion and several examples of extensions that include various kinds of declarations, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If the ","type":"text"},{"inlineContent":[{"text":"type name","type":"text"}],"type":"emphasis"},{"text":" is a class, structure, or enumeration type, the extension extends that type. If the ","type":"text"},{"inlineContent":[{"text":"type name","type":"text"}],"type":"emphasis"},{"text":" is a protocol type, the extension extends all types that conform to that protocol.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Extension declarations that extend a generic type or a protocol with associated types can include "},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirements"}]},{"type":"text","text":". If an instance of the extended type or of a type that conforms to the extended protocol satisfies the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirements"}]},{"type":"text","text":", the instance gains the behavior specified in the declaration."}],"type":"paragraph"},{"inlineContent":[{"text":"Extension declarations can contain initializer declarations. That said, if the type you’re extending is defined in another module, an initializer declaration must delegate to an initializer already defined in that module to ensure members of that type are properly initialized.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Properties, methods, and initializers of an existing type can’t be overridden in an extension of that type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Extension declarations can add protocol conformance to an existing class, structure, or enumeration type by specifying ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted protocols"}]},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension type name: adopted protocols where requirements {","    declarations","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Extension declarations can’t add class inheritance to an existing class, and therefore you can specify only a list of protocols after the "},{"type":"emphasis","inlineContent":[{"text":"type name","type":"text"}]},{"type":"text","text":" and colon."}],"type":"paragraph"},{"text":"Conditional Conformance","anchor":"Conditional-Conformance","type":"heading","level":3},{"inlineContent":[{"text":"You can extend a generic type to conditionally conform to a protocol, so that instances of the type conform to the protocol only when certain requirements are met. You add conditional conformance to a protocol by including ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"requirements"}]},{"text":" in an extension declaration.","type":"text"}],"type":"paragraph"},{"text":"Overridden Requirements Aren’t Used in Some Generic Contexts","anchor":"Overridden-Requirements-Arent-Used-in-Some-Generic-Contexts","type":"heading","level":4},{"inlineContent":[{"text":"In some generic contexts, types that get behavior from conditional conformance to a protocol don’t always use the specialized implementations of that protocol’s requirements. To illustrate this behavior, the following example defines two protocols and a generic type that conditionally conforms to both protocols.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["protocol Loggable {","    func log()","}","extension Loggable {","    func log() {","        print(self)","    }","}","","protocol TitledLoggable: Loggable {","    static var logTitle: String { get }","}","extension TitledLoggable {","    func log() {","        print(\"\\(Self.logTitle): \\(self)\")","    }","}","","struct Pair<T>: CustomStringConvertible {","    let first: T","    let second: T","    var description: String {","        return \"(\\(first), \\(second))\"","    }","}","","extension Pair: Loggable where T: Loggable { }","extension Pair: TitledLoggable where T: TitledLoggable {","    static var logTitle: String {","        return \"Pair of '\\(T.logTitle)'\"","    }","}","","extension String: TitledLoggable {","    static var logTitle: String {","        return \"String\"","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Pair","type":"codeVoice"},{"text":" structure conforms to ","type":"text"},{"code":"Loggable","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"TitledLoggable","type":"codeVoice"},{"text":" whenever its generic type conforms to ","type":"text"},{"code":"Loggable","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"TitledLoggable","type":"codeVoice"},{"text":", respectively. In the example below, ","type":"text"},{"code":"oneAndTwo","type":"codeVoice"},{"text":" is an instance of ","type":"text"},{"code":"Pair<String>","type":"codeVoice"},{"text":", which conforms to ","type":"text"},{"code":"TitledLoggable","type":"codeVoice"},{"text":" because ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"TitledLoggable","type":"codeVoice"},{"text":". When the ","type":"text"},{"code":"log()","type":"codeVoice"},{"text":" method is called on ","type":"text"},{"code":"oneAndTwo","type":"codeVoice"},{"text":" directly, the specialized version containing the title string is used.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let oneAndTwo = Pair(first: \"one\", second: \"two\")","oneAndTwo.log()","\/\/ Prints \"Pair of 'String': (one, two)\""],"type":"codeListing"},{"inlineContent":[{"text":"However, when ","type":"text"},{"code":"oneAndTwo","type":"codeVoice"},{"text":" is used in a generic context or as an instance of the ","type":"text"},{"code":"Loggable","type":"codeVoice"},{"text":" protocol, the specialized version isn’t used. Swift picks which implementation of ","type":"text"},{"code":"log()","type":"codeVoice"},{"text":" to call by consulting only the minimum requirements that ","type":"text"},{"code":"Pair","type":"codeVoice"},{"text":" needs to conform to ","type":"text"},{"code":"Loggable","type":"codeVoice"},{"text":". For this reason, the default implementation provided by the ","type":"text"},{"code":"Loggable","type":"codeVoice"},{"text":" protocol is used instead.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func doSomething<T: Loggable>(with x: T) {","    x.log()","}","doSomething(with: oneAndTwo)","\/\/ Prints \"(one, two)\""],"type":"codeListing"},{"inlineContent":[{"text":"When ","type":"text"},{"code":"log()","type":"codeVoice"},{"text":" is called on the instance that’s passed to ","type":"text"},{"code":"doSomething(_:)","type":"codeVoice"},{"text":", the customized title is omitted from the logged string.","type":"text"}],"type":"paragraph"},{"text":"Protocol Conformance Must Not Be Redundant","anchor":"Protocol-Conformance-Must-Not-Be-Redundant","type":"heading","level":3},{"inlineContent":[{"text":"A concrete type can conform to a particular protocol only once. Swift marks redundant protocol conformances as an error. You’re likely to encounter this kind of error in two kinds of situations. The first situation is when you explicitly conform to the same protocol multiple times, but with different requirements. The second situation is when you implicitly inherit from the same protocol multiple times. These situations are discussed in the sections below.","type":"text"}],"type":"paragraph"},{"text":"Resolving Explicit Redundancy","anchor":"Resolving-Explicit-Redundancy","type":"heading","level":4},{"inlineContent":[{"text":"Multiple extensions on a concrete type can’t add conformance to the same protocol, even if the extensions’ requirements are mutually exclusive. This restriction is demonstrated in the example below. Two extension declarations attempt to add conditional conformance to the ","type":"text"},{"code":"Serializable","type":"codeVoice"},{"text":" protocol, one for for arrays with ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" elements, and one for arrays with ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" elements.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["protocol Serializable {","    func serialize() -> Any","}","","extension Array: Serializable where Element == Int {","    func serialize() -> Any {","        \/\/ implementation","    }","}","extension Array: Serializable where Element == String {","    func serialize() -> Any {","        \/\/ implementation","    }","}","\/\/ Error: redundant conformance of 'Array<Element>' to protocol 'Serializable'"],"type":"codeListing"},{"inlineContent":[{"text":"If you need to add conditional conformance based on multiple concrete types, create a new protocol that each type can conform to and use that protocol as the requirement when declaring conditional conformance.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["protocol SerializableInArray { }","extension Int: SerializableInArray { }","extension String: SerializableInArray { }","","extension Array: Serializable where Element: SerializableInArray {","    func serialize() -> Any {","        \/\/ implementation","    }","}"],"type":"codeListing"},{"text":"Resolving Implicit Redundancy","anchor":"Resolving-Implicit-Redundancy","type":"heading","level":4},{"inlineContent":[{"type":"text","text":"When a concrete type conditionally conforms to a protocol, that type implicitly conforms to any parent protocols with the same requirements."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you need a type to conditionally conform to two protocols that inherit from a single parent, explicitly declare conformance to the parent protocol. This avoids implicitly conforming to the parent protocol twice with different requirements."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example explicitly declares the conditional conformance of "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" to "},{"code":"Loggable","type":"codeVoice"},{"type":"text","text":" to avoid a conflict when declaring its conditional conformance to both "},{"code":"TitledLoggable","type":"codeVoice"},{"type":"text","text":" and the new "},{"code":"MarkedLoggable","type":"codeVoice"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"syntax":"swift","code":["protocol MarkedLoggable: Loggable {","    func markAndLog()","}","","extension MarkedLoggable {","    func markAndLog() {","        print(\"----------\")","        log()","    }","}","","extension Array: Loggable where Element: Loggable { }","extension Array: TitledLoggable where Element: TitledLoggable {","    static var logTitle: String {","        return \"Array of '\\(Element.logTitle)'\"","    }","}","extension Array: MarkedLoggable where Element: MarkedLoggable { }"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Without the extension to explicitly declare conditional conformance to "},{"type":"codeVoice","code":"Loggable"},{"type":"text","text":", the other "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" extensions would implicitly create these declarations, resulting in an error:"}],"type":"paragraph"},{"syntax":"swift","code":["extension Array: Loggable where Element: TitledLoggable { }","extension Array: Loggable where Element: MarkedLoggable { }","\/\/ Error: redundant conformance of 'Array<Element>' to protocol 'Loggable'"],"type":"codeListing"},{"name":"Grammar of an extension declaration","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"type":"aside","style":"note"},{"text":"Subscript Declaration","anchor":"Subscript-Declaration","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscript"}]},{"type":"text","text":" declaration allows you to add subscripting support for objects of a particular type and are typically used to provide a convenient syntax for accessing the elements in a collection, list, or sequence. Subscript declarations are declared using the "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":" keyword and have the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["subscript (parameters) -> return type {","    get {","        statements","    }","    set(setter name) {","        statements","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Subscript declarations can appear only in the context of a class, structure, enumeration, extension, or protocol declaration.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"parameters","type":"text"}],"type":"emphasis"},{"text":" specify one or more indexes used to access elements of the corresponding type in a subscript expression (for example, the ","type":"text"},{"code":"i","type":"codeVoice"},{"text":" in the expression ","type":"text"},{"code":"object[i]","type":"codeVoice"},{"text":"). Although the indexes used to access the elements can be of any type, each parameter must include a type annotation to specify the type of each index. The ","type":"text"},{"inlineContent":[{"text":"return type","type":"text"}],"type":"emphasis"},{"text":" specifies the type of the element being accessed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As with computed properties, subscript declarations support reading and writing the value of the accessed elements. The getter is used to read the value, and the setter is used to write the value. The setter clause is optional, and when only a getter is needed, you can omit both clauses and simply return the requested value directly. That said, if you provide a setter clause, you must also provide a getter clause."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"setter name"}],"type":"emphasis"},{"text":" and enclosing parentheses are optional. If you provide a setter name, it’s used as the name of the parameter to the setter. If you don’t provide a setter name, the default parameter name to the setter is ","type":"text"},{"code":"value","type":"codeVoice"},{"text":". The type of the parameter to the setter is the same as the ","type":"text"},{"inlineContent":[{"text":"return type","type":"text"}],"type":"emphasis"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can overload a subscript declaration in the type in which it’s declared, as long as the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"parameters"}]},{"type":"text","text":" or the "},{"type":"emphasis","inlineContent":[{"text":"return type","type":"text"}]},{"type":"text","text":" differ from the one you’re overloading. You can also override a subscript declaration inherited from a superclass. When you do so, you must mark the overridden subscript declaration with the "},{"code":"override","type":"codeVoice"},{"type":"text","text":" declaration modifier."}],"type":"paragraph"},{"inlineContent":[{"text":"Subscript parameters follow the same rules as function parameters, with two exceptions. By default, the parameters used in subscripting don’t have argument labels, unlike functions, methods, and initializers. However, you can provide explicit argument labels using the same syntax that functions, methods, and initializers use. In addition, subscripts can’t have in-out parameters. A subscript parameter can have a default value, using the syntax described in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Special-Kinds-of-Parameters"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can also declare subscripts in the context of a protocol declaration, as described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Subscript-Declaration","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For more information about subscripting and to see examples of subscript declarations, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Type Subscript Declarations","anchor":"Type-Subscript-Declarations","type":"heading","level":3},{"inlineContent":[{"text":"To declare a subscript that’s exposed by the type, rather than by instances of the type, mark the subscript declaration with the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" declaration modifier. Classes can mark type computed properties with the ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" declaration modifier instead to allow subclasses to override the superclass’s implementation. In a class declaration, the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" keyword has the same effect as marking the declaration with both the ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"final","type":"codeVoice"},{"text":" declaration modifiers.","type":"text"}],"type":"paragraph"},{"name":"Grammar of a subscript declaration","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"text":"Operator Declaration","anchor":"Operator-Declaration","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"text":"operator declaration","type":"text"}]},{"type":"text","text":" introduces a new infix, prefix, or postfix operator into your program and is declared using the "},{"type":"codeVoice","code":"operator"},{"type":"text","text":" keyword."}],"type":"paragraph"},{"inlineContent":[{"text":"You can declare operators of three different fixities: infix, prefix, and postfix. The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"fixity"}]},{"text":" of an operator specifies the relative position of an operator to its operands.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are three basic forms of an operator declaration, one for each fixity. The fixity of the operator is specified by marking the operator declaration with the "},{"code":"infix","type":"codeVoice"},{"type":"text","text":", "},{"code":"prefix","type":"codeVoice"},{"type":"text","text":", or "},{"code":"postfix","type":"codeVoice"},{"type":"text","text":" declaration modifier before the "},{"code":"operator","type":"codeVoice"},{"type":"text","text":" keyword. In each form, the name of the operator can contain only the operator characters defined in "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Operators","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following form declares a new infix operator:"}],"type":"paragraph"},{"syntax":"swift","code":["infix operator operator name: precedence group"],"type":"codeListing"},{"inlineContent":[{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"infix operator"}]},{"text":" is a binary operator that’s written between its two operands, such as the familiar addition operator (","type":"text"},{"code":"+","type":"codeVoice"},{"text":") in the expression ","type":"text"},{"code":"1 + 2","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Infix operators can optionally specify a precedence group. If you omit the precedence group for an operator, Swift uses the default precedence group, "},{"code":"DefaultPrecedence","type":"codeVoice"},{"type":"text","text":", which specifies a precedence just higher than "},{"code":"TernaryPrecedence","type":"codeVoice"},{"type":"text","text":". For more information, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Precedence-Group-Declaration","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following form declares a new prefix operator:"}],"type":"paragraph"},{"syntax":"swift","code":["prefix operator operator name"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"prefix operator"}]},{"type":"text","text":" is a unary operator that’s written immediately before its operand, such as the prefix logical NOT operator ("},{"code":"!","type":"codeVoice"},{"type":"text","text":") in the expression "},{"code":"!a","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Prefix operators declarations don’t specify a precedence level. Prefix operators are nonassociative.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following form declares a new postfix operator:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["postfix operator operator name"],"type":"codeListing"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"postfix operator"}],"type":"emphasis"},{"text":" is a unary operator that’s written immediately after its operand, such as the postfix forced-unwrap operator (","type":"text"},{"code":"!","type":"codeVoice"},{"text":") in the expression ","type":"text"},{"code":"a!","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As with prefix operators, postfix operator declarations don’t specify a precedence level. Postfix operators are nonassociative."}],"type":"paragraph"},{"inlineContent":[{"text":"After declaring a new operator, you implement it by declaring a static method that has the same name as the operator. The static method is a member of one of the types whose values the operator takes as an argument—for example, an operator that multiplies a ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" by an ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" is implemented as a static method on either the ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" structure. If you’re implementing a prefix or postfix operator, you must also mark that method declaration with the corresponding ","type":"text"},{"code":"prefix","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"postfix","type":"codeVoice"},{"text":" declaration modifier. To see an example of how to create and implement a new operator, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Custom-Operators","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of an operator declaration","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"type":"aside","style":"note"},{"text":"Precedence Group Declaration","anchor":"Precedence-Group-Declaration","type":"heading","level":2},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"precedence group declaration"}],"type":"emphasis"},{"text":" introduces a new grouping for infix operator precedence into your program. The precedence of an operator specifies how tightly the operator binds to its operands, in the absence of grouping parentheses.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A precedence group declaration has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["precedencegroup precedence group name {","    higherThan: lower group names","    lowerThan: higher group names","    associativity: associativity","    assignment: assignment","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"lower group names"}],"type":"emphasis"},{"type":"text","text":" and "},{"inlineContent":[{"text":"higher group names","type":"text"}],"type":"emphasis"},{"type":"text","text":" lists specify the new precedence group’s relation to existing precedence groups. The "},{"type":"codeVoice","code":"lowerThan"},{"type":"text","text":" precedence group attribute may only be used to refer to precedence groups declared outside of the current module. When two operators compete with each other for their operands, such as in the expression "},{"type":"codeVoice","code":"2 + 3 * 5"},{"type":"text","text":", the operator with the higher relative precedence binds more tightly to its operands."}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Precedence groups related to each other using "},{"inlineContent":[{"text":"lower group names","type":"text"}],"type":"emphasis"},{"type":"text","text":" and "},{"inlineContent":[{"text":"higher group names","type":"text"}],"type":"emphasis"},{"type":"text","text":" must fit into a single relational hierarchy, but they "},{"inlineContent":[{"type":"text","text":"don’t"}],"type":"emphasis"},{"type":"text","text":" have to form a linear hierarchy. This means it’s possible to have precedence groups with undefined relative precedence. Operators from those precedence groups can’t be used next to each other without grouping parentheses."}]}],"type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"Swift defines numerous precedence groups to go along with the operators provided by the standard library. For example, the addition ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") and subtraction ("},{"type":"codeVoice","code":"-"},{"type":"text","text":") operators belong to the "},{"type":"codeVoice","code":"AdditionPrecedence"},{"type":"text","text":" group, and the multiplication ("},{"type":"codeVoice","code":"*"},{"type":"text","text":") and division ("},{"type":"codeVoice","code":"\/"},{"type":"text","text":") operators belong to the "},{"type":"codeVoice","code":"MultiplicationPrecedence"},{"type":"text","text":" group. For a complete list of precedence groups provided by the Swift standard library, see "},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","isActive":true,"type":"reference"},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations]"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"associativity","type":"text"}],"type":"emphasis"},{"text":" of an operator specifies how a sequence of operators with the same precedence level are grouped together in the absence of grouping parentheses. You specify the associativity of an operator by writing one of the context-sensitive keywords ","type":"text"},{"code":"left","type":"codeVoice"},{"text":", ","type":"text"},{"code":"right","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"none","type":"codeVoice"},{"text":"—if your omit the associativity, the default is ","type":"text"},{"code":"none","type":"codeVoice"},{"text":". Operators that are left-associative group left-to-right. For example, the subtraction operator (","type":"text"},{"code":"-","type":"codeVoice"},{"text":") is left-associative, so the expression ","type":"text"},{"code":"4 - 5 - 6","type":"codeVoice"},{"text":" is grouped as ","type":"text"},{"code":"(4 - 5) - 6","type":"codeVoice"},{"text":" and evaluates to ","type":"text"},{"code":"-7","type":"codeVoice"},{"text":". Operators that are right-associative group right-to-left, and operators that are specified with an associativity of ","type":"text"},{"code":"none","type":"codeVoice"},{"text":" don’t associate at all. Nonassociative operators of the same precedence level can’t appear adjacent to each to other. For example, the ","type":"text"},{"code":"<","type":"codeVoice"},{"text":" operator has an associativity of ","type":"text"},{"code":"none","type":"codeVoice"},{"text":", which means ","type":"text"},{"code":"1 < 2 < 3","type":"codeVoice"},{"text":" isn’t a valid expression.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"assignment"}],"type":"emphasis"},{"text":" of a precedence group specifies the precedence of an operator when used in an operation that includes optional chaining. When set to ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", an operator in the corresponding precedence group uses the same grouping rules during optional chaining as the assignment operators from the standard library. Otherwise, when set to ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" or omitted, operators in the precedence group follows the same optional chaining rules as operators that don’t perform assignment.","type":"text"}],"type":"paragraph"},{"name":"Grammar of a precedence group declaration","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"text":"Declaration Modifiers","anchor":"Declaration-Modifiers","type":"heading","level":2},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Declaration modifiers","type":"text"}]},{"text":" are keywords or context-sensitive keywords that modify the behavior or meaning of a declaration. You specify a declaration modifier by writing the appropriate keyword or context-sensitive keyword between a declaration’s attributes (if any) and the keyword that introduces the declaration.","type":"text"}],"type":"paragraph"},{"items":[{"definition":{"content":[{"inlineContent":[{"text":"Apply this modifier to a member of a class to indicate that the member is a member of the class itself, rather than a member of instances of the class. Members of a superclass that have this modifier and don’t have the ","type":"text"},{"code":"final","type":"codeVoice"},{"text":" modifier can be overridden by subclasses.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"code":"class","type":"codeVoice"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this modifier to any member of a class that can be represented by Objective-C. When you mark a member declaration with the "},{"type":"codeVoice","code":"dynamic"},{"type":"text","text":" modifier, access to that member is always dynamically dispatched using the Objective-C runtime. Access to that member is never inlined or devirtualized by the compiler."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because declarations marked with the "},{"code":"dynamic","type":"codeVoice"},{"type":"text","text":" modifier are dispatched using the Objective-C runtime, they must be marked with the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute."}]}]},"term":{"inlineContent":[{"code":"dynamic","type":"codeVoice"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this modifier to a class or to a property, method, or subscript member of a class. It’s applied to a class to indicate that the class can’t be subclassed. It’s applied to a property, method, or subscript of a class to indicate that a class member can’t be overridden in any subclass. For an example of how to use the "},{"type":"codeVoice","code":"final"},{"type":"text","text":" attribute, see "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance#Preventing-Overrides","isActive":true},{"type":"text","text":"."}]}]},"term":{"inlineContent":[{"code":"final","type":"codeVoice"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Apply this modifier to a stored variable property of a class or structure to indicate that the property’s initial value is calculated and stored at most once, when the property is first accessed. For an example of how to use the ","type":"text"},{"code":"lazy","type":"codeVoice"},{"text":" modifier, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Lazy-Stored-Properties","type":"reference","isActive":true},{"text":".","type":"text"}]}]},"term":{"inlineContent":[{"code":"lazy","type":"codeVoice"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this modifier to a protocol’s property, method, or subscript members to indicate that a conforming type isn’t required to implement those members."}]},{"type":"paragraph","inlineContent":[{"text":"You can apply the ","type":"text"},{"code":"optional","type":"codeVoice"},{"text":" modifier only to protocols that are marked with the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute. As a result, only class types can adopt and conform to a protocol that contains optional member requirements. For more information about how to use the ","type":"text"},{"code":"optional","type":"codeVoice"},{"text":" modifier and for guidance about how to access optional protocol members—for example, when you’re not sure whether a conforming type implements them—see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Optional-Protocol-Requirements"},{"text":".","type":"text"}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"optional"}]}},{"definition":{"content":[{"inlineContent":[{"text":"Apply this modifier to a designated or convenience initializer of a class to indicate that every subclass must implement that initializer. The subclass’s implementation of that initializer must also be marked with the ","type":"text"},{"code":"required","type":"codeVoice"},{"text":" modifier.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"codeVoice","code":"required"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this modifier to a member of a structure, class, enumeration, or protocol to indicate that the member is a member of the type, rather than a member of instances of that type. In the scope of a class declaration, writing the "},{"code":"static","type":"codeVoice"},{"type":"text","text":" modifier on a member declaration has the same effect as writing the "},{"code":"class","type":"codeVoice"},{"type":"text","text":" and "},{"code":"final","type":"codeVoice"},{"type":"text","text":" modifiers on that member declaration. However, constant type properties of a class are an exception: "},{"code":"static","type":"codeVoice"},{"type":"text","text":" has its normal, nonclass meaning there because you can’t write "},{"code":"class","type":"codeVoice"},{"type":"text","text":" or "},{"code":"final","type":"codeVoice"},{"type":"text","text":" on those declarations."}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"static"}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"Apply this modifier to a stored variable, constant, or stored property to indicate that the variable or property has an unowned reference to the object stored as its value. If you try to access the variable or property after the object has been deallocated, a runtime error is raised. Like a weak reference, the type of the property or value must be a class type; unlike a weak reference, the type is non-optional. For an example and more information about the "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" modifier, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Unowned-References","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"codeVoice","code":"unowned"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"An explicit spelling of ","type":"text"},{"code":"unowned","type":"codeVoice"},{"text":".","type":"text"}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"unowned(safe)"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this modifier to a stored variable, constant, or stored property to indicate that the variable or property has an unowned reference to the object stored as its value. If you try to access the variable or property after the object has been deallocated, you’ll access the memory at the location where the object used to be, which is a memory-unsafe operation. Like a weak reference, the type of the property or value must be a class type; unlike a weak reference, the type is non-optional. For an example and more information about the "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" modifier, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Unowned-References"},{"type":"text","text":"."}]}]},"term":{"inlineContent":[{"code":"unowned(unsafe)","type":"codeVoice"}]}},{"definition":{"content":[{"inlineContent":[{"text":"Apply this modifier to a stored variable or stored variable property to indicate that the variable or property has a weak reference to the object stored as its value. The type of the variable or property must be an optional class type. If you access the variable or property after the object has been deallocated, its value is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". For an example and more information about the ","type":"text"},{"code":"weak","type":"codeVoice"},{"text":" modifier, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Weak-References","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"code":"weak","type":"codeVoice"}]}}],"type":"termList"},{"text":"Access Control Levels","anchor":"Access-Control-Levels","type":"heading","level":3},{"inlineContent":[{"text":"Swift provides five levels of access control: open, public, internal, file private, and private. You can mark a declaration with one of the access-level modifiers below to specify the declaration’s access level. Access control is discussed in detail in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"items":[{"definition":{"content":[{"inlineContent":[{"text":"Apply this modifier to a declaration to indicate the declaration can be accessed and subclassed by code in the same module as the declaration. Declarations marked with the ","type":"text"},{"code":"open","type":"codeVoice"},{"text":" access-level modifier can also be accessed and subclassed by code in a module that imports the module that contains that declaration.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"code":"open","type":"codeVoice"}]}},{"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Apply this modifier to a declaration to indicate the declaration can be accessed and subclassed by code in the same module as the declaration. Declarations marked with the ","type":"text"},{"type":"codeVoice","code":"public"},{"text":" access-level modifier can also be accessed (but not subclassed) by code in a module that imports the module that contains that declaration.","type":"text"}]}]},"term":{"inlineContent":[{"type":"codeVoice","code":"public"}]}},{"definition":{"content":[{"inlineContent":[{"text":"Apply this modifier to a declaration to indicate the declaration can be accessed only by code in the same module as the declaration. By default, most declarations are implicitly marked with the ","type":"text"},{"type":"codeVoice","code":"internal"},{"text":" access-level modifier.","type":"text"}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"codeVoice","code":"internal"}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"Apply this modifier to a declaration to indicate the declaration can be accessed only by code in the same source file as the declaration."}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"codeVoice","code":"fileprivate"}]}},{"definition":{"content":[{"inlineContent":[{"type":"text","text":"Apply this modifier to a declaration to indicate the declaration can be accessed only by code within the declaration’s immediate enclosing scope."}],"type":"paragraph"}]},"term":{"inlineContent":[{"type":"codeVoice","code":"private"}]}}],"type":"termList"},{"inlineContent":[{"type":"text","text":"For the purpose of access control, extensions to the same type that are in the same file share an access-control scope. If the type they extend is also in the same file, they share the type’s access-control scope. Private members declared in the type’s declaration can be accessed from extensions, and private members declared in one extension can be accessed from other extensions and from the type’s declaration."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Each access-level modifier above optionally accepts a single argument, which consists of the "},{"type":"codeVoice","code":"set"},{"type":"text","text":" keyword enclosed in parentheses (for example, "},{"type":"codeVoice","code":"private(set)"},{"type":"text","text":"). Use this form of an access-level modifier when you want to specify an access level for the setter of a variable or subscript that’s less than or equal to the access level of the variable or subscript itself, as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Getters-and-Setters"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a declaration modifier","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}],"type":"aside","style":"note"}]}],"variants":[{"paths":["\/documentation\/swift\/declarations"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"references":{"doc://com.apple.Swift/documentation/Swift/Declarations#Extension-Declaration":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Extension-Declaration","abstract":[],"title":"Extension Declaration","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Extension-Declaration"},"doc://com.apple.Swift/documentation/Swift/Inheritance#Preventing-Overrides":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance#Preventing-Overrides","abstract":[],"title":"Preventing Overrides","kind":"section","type":"topic","url":"\/documentation\/swift\/inheritance#Preventing-Overrides"},"doc://com.apple.Swift/documentation/Swift/Extensions":{"role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"retroactive modeling","type":"text"}]},{"type":"text","text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","kind":"article","url":"\/documentation\/swift\/extensions","title":"Extensions"},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"title":"Memory Safety","url":"\/documentation\/swift\/memorysafety","abstract":[{"text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Protocols#Optional-Protocol-Requirements":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Optional-Protocol-Requirements","abstract":[],"title":"Optional Protocol Requirements","kind":"section","type":"topic","url":"\/documentation\/swift\/protocols#Optional-Protocol-Requirements"},"doc://com.apple.Swift/documentation/Swift/Declarations#Function-Declaration":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Function-Declaration","abstract":[],"title":"Function Declaration","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Function-Declaration"},"doc://com.apple.Swift/documentation/Swift/Subscripts":{"title":"Subscripts","url":"\/documentation\/swift\/subscripts","abstract":[{"text":"Classes, structures, and enumerations can define ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"subscripts","type":"text"}]},{"text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" instance as "},{"code":"someArray[index]","type":"codeVoice"},{"type":"text","text":" and elements in a "},{"code":"Dictionary","type":"codeVoice"},{"text":" instance as ","type":"text"},{"type":"codeVoice","code":"someDictionary[key]"},{"text":".","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Protocols#Protocol-Composition":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocol-Composition","abstract":[],"title":"Protocol Composition","kind":"section","type":"topic","url":"\/documentation\/swift\/protocols#Protocol-Composition"},"doc://com.apple.Swift/documentation/Swift/Attributes#dynamicMemberLookup":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#dynamicMemberLookup","abstract":[],"title":"dynamicMemberLookup","kind":"section","type":"topic","url":"\/documentation\/swift\/attributes#dynamicMemberLookup"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures#Accessing-Properties":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Accessing-Properties","abstract":[],"title":"Accessing Properties","kind":"section","type":"topic","url":"\/documentation\/swift\/classesandstructures#Accessing-Properties"},"https://developer.apple.com/documentation/swift/operator_declarations":{"titleInlineContent":[{"text":"Operator Declarations","type":"text"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","title":"Operator Declarations","type":"link","url":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting#Unowned-References":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Unowned-References","abstract":[],"title":"Unowned References","kind":"section","type":"topic","url":"\/documentation\/swift\/automaticreferencecounting#Unowned-References"},"doc://com.apple.Swift/documentation/Swift/Declarations#Type-Alias-Declaration":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Type-Alias-Declaration","abstract":[],"title":"Type Alias Declaration","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Type-Alias-Declaration"},"doc://com.apple.Swift/documentation/Swift/Declarations#In-Out-Parameters":{"type":"topic","kind":"section","title":"In-Out Parameters","url":"\/documentation\/swift\/declarations#In-Out-Parameters","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#In-Out-Parameters","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Attributes":{"abstract":[{"text":"There are two kinds of attributes in Swift—those that apply to declarations and those that apply to types. An attribute provides additional information about the declaration or type. For example, the ","type":"text"},{"type":"codeVoice","code":"discardableResult"},{"text":" attribute on a function declaration indicates that, although the function returns a value, the compiler shouldn’t generate a warning if the return value is unused.","type":"text"}],"url":"\/documentation\/swift\/attributes","role":"article","title":"Attributes","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure":{"abstract":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"lexical structure","type":"text"}]},{"text":" of Swift describes what sequence of characters form valid tokens of the language. These valid tokens form the lowest-level building blocks of the language and are used to describe the rest of the language in subsequent chapters. A token consists of an identifier, keyword, punctuation, literal, or operator.","type":"text"}],"url":"\/documentation\/swift\/lexicalstructure","role":"article","title":"Lexical Structure","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Protocols#Protocol-Inheritance":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocol-Inheritance","abstract":[],"title":"Protocol Inheritance","kind":"section","type":"topic","url":"\/documentation\/swift\/protocols#Protocol-Inheritance"},"doc://com.apple.Swift/documentation/Swift/Initialization#Default-Initializers":{"type":"topic","title":"Default Initializers","url":"\/documentation\/swift\/initialization#Default-Initializers","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Default-Initializers","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Protocols#Property-Requirements":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Property-Requirements","abstract":[],"title":"Property Requirements","kind":"section","type":"topic","url":"\/documentation\/swift\/protocols#Property-Requirements"},"doc://com.apple.Swift/documentation/Swift/Inheritance":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","abstract":[{"text":"A class can ","type":"text"},{"inlineContent":[{"text":"inherit","type":"text"}],"type":"emphasis"},{"text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a ","type":"text"},{"inlineContent":[{"text":"subclass","type":"text"}],"type":"emphasis"},{"text":", and the class it inherits from is known as its ","type":"text"},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/inheritance","title":"Inheritance","type":"topic","role":"article"},"doc://com.apple.Swift/documentation/Swift/Properties#Property-Observers":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Property-Observers","abstract":[],"title":"Property Observers","kind":"section","type":"topic","url":"\/documentation\/swift\/properties#Property-Observers"},"doc://com.apple.Swift/documentation/Swift/AccessControl#Getters-and-Setters":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Getters-and-Setters","abstract":[],"title":"Getters and Setters","kind":"section","type":"topic","url":"\/documentation\/swift\/accesscontrol#Getters-and-Setters"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Structures-and-Enumerations-Are-Value-Types","abstract":[],"title":"Structures and Enumerations Are Value Types","kind":"section","type":"topic","url":"\/documentation\/swift\/classesandstructures#Structures-and-Enumerations-Are-Value-Types"},"doc://com.apple.Swift/documentation/Swift/Types#Type-Inference":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Type-Inference","abstract":[],"title":"Type Inference","kind":"section","type":"topic","url":"\/documentation\/swift\/types#Type-Inference"},"doc://com.apple.Swift/documentation/Swift/Declarations#Protocol-Property-Declaration":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Property-Declaration","abstract":[],"title":"Protocol Property Declaration","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Protocol-Property-Declaration"},"doc://com.apple.Swift/documentation/Swift":{"title":"Swift","url":"\/documentation\/swift","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","role":"collection","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Initialization#Memberwise-Initializers-for-Structure-Types":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Memberwise-Initializers-for-Structure-Types","abstract":[],"title":"Memberwise Initializers for Structure Types","kind":"section","type":"topic","url":"\/documentation\/swift\/initialization#Memberwise-Initializers-for-Structure-Types"},"doc://com.apple.Swift/documentation/Swift/Enumerations#Enumeration-Syntax":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Enumeration-Syntax","abstract":[],"title":"Enumeration Syntax","kind":"section","type":"topic","url":"\/documentation\/swift\/enumerations#Enumeration-Syntax"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Custom-Operators":{"url":"\/documentation\/swift\/advancedoperators#Custom-Operators","title":"Custom Operators","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Custom-Operators","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Protocols#Protocols-as-Types":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocols-as-Types","abstract":[],"title":"Protocols as Types","kind":"section","type":"topic","url":"\/documentation\/swift\/protocols#Protocols-as-Types"},"doc://com.apple.Swift/documentation/Swift/Concurrency#Actors":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency#Actors","abstract":[],"title":"Actors","kind":"section","type":"topic","url":"\/documentation\/swift\/concurrency#Actors"},"doc://com.apple.Swift/documentation/Swift/Enumerations#Raw-Values":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Raw-Values","abstract":[],"title":"Raw Values","kind":"section","type":"topic","url":"\/documentation\/swift\/enumerations#Raw-Values"},"doc://com.apple.Swift/documentation/Swift/Properties#Stored-Properties":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Stored-Properties","abstract":[],"title":"Stored Properties","kind":"section","type":"topic","url":"\/documentation\/swift\/properties#Stored-Properties"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting#Weak-References":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Weak-References","abstract":[],"title":"Weak References","kind":"section","type":"topic","url":"\/documentation\/swift\/automaticreferencecounting#Weak-References"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure#Operators":{"title":"Operators","abstract":[],"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Operators","type":"topic","url":"\/documentation\/swift\/lexicalstructure#Operators"},"doc://com.apple.Swift/documentation/Swift/Functions#Variadic-Parameters":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Variadic-Parameters","abstract":[],"title":"Variadic Parameters","kind":"section","type":"topic","url":"\/documentation\/swift\/functions#Variadic-Parameters"},"doc://com.apple.Swift/documentation/Swift/Properties#Type-Properties":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Type-Properties","abstract":[],"title":"Type Properties","kind":"section","type":"topic","url":"\/documentation\/swift\/properties#Type-Properties"},"doc://com.apple.Swift/documentation/Swift/Functions#Nested-Functions":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Nested-Functions","abstract":[],"title":"Nested Functions","kind":"section","type":"topic","url":"\/documentation\/swift\/functions#Nested-Functions"},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"title":"Access Control","url":"\/documentation\/swift\/accesscontrol","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Declarations#Variable-Declaration":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Variable-Declaration","abstract":[],"title":"Variable Declaration","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Variable-Declaration"},"doc://com.apple.Swift/documentation/Swift/zzSummaryOfTheGrammar":{"abstract":[],"url":"\/documentation\/swift\/zzsummaryofthegrammar","role":"article","title":"Summary of the Grammar","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Functions#In-Out-Parameters":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#In-Out-Parameters","abstract":[],"kind":"section","url":"\/documentation\/swift\/functions#In-Out-Parameters","title":"In-Out Parameters","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Generics#Associated-Types":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Associated-Types","abstract":[],"title":"Associated Types","kind":"section","type":"topic","url":"\/documentation\/swift\/generics#Associated-Types"},"doc://com.apple.Swift/documentation/Swift/Declarations#Special-Kinds-of-Parameters":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Special-Kinds-of-Parameters","abstract":[],"title":"Special Kinds of Parameters","kind":"section","type":"topic","url":"\/documentation\/swift\/declarations#Special-Kinds-of-Parameters"},"doc://com.apple.Swift/documentation/Swift/Inheritance#Overriding":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance#Overriding","abstract":[],"title":"Overriding","kind":"section","type":"topic","url":"\/documentation\/swift\/inheritance#Overriding"},"doc://com.apple.Swift/documentation/Swift/Initialization#Initializers":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Initializers","abstract":[],"title":"Initializers","kind":"section","type":"topic","url":"\/documentation\/swift\/initialization#Initializers"},"doc://com.apple.Swift/documentation/Swift/Statements":{"abstract":[{"text":"In Swift, there are three kinds of statements: simple statements, compiler control statements, and control flow statements. Simple statements are the most common and consist of either an expression or a declaration. Compiler control statements allow the program to change aspects of the compiler’s behavior and include a conditional compilation block and a line control statement.","type":"text"}],"url":"\/documentation\/swift\/statements","role":"article","title":"Statements","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Protocols#Delegation":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Delegation","abstract":[],"title":"Delegation","kind":"section","type":"topic","url":"\/documentation\/swift\/protocols#Delegation"},"doc://com.apple.Swift/documentation/Swift/Types#Protocol-Composition-Type":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Protocol-Composition-Type","abstract":[],"title":"Protocol Composition Type","kind":"section","type":"topic","url":"\/documentation\/swift\/types#Protocol-Composition-Type"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"text":" and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"classes","type":"text"}]},{"type":"text","text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","kind":"article","url":"\/documentation\/swift\/classesandstructures","title":"Structures and Classes"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures#Classes-Are-Reference-Types":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures#Classes-Are-Reference-Types","url":"\/documentation\/swift\/classesandstructures#Classes-Are-Reference-Types","kind":"section","type":"topic","abstract":[],"title":"Classes Are Reference Types"},"doc://com.apple.Swift/documentation/Swift/TheBasics#Constants-and-Variables":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Constants-and-Variables","abstract":[],"title":"Constants and Variables","kind":"section","type":"topic","url":"\/documentation\/swift\/thebasics#Constants-and-Variables"},"doc://com.apple.Swift/documentation/Swift/Protocols#Method-Requirements":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Method-Requirements","abstract":[],"title":"Method Requirements","kind":"section","type":"topic","url":"\/documentation\/swift\/protocols#Method-Requirements"},"doc://com.apple.Swift/documentation/Swift/AboutTheLanguageReference":{"abstract":[{"text":"This part of the book describes the formal grammar of the Swift programming language. The grammar described here is intended to help you understand the language in more detail, rather than to allow you to directly implement a parser or compiler.","type":"text"}],"url":"\/documentation\/swift\/aboutthelanguagereference","role":"article","title":"About the Language Reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AboutTheLanguageReference","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Declarations#Protocol-Subscript-Declaration":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Subscript-Declaration","title":"Protocol Subscript Declaration","url":"\/documentation\/swift\/declarations#Protocol-Subscript-Declaration","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Matching-Enumeration-Values-with-a-Switch-Statement","title":"Matching Enumeration Values with a Switch Statement","url":"\/documentation\/swift\/enumerations#Matching-Enumeration-Values-with-a-Switch-Statement","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Declarations#Subscript-Declaration":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Subscript-Declaration","title":"Subscript Declaration","url":"\/documentation\/swift\/declarations#Subscript-Declaration","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Enumerations#Associated-Values":{"type":"topic","title":"Associated Values","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations#Associated-Values","url":"\/documentation\/swift\/enumerations#Associated-Values","abstract":[],"kind":"section"},"doc://com.apple.Swift/documentation/Swift/Types":{"abstract":[{"text":"In Swift, there are two kinds of types: named types and compound types. A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"named type","type":"text"}]},{"text":" is a type that can be given a particular name when it’s defined. Named types include classes, structures, enumerations, and protocols. For example, instances of a user-defined class named ","type":"text"},{"type":"codeVoice","code":"MyClass"},{"text":" have the type ","type":"text"},{"type":"codeVoice","code":"MyClass"},{"text":". In addition to user-defined named types, the Swift standard library defines many commonly used named types, including those that represent arrays, dictionaries, and optional values.","type":"text"}],"url":"\/documentation\/swift\/types","role":"article","title":"Types","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Properties#Lazy-Stored-Properties":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Lazy-Stored-Properties","title":"Lazy Stored Properties","url":"\/documentation\/swift\/properties#Lazy-Stored-Properties","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Declarations#Protocol-Associated-Type-Declaration":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Associated-Type-Declaration","title":"Protocol Associated Type Declaration","url":"\/documentation\/swift\/declarations#Protocol-Associated-Type-Declaration","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Initialization":{"title":"Initialization","url":"\/documentation\/swift\/initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Declarations#Initializer-Declaration":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Initializer-Declaration","title":"Initializer Declaration","url":"\/documentation\/swift\/declarations#Initializer-Declaration","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/GenericParametersAndArguments":{"abstract":[{"text":"This chapter describes parameters and arguments for generic types, functions, and initializers. When you declare a generic type, function, subscript, or initializer, you specify the type parameters that the generic type, function, or initializer can work with. These type parameters act as placeholders that are replaced by actual concrete type arguments when an instance of a generic type is created or a generic function or initializer is called.","type":"text"}],"url":"\/documentation\/swift\/genericparametersandarguments","role":"article","title":"Generic Parameters and Arguments","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Properties#Computed-Properties":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Computed-Properties","title":"Computed Properties","url":"\/documentation\/swift\/properties#Computed-Properties","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Initialization#Failable-Initializers":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Failable-Initializers","title":"Failable Initializers","url":"\/documentation\/swift\/initialization#Failable-Initializers","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Expressions#Implicit-Member-Expression":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Implicit-Member-Expression","title":"Implicit Member Expression","url":"\/documentation\/swift\/expressions#Implicit-Member-Expression","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Declarations#Precedence-Group-Declaration":{"title":"Precedence Group Declaration","url":"\/documentation\/swift\/declarations#Precedence-Group-Declaration","abstract":[],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Precedence-Group-Declaration","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"role":"article","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"deinitializer","type":"text"}]},{"text":" is called immediately before a class instance is deallocated. You write deinitializers with the ","type":"text"},{"code":"deinit","type":"codeVoice"},{"text":" keyword, similar to how initializers are written with the ","type":"text"},{"code":"init","type":"codeVoice"},{"type":"text","text":" keyword. Deinitializers are only available on class types."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","kind":"article","url":"\/documentation\/swift\/deinitialization","title":"Deinitialization"},"doc://com.apple.Swift/documentation/Swift/Statements#Guard-Statement":{"type":"topic","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Guard-Statement","url":"\/documentation\/swift\/statements#Guard-Statement","title":"Guard Statement","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Properties#Read-Only-Computed-Properties":{"url":"\/documentation\/swift\/properties#Read-Only-Computed-Properties","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Read-Only-Computed-Properties","title":"Read-Only Computed Properties","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Properties#Shorthand-Setter-Declaration":{"title":"Shorthand Setter Declaration","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Shorthand-Setter-Declaration","kind":"section","abstract":[],"type":"topic","url":"\/documentation\/swift\/properties#Shorthand-Setter-Declaration"},"doc://com.apple.Swift/documentation/Swift/Patterns":{"abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"text":" represents the structure of a single value or a composite value. For example, the structure of a tuple ","type":"text"},{"type":"codeVoice","code":"(1, 2)"},{"text":" is a comma-separated list of two elements. Because patterns represent the structure of a value rather than any one particular value, you can match them with a variety of values. For instance, the pattern ","type":"text"},{"type":"codeVoice","code":"(x, y)"},{"text":" matches the tuple ","type":"text"},{"type":"codeVoice","code":"(1, 2)"},{"text":" and any other two-element tuple. In addition to matching a pattern with a value, you can extract part or all of a composite value and bind each part to a constant or variable name.","type":"text"}],"url":"\/documentation\/swift\/patterns","role":"article","title":"Patterns","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Patterns#Enumeration-Case-Pattern":{"title":"Enumeration Case Pattern","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns#Enumeration-Case-Pattern","kind":"section","abstract":[],"type":"topic","url":"\/documentation\/swift\/patterns#Enumeration-Case-Pattern"},"doc://com.apple.Swift/documentation/Swift/Attributes#dynamicCallable":{"title":"dynamicCallable","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#dynamicCallable","kind":"section","abstract":[],"type":"topic","url":"\/documentation\/swift\/attributes#dynamicCallable"},"doc://com.apple.Swift/documentation/Swift/Declarations#Access-Control-Levels":{"title":"Access Control Levels","kind":"section","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Access-Control-Levels","url":"\/documentation\/swift\/declarations#Access-Control-Levels"},"doc://com.apple.Swift/documentation/Swift/Initialization#Automatic-Initializer-Inheritance":{"type":"topic","title":"Automatic Initializer Inheritance","url":"\/documentation\/swift\/initialization#Automatic-Initializer-Inheritance","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Automatic-Initializer-Inheritance","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Expressions":{"abstract":[{"text":"In Swift, there are four kinds of expressions: prefix expressions, infix expressions, primary expressions, and postfix expressions. Evaluating an expression returns a value, causes a side effect, or both.","type":"text"}],"url":"\/documentation\/swift\/expressions","role":"article","title":"Expressions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","type":"topic","kind":"article"}}}