{"sections":[],"seeAlsoSections":[{"identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/AboutTheLanguageReference","doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar"],"generated":true,"title":"Language Reference"}],"variants":[{"paths":["\/documentation\/swift\/lexicalstructure"],"traits":[{"interfaceLanguage":"swift"}]}],"abstract":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"lexical structure","type":"text"}]},{"text":" of Swift describes what sequence of characters form valid tokens of the language. These valid tokens form the lowest-level building blocks of the language and are used to describe the rest of the language in subsequent chapters. A token consists of an identifier, keyword, punctuation, literal, or operator.","type":"text"}],"identifier":{"url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"inlineContent":[{"type":"text","text":"In most cases, tokens are generated from the characters of a Swift source file by considering the longest possible substring from the input text, within the constraints of the grammar that are specified below. This behavior is referred to as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"longest match"}]},{"type":"text","text":" or "},{"type":"emphasis","inlineContent":[{"type":"text","text":"maximal munch"}]},{"type":"text","text":"."}],"type":"paragraph"},{"level":2,"text":"Whitespace and Comments","anchor":"Whitespace-and-Comments","type":"heading"},{"inlineContent":[{"type":"text","text":"Whitespace has two uses: to separate tokens in the source file and to distinguish between prefix, postfix, and infix operators (see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Operators","isActive":true,"type":"reference"},{"type":"text","text":"), but is otherwise ignored. The following characters are considered whitespace: space (U+0020), line feed (U+000A), carriage return (U+000D), horizontal tab (U+0009), vertical tab (U+000B), form feed (U+000C) and null (U+0000)."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Comments are treated as whitespace by the compiler. Single line comments begin with "},{"code":"\/\/","type":"codeVoice"},{"type":"text","text":" and continue until a line feed (U+000A) or carriage return (U+000D). Multiline comments begin with "},{"code":"\/*","type":"codeVoice"},{"type":"text","text":" and end with "},{"code":"*\/","type":"codeVoice"},{"type":"text","text":". Nesting multiline comments is allowed, but the comment markers must be balanced."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Comments can contain additional formatting and markup, as described in "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html"},{"type":"text","text":" [https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html]"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"style":"note","name":"Grammar of whitespace","type":"aside"},{"level":2,"text":"Identifiers","anchor":"Identifiers","type":"heading"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Identifiers","type":"text"}]},{"type":"text","text":" begin with an uppercase or lowercase letter A through Z, an underscore ("},{"type":"codeVoice","code":"_"},{"type":"text","text":"), a noncombining alphanumeric Unicode character in the Basic Multilingual Plane, or a character outside the Basic Multilingual Plane that isn’t in a Private Use Area. After the first character, digits and combining Unicode characters are also allowed."}],"type":"paragraph"},{"inlineContent":[{"text":"Treat identifiers that begin with an underscore as internal, even if their declaration has the ","type":"text"},{"code":"public","type":"codeVoice"},{"text":" access-level modifier. This convention lets framework authors mark part of an API that clients must not interact with or depend on, even though some limitation requires the declaration to be public. In addition, identifiers that begin with two underscores are reserved for the Swift compiler and standard library.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To use a reserved word as an identifier, put a backtick (```) before and after it. For example, "},{"type":"codeVoice","code":"class"},{"type":"text","text":" isn’t a valid identifier, but "},{"type":"codeVoice","code":"class"},{"type":"text","text":" is valid. The backticks aren’t considered part of the identifier; ``x`` and `x` have the same meaning."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Inside a closure with no explicit parameter names, the parameters are implicitly named "},{"code":"$0","type":"codeVoice"},{"type":"text","text":", "},{"code":"$1","type":"codeVoice"},{"type":"text","text":", "},{"code":"$2","type":"codeVoice"},{"type":"text","text":", and so on. These names are valid identifiers within the scope of the closure."}],"type":"paragraph"},{"inlineContent":[{"text":"The compiler synthesizes identifiers that begin with a dollar sign (","type":"text"},{"code":"$","type":"codeVoice"},{"text":") for properties that have a property wrapper projection. Your code can interact with these identifiers, but you can’t declare identifiers with that prefix. For more information, see the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#propertyWrapper","type":"reference","isActive":true},{"text":" section of the ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","type":"reference","isActive":true},{"text":" chapter.","type":"text"}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}],"style":"note","name":"Grammar of an identifier","type":"aside"},{"level":2,"text":"Keywords and Punctuation","anchor":"Keywords-and-Punctuation","type":"heading"},{"inlineContent":[{"text":"The following keywords are reserved and can’t be used as identifiers, unless they’re escaped with backticks, as described above in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Identifiers","type":"reference","isActive":true},{"text":". Keywords other than ","type":"text"},{"type":"codeVoice","code":"inout"},{"text":", ","type":"text"},{"type":"codeVoice","code":"var"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"let"},{"text":" can be used as parameter names in a function declaration or function call without being escaped with backticks. When a member has the same name as a keyword, references to that member don’t need to be escaped with backticks, except when there’s ambiguity between referring to the member and using the keyword—for example, ","type":"text"},{"type":"codeVoice","code":"self"},{"text":", ","type":"text"},{"type":"codeVoice","code":"Type"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Protocol"},{"text":" have special meaning in an explicit member expression, so they must be escaped with backticks in that context.","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Keywords used in declarations: ","type":"text"},{"code":"associatedtype","type":"codeVoice"},{"text":", ","type":"text"},{"code":"class","type":"codeVoice"},{"text":", ","type":"text"},{"code":"deinit","type":"codeVoice"},{"text":", ","type":"text"},{"code":"enum","type":"codeVoice"},{"text":", ","type":"text"},{"code":"extension","type":"codeVoice"},{"text":", ","type":"text"},{"code":"fileprivate","type":"codeVoice"},{"text":", ","type":"text"},{"code":"func","type":"codeVoice"},{"text":", ","type":"text"},{"code":"import","type":"codeVoice"},{"text":", ","type":"text"},{"code":"init","type":"codeVoice"},{"text":", ","type":"text"},{"code":"inout","type":"codeVoice"},{"text":", ","type":"text"},{"code":"internal","type":"codeVoice"},{"text":", ","type":"text"},{"code":"let","type":"codeVoice"},{"text":", ","type":"text"},{"code":"open","type":"codeVoice"},{"text":", ","type":"text"},{"code":"operator","type":"codeVoice"},{"text":", ","type":"text"},{"code":"private","type":"codeVoice"},{"text":", ","type":"text"},{"code":"precedencegroup","type":"codeVoice"},{"text":", ","type":"text"},{"code":"protocol","type":"codeVoice"},{"text":", ","type":"text"},{"code":"public","type":"codeVoice"},{"text":", ","type":"text"},{"code":"rethrows","type":"codeVoice"},{"text":", ","type":"text"},{"code":"static","type":"codeVoice"},{"text":", ","type":"text"},{"code":"struct","type":"codeVoice"},{"text":", ","type":"text"},{"code":"subscript","type":"codeVoice"},{"text":", ","type":"text"},{"code":"typealias","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"var","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Keywords used in statements: ","type":"text"},{"code":"break","type":"codeVoice"},{"text":", ","type":"text"},{"code":"case","type":"codeVoice"},{"text":", ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":", ","type":"text"},{"code":"continue","type":"codeVoice"},{"text":", ","type":"text"},{"code":"default","type":"codeVoice"},{"text":", ","type":"text"},{"code":"defer","type":"codeVoice"},{"text":", ","type":"text"},{"code":"do","type":"codeVoice"},{"text":", ","type":"text"},{"code":"else","type":"codeVoice"},{"text":", ","type":"text"},{"code":"fallthrough","type":"codeVoice"},{"text":", ","type":"text"},{"code":"for","type":"codeVoice"},{"text":", ","type":"text"},{"code":"guard","type":"codeVoice"},{"text":", ","type":"text"},{"code":"if","type":"codeVoice"},{"text":", ","type":"text"},{"code":"in","type":"codeVoice"},{"text":", ","type":"text"},{"code":"repeat","type":"codeVoice"},{"text":", ","type":"text"},{"code":"return","type":"codeVoice"},{"text":", ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":", ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":", ","type":"text"},{"code":"where","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"while","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Keywords used in expressions and types: ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":", ","type":"text"},{"type":"codeVoice","code":"as"},{"text":", ","type":"text"},{"code":"catch","type":"codeVoice"},{"text":", ","type":"text"},{"code":"false","type":"codeVoice"},{"text":", ","type":"text"},{"code":"is","type":"codeVoice"},{"text":", ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", ","type":"text"},{"code":"rethrows","type":"codeVoice"},{"text":", ","type":"text"},{"code":"self","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Self","type":"codeVoice"},{"text":", ","type":"text"},{"code":"super","type":"codeVoice"},{"text":", ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":", ","type":"text"},{"code":"throws","type":"codeVoice"},{"text":", ","type":"text"},{"code":"true","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"try","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Keywords used in patterns: ","type":"text"},{"code":"_","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Keywords that begin with a number sign (","type":"text"},{"code":"#","type":"codeVoice"},{"text":"): ","type":"text"},{"code":"#available","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#colorLiteral","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#column","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#dsohandle","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#elseif","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#else","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#endif","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#error","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#fileID","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#fileLiteral","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#filePath","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#file","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#function","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#if","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#imageLiteral","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#keyPath","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#line","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#selector","type":"codeVoice"},{"text":", ","type":"text"},{"code":"#sourceLocation","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"#warning","type":"codeVoice"},{"text":".","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Keywords reserved in particular contexts: "},{"code":"associativity","type":"codeVoice"},{"type":"text","text":", "},{"code":"convenience","type":"codeVoice"},{"type":"text","text":", "},{"code":"didSet","type":"codeVoice"},{"type":"text","text":", "},{"code":"dynamic","type":"codeVoice"},{"type":"text","text":", "},{"code":"final","type":"codeVoice"},{"type":"text","text":", "},{"code":"get","type":"codeVoice"},{"type":"text","text":", "},{"code":"indirect","type":"codeVoice"},{"type":"text","text":", "},{"code":"infix","type":"codeVoice"},{"type":"text","text":", "},{"code":"lazy","type":"codeVoice"},{"type":"text","text":", "},{"code":"left","type":"codeVoice"},{"type":"text","text":", "},{"code":"mutating","type":"codeVoice"},{"type":"text","text":", "},{"code":"none","type":"codeVoice"},{"type":"text","text":", "},{"code":"nonmutating","type":"codeVoice"},{"type":"text","text":", "},{"code":"optional","type":"codeVoice"},{"type":"text","text":", "},{"code":"override","type":"codeVoice"},{"type":"text","text":", "},{"code":"postfix","type":"codeVoice"},{"type":"text","text":", "},{"code":"precedence","type":"codeVoice"},{"type":"text","text":", "},{"code":"prefix","type":"codeVoice"},{"type":"text","text":", "},{"code":"Protocol","type":"codeVoice"},{"type":"text","text":", "},{"code":"required","type":"codeVoice"},{"type":"text","text":", "},{"code":"right","type":"codeVoice"},{"type":"text","text":", "},{"code":"set","type":"codeVoice"},{"type":"text","text":", "},{"code":"some","type":"codeVoice"},{"type":"text","text":", "},{"code":"Type","type":"codeVoice"},{"type":"text","text":", "},{"code":"unowned","type":"codeVoice"},{"type":"text","text":", "},{"code":"weak","type":"codeVoice"},{"type":"text","text":", and "},{"code":"willSet","type":"codeVoice"},{"type":"text","text":". Outside the context in which they appear in the grammar, they can be used as identifiers."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The following tokens are reserved as punctuation and can’t be used as custom operators: "},{"code":"(","type":"codeVoice"},{"type":"text","text":", "},{"code":")","type":"codeVoice"},{"type":"text","text":", "},{"code":"{","type":"codeVoice"},{"type":"text","text":", "},{"code":"}","type":"codeVoice"},{"type":"text","text":", "},{"code":"[","type":"codeVoice"},{"type":"text","text":", "},{"code":"]","type":"codeVoice"},{"type":"text","text":", "},{"code":".","type":"codeVoice"},{"type":"text","text":", "},{"code":",","type":"codeVoice"},{"type":"text","text":", "},{"code":":","type":"codeVoice"},{"type":"text","text":", "},{"code":";","type":"codeVoice"},{"type":"text","text":", "},{"code":"=","type":"codeVoice"},{"type":"text","text":", "},{"code":"@","type":"codeVoice"},{"type":"text","text":", "},{"code":"#","type":"codeVoice"},{"type":"text","text":", "},{"code":"&","type":"codeVoice"},{"type":"text","text":" (as a prefix operator), "},{"code":"->","type":"codeVoice"},{"type":"text","text":", ```, "},{"code":"?","type":"codeVoice"},{"type":"text","text":", and `!` (as a postfix operator)."}],"type":"paragraph"},{"level":2,"text":"Literals","anchor":"Literals","type":"heading"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"literal","type":"text"}]},{"type":"text","text":" is the source code representation of a value of a type, such as a number or string."}],"type":"paragraph"},{"inlineContent":[{"text":"The following are examples of literals:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["42               \/\/ Integer literal","3.14159          \/\/ Floating-point literal","\"Hello, world!\"  \/\/ String literal","\/Hello, .*\/      \/\/ Regular expression literal","true             \/\/ Boolean literal"],"type":"codeListing"},{"inlineContent":[{"text":"A literal doesn’t have a type on its own. Instead, a literal is parsed as having infinite precision and Swift’s type inference attempts to infer a type for the literal. For example, in the declaration ","type":"text"},{"code":"let x: Int8 = 42","type":"codeVoice"},{"text":", Swift uses the explicit type annotation (","type":"text"},{"code":": Int8","type":"codeVoice"},{"text":") to infer that the type of the integer literal ","type":"text"},{"code":"42","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"Int8","type":"codeVoice"},{"text":". If there isn’t suitable type information available, Swift infers that the literal’s type is one of the default literal types defined in the Swift standard library and listed in the table below. When specifying the type annotation for a literal value, the annotation’s type must be a type that can be instantiated from that literal value. That is, the type must conform to the Swift standard library protocols listed in the table below.","type":"text"}],"type":"paragraph"},{"header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Literal","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Default type"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Protocol"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Integer","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Int"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ExpressibleByIntegerLiteral"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Floating-point"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Double"}]}],[{"type":"paragraph","inlineContent":[{"code":"ExpressibleByFloatLiteral","type":"codeVoice"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"String"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"ExpressibleByStringLiteral","type":"codeVoice"},{"type":"text","text":", "},{"code":"ExpressibleByUnicodeScalarLiteral","type":"codeVoice"},{"type":"text","text":" for string literals that contain only a single Unicode scalar, "},{"code":"ExpressibleByExtendedGraphemeClusterLiteral","type":"codeVoice"},{"type":"text","text":" for string literals that contain only a single extended grapheme cluster"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Regular expression","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"code":"Regex","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"None","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Boolean","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"code":"Bool","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"ExpressibleByBooleanLiteral"}]}]]],"type":"table"},{"inlineContent":[{"type":"text","text":"For example, in the declaration "},{"type":"codeVoice","code":"let str = \"Hello, world\""},{"type":"text","text":", the default inferred type of the string literal "},{"type":"codeVoice","code":"\"Hello, world\""},{"type":"text","text":" is "},{"type":"codeVoice","code":"String"},{"type":"text","text":". Also, "},{"type":"codeVoice","code":"Int8"},{"type":"text","text":" conforms to the "},{"type":"codeVoice","code":"ExpressibleByIntegerLiteral"},{"type":"text","text":" protocol, and therefore it can be used in the type annotation for the integer literal "},{"type":"codeVoice","code":"42"},{"type":"text","text":" in the declaration "},{"type":"codeVoice","code":"let x: Int8 = 42"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}],"style":"note","name":"Grammar of a literal","type":"aside"},{"level":3,"text":"Integer Literals","anchor":"Integer-Literals","type":"heading"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Integer literals","type":"text"}]},{"type":"text","text":" represent integer values of unspecified precision. By default, integer literals are expressed in decimal; you can specify an alternate base using a prefix. Binary literals begin with "},{"type":"codeVoice","code":"0b"},{"type":"text","text":", octal literals begin with "},{"type":"codeVoice","code":"0o"},{"type":"text","text":", and hexadecimal literals begin with "},{"type":"codeVoice","code":"0x"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Decimal literals contain the digits "},{"type":"codeVoice","code":"0"},{"type":"text","text":" through "},{"type":"codeVoice","code":"9"},{"type":"text","text":". Binary literals contain "},{"type":"codeVoice","code":"0"},{"type":"text","text":" and "},{"type":"codeVoice","code":"1"},{"type":"text","text":", octal literals contain "},{"type":"codeVoice","code":"0"},{"type":"text","text":" through "},{"type":"codeVoice","code":"7"},{"type":"text","text":", and hexadecimal literals contain "},{"type":"codeVoice","code":"0"},{"type":"text","text":" through "},{"type":"codeVoice","code":"9"},{"type":"text","text":" as well as "},{"type":"codeVoice","code":"A"},{"type":"text","text":" through "},{"type":"codeVoice","code":"F"},{"type":"text","text":" in upper- or lowercase."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Negative integers literals are expressed by prepending a minus sign ("},{"type":"codeVoice","code":"-"},{"type":"text","text":") to an integer literal, as in "},{"type":"codeVoice","code":"-42"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Underscores ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") are allowed between digits for readability, but they’re ignored and therefore don’t affect the value of the literal. Integer literals can begin with leading zeros ("},{"type":"codeVoice","code":"0"},{"type":"text","text":"), but they’re likewise ignored and don’t affect the base or value of the literal."}],"type":"paragraph"},{"inlineContent":[{"text":"Unless otherwise specified, the default inferred type of an integer literal is the Swift standard library type ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":". The Swift standard library also defines types for various sizes of signed and unsigned integers, as described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Integers","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}],"style":"note","name":"Grammar of an integer literal","type":"aside"},{"level":3,"text":"Floating-Point Literals","anchor":"Floating-Point-Literals","type":"heading"},{"inlineContent":[{"inlineContent":[{"text":"Floating-point literals","type":"text"}],"type":"emphasis"},{"text":" represent floating-point values of unspecified precision.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"By default, floating-point literals are expressed in decimal (with no prefix), but they can also be expressed in hexadecimal (with a ","type":"text"},{"code":"0x","type":"codeVoice"},{"text":" prefix).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Decimal floating-point literals consist of a sequence of decimal digits followed by either a decimal fraction, a decimal exponent, or both. The decimal fraction consists of a decimal point (","type":"text"},{"code":".","type":"codeVoice"},{"text":") followed by a sequence of decimal digits. The exponent consists of an upper- or lowercase ","type":"text"},{"code":"e","type":"codeVoice"},{"text":" prefix followed by a sequence of decimal digits that indicates what power of 10 the value preceding the ","type":"text"},{"code":"e","type":"codeVoice"},{"text":" is multiplied by. For example, ","type":"text"},{"code":"1.25e2","type":"codeVoice"},{"text":" represents 1.25 x 10","type":"text"},{"text":"2","type":"text"},{"text":", which evaluates to ","type":"text"},{"code":"125.0","type":"codeVoice"},{"text":". Similarly, ","type":"text"},{"code":"1.25e-2","type":"codeVoice"},{"text":" represents 1.25 x 10","type":"text"},{"text":"-2","type":"text"},{"text":", which evaluates to ","type":"text"},{"code":"0.0125","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Hexadecimal floating-point literals consist of a ","type":"text"},{"type":"codeVoice","code":"0x"},{"text":" prefix, followed by an optional hexadecimal fraction, followed by a hexadecimal exponent. The hexadecimal fraction consists of a decimal point followed by a sequence of hexadecimal digits. The exponent consists of an upper- or lowercase ","type":"text"},{"type":"codeVoice","code":"p"},{"text":" prefix followed by a sequence of decimal digits that indicates what power of 2 the value preceding the ","type":"text"},{"type":"codeVoice","code":"p"},{"text":" is multiplied by. For example, ","type":"text"},{"type":"codeVoice","code":"0xFp2"},{"text":" represents 15 x 2","type":"text"},{"text":"2","type":"text"},{"text":", which evaluates to ","type":"text"},{"type":"codeVoice","code":"60"},{"text":". Similarly, ","type":"text"},{"type":"codeVoice","code":"0xFp-2"},{"text":" represents 15 x 2","type":"text"},{"text":"-2","type":"text"},{"text":", which evaluates to ","type":"text"},{"type":"codeVoice","code":"3.75"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Negative floating-point literals are expressed by prepending a minus sign (","type":"text"},{"code":"-","type":"codeVoice"},{"text":") to a floating-point literal, as in ","type":"text"},{"code":"-42.5","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Underscores (","type":"text"},{"code":"_","type":"codeVoice"},{"text":") are allowed between digits for readability, but they’re ignored and therefore don’t affect the value of the literal. Floating-point literals can begin with leading zeros (","type":"text"},{"code":"0","type":"codeVoice"},{"text":"), but they’re likewise ignored and don’t affect the base or value of the literal.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Unless otherwise specified, the default inferred type of a floating-point literal is the Swift standard library type ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":", which represents a 64-bit floating-point number. The Swift standard library also defines a ","type":"text"},{"code":"Float","type":"codeVoice"},{"text":" type, which represents a 32-bit floating-point number.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}],"style":"note","name":"Grammar of a floating-point literal","type":"aside"},{"level":3,"text":"String Literals","anchor":"String-Literals","type":"heading"},{"inlineContent":[{"type":"text","text":"A string literal is a sequence of characters surrounded by quotation marks. A single-line string literal is surrounded by double quotation marks and has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["\"characters\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"String literals can’t contain an unescaped double quotation mark ("},{"type":"codeVoice","code":"\""},{"type":"text","text":"), an unescaped backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":"), a carriage return, or a line feed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A multiline string literal is surrounded by three double quotation marks and has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["\"\"\"","characters","\"\"\""],"type":"codeListing"},{"inlineContent":[{"text":"Unlike a single-line string literal, a multiline string literal can contain unescaped double quotation marks (","type":"text"},{"type":"codeVoice","code":"\""},{"text":"), carriage returns, and line feeds. It can’t contain three unescaped double quotation marks next to each other.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The line break after the ","type":"text"},{"code":"\"\"\"","type":"codeVoice"},{"text":" that begins the multiline string literal isn’t part of the string. The line break before the ","type":"text"},{"code":"\"\"\"","type":"codeVoice"},{"text":" that ends the literal is also not part of the string. To make a multiline string literal that begins or ends with a line feed, write a blank line as its first or last line.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A multiline string literal can be indented using any combination of spaces and tabs; this indentation isn’t included in the string. The ","type":"text"},{"type":"codeVoice","code":"\"\"\""},{"text":" that ends the literal determines the indentation: Every nonblank line in the literal must begin with exactly the same indentation that appears before the closing ","type":"text"},{"type":"codeVoice","code":"\"\"\""},{"text":"; there’s no conversion between tabs and spaces. You can include additional spaces and tabs after that indentation; those spaces and tabs appear in the string.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Line breaks in a multiline string literal are normalized to use the line feed character. Even if your source file has a mix of carriage returns and line feeds, all of the line breaks in the string will be the same.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In a multiline string literal, writing a backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":") at the end of a line omits that line break from the string. Any whitespace between the backslash and the line break is also omitted. You can use this syntax to hard wrap a multiline string literal in your source code, without changing the value of the resulting string."}],"type":"paragraph"},{"inlineContent":[{"text":"Special characters can be included in string literals of both the single-line and multiline forms using the following escape sequences:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"text":"Null character (","type":"text"},{"code":"\\0","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Backslash ("},{"code":"\\\\","type":"codeVoice"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Horizontal tab (","type":"text"},{"code":"\\t","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Line feed ("},{"code":"\\n","type":"codeVoice"},{"type":"text","text":")"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Carriage return ("},{"type":"codeVoice","code":"\\r"},{"type":"text","text":")"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Double quotation mark ("},{"type":"codeVoice","code":"\\\""},{"type":"text","text":")"}]}]},{"content":[{"inlineContent":[{"text":"Single quotation mark (","type":"text"},{"code":"\\'","type":"codeVoice"},{"text":")","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unicode scalar ("},{"type":"codeVoice","code":"\\u{"},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"codeVoice","code":"}"},{"type":"text","text":"), where "},{"type":"emphasis","inlineContent":[{"text":"n","type":"text"}]},{"type":"text","text":" is a hexadecimal number that has one to eight digits"}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"The value of an expression can be inserted into a string literal by placing the expression in parentheses after a backslash ("},{"type":"codeVoice","code":"\\"},{"type":"text","text":"). The interpolated expression can contain a string literal, but can’t contain an unescaped backslash, a carriage return, or a line feed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, all of the following string literals have the same value:"}],"type":"paragraph"},{"syntax":"swift","code":["\"1 2 3\"","\"1 2 \\(\"3\")\"","\"1 2 \\(3)\"","\"1 2 \\(1 + 2)\"","let x = 3; \"1 2 \\(x)\""],"type":"codeListing"},{"inlineContent":[{"text":"A string delimited by extended delimiters is a sequence of characters surrounded by quotation marks and a balanced set of one or more number signs (","type":"text"},{"code":"#","type":"codeVoice"},{"text":"). A string delimited by extended delimiters has the following forms:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["#\"characters\"#","","#\"\"\"","characters","\"\"\"#"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Special characters in a string delimited by extended delimiters appear in the resulting string as normal characters rather than as special characters. You can use extended delimiters to create strings with characters that would ordinarily have a special effect such as generating a string interpolation, starting an escape sequence, or terminating the string."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The following example shows a string literal and a string delimited by extended delimiters that create equivalent string values:"}],"type":"paragraph"},{"syntax":"swift","code":["let string = #\"\\(x) \\ \" \\u{2603}\"#","let escaped = \"\\\\(x) \\\\ \\\" \\\\u{2603}\"","print(string)","\/\/ Prints \"\\(x) \\ \" \\u{2603}\"","print(string == escaped)","\/\/ Prints \"true\""],"type":"codeListing"},{"inlineContent":[{"text":"If you use more than one number sign to form a string delimited by extended delimiters, don’t place whitespace in between the number signs:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["print(###\"Line 1\\###nLine 2\"###) \/\/ OK","print(# # #\"Line 1\\# # #nLine 2\"# # #) \/\/ Error"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Multiline string literals that you create using extended delimiters have the same indentation requirements as regular multiline string literals."}],"type":"paragraph"},{"inlineContent":[{"text":"The default inferred type of a string literal is ","type":"text"},{"type":"codeVoice","code":"String"},{"text":". For more information about the ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" type, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string","isActive":true,"type":"reference"},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/string]","type":"text"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"String literals that are concatenated by the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator are concatenated at compile time. For example, the values of "},{"type":"codeVoice","code":"textA"},{"type":"text","text":" and "},{"type":"codeVoice","code":"textB"},{"type":"text","text":" in the example below are identical—no runtime concatenation is performed."}],"type":"paragraph"},{"syntax":"swift","code":["let textA = \"Hello \" + \"world\"","let textB = \"Hello world\""],"type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"style":"note","name":"Grammar of a string literal","type":"aside"},{"level":3,"text":"Regular Expression Literals","anchor":"Regular-Expression-Literals","type":"heading"},{"inlineContent":[{"type":"text","text":"A regular expression literal is a sequence of characters surrounded by slashes ("},{"type":"codeVoice","code":"\/"},{"type":"text","text":") with the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["\/regular expression\/"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Regular expression literals must not begin with an unescaped tab or space, and they can’t contain an unescaped slash ("},{"type":"codeVoice","code":"\/"},{"type":"text","text":"), a carriage return, or a line feed."}],"type":"paragraph"},{"inlineContent":[{"text":"Within a regular expression literal, a backslash is understood as a part of that regular expression, not just as an escape character like in string literals. It indicates that the following special character should be interpreted literally, or that the following nonspecial character should be interpreted in a special way. For example, ","type":"text"},{"code":"\/\\(\/","type":"codeVoice"},{"text":" matches a single left parenthesis and ","type":"text"},{"code":"\/\\d\/","type":"codeVoice"},{"text":" matches a single digit.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A regular expression literal delimited by extended delimiters is a sequence of characters surrounded by slashes (","type":"text"},{"type":"codeVoice","code":"\/"},{"text":") and a balanced set of one or more number signs (","type":"text"},{"type":"codeVoice","code":"#"},{"text":"). A regular expression literal delimited by extended delimiters has the following forms:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["#\/regular expression\/#","","#\/","regular expression","\/#"],"type":"codeListing"},{"inlineContent":[{"text":"A regular expression literal that uses extended delimiters can begin with an unescaped space or tab, contain unescaped slashes (","type":"text"},{"code":"\/","type":"codeVoice"},{"text":"), and span across multiple lines. For a multiline regular expression literal, the opening delimiter must be at the end of a line, and the closing delimiter must be on its own line. Inside a multiline regular expression literal, the extended regular expression syntax is enabled by default—specifically, whitespace is ignored and comments are allowed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you use more than one number sign to form a regular expression literal delimited by extended delimiters, don’t place whitespace in between the number signs:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let regex1 = ##\/abc\/##       \/\/ OK","let regex2 = # #\/abc\/# #     \/\/ Error"],"type":"codeListing"},{"inlineContent":[{"text":"If you need to make an empty regular expression literal, you must use the extended delimiter syntax.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"style":"note","name":"Grammar of a regular expression literal","type":"aside"},{"level":2,"text":"Operators","anchor":"Operators","type":"heading"},{"inlineContent":[{"text":"The Swift standard library defines a number of operators for your use, many of which are discussed in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","type":"reference"},{"text":". The present section describes which characters can be used to define custom operators.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Custom operators can begin with one of the ASCII characters "},{"code":"\/","type":"codeVoice"},{"type":"text","text":", "},{"code":"=","type":"codeVoice"},{"type":"text","text":", "},{"code":"-","type":"codeVoice"},{"type":"text","text":", "},{"code":"+","type":"codeVoice"},{"type":"text","text":", "},{"code":"!","type":"codeVoice"},{"type":"text","text":", "},{"code":"*","type":"codeVoice"},{"type":"text","text":", "},{"code":"%","type":"codeVoice"},{"type":"text","text":", "},{"code":"<","type":"codeVoice"},{"type":"text","text":", "},{"code":">","type":"codeVoice"},{"type":"text","text":", "},{"code":"&","type":"codeVoice"},{"type":"text","text":", "},{"code":"|","type":"codeVoice"},{"type":"text","text":", "},{"code":"^","type":"codeVoice"},{"type":"text","text":", "},{"code":"?","type":"codeVoice"},{"type":"text","text":", or "},{"code":"~","type":"codeVoice"},{"type":"text","text":", or one of the Unicode characters defined in the grammar below (which include characters from the "},{"inlineContent":[{"type":"text","text":"Mathematical Operators"}],"type":"emphasis"},{"type":"text","text":", "},{"inlineContent":[{"type":"text","text":"Miscellaneous Symbols"}],"type":"emphasis"},{"type":"text","text":", and "},{"inlineContent":[{"type":"text","text":"Dingbats"}],"type":"emphasis"},{"type":"text","text":" Unicode blocks, among others). After the first character, combining Unicode characters are also allowed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can also define custom operators that begin with a dot ("},{"code":".","type":"codeVoice"},{"type":"text","text":"). These operators can contain additional dots. For example, "},{"code":".+.","type":"codeVoice"},{"type":"text","text":" is treated as a single operator. If an operator doesn’t begin with a dot, it can’t contain a dot elsewhere. For example, "},{"code":"+.+","type":"codeVoice"},{"type":"text","text":" is treated as the "},{"code":"+","type":"codeVoice"},{"type":"text","text":" operator followed by the "},{"code":".+","type":"codeVoice"},{"type":"text","text":" operator."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Although you can define custom operators that contain a question mark ("},{"code":"?","type":"codeVoice"},{"type":"text","text":"), they can’t consist of a single question mark character only. Additionally, although operators can contain an exclamation point ("},{"code":"!","type":"codeVoice"},{"type":"text","text":"), postfix operators can’t begin with either a question mark or an exclamation point."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The tokens ","type":"text"},{"code":"=","type":"codeVoice"},{"text":", ","type":"text"},{"code":"->","type":"codeVoice"},{"text":", ","type":"text"},{"code":"\/\/","type":"codeVoice"},{"text":", ","type":"text"},{"code":"\/*","type":"codeVoice"},{"text":", ","type":"text"},{"code":"*\/","type":"codeVoice"},{"text":", ","type":"text"},{"code":".","type":"codeVoice"},{"text":", the prefix operators ","type":"text"},{"code":"<","type":"codeVoice"},{"text":", ","type":"text"},{"code":"&","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"?","type":"codeVoice"},{"text":", the infix operator ","type":"text"},{"code":"?","type":"codeVoice"},{"text":", and the postfix operators ","type":"text"},{"code":">","type":"codeVoice"},{"text":", ","type":"text"},{"code":"!","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"?","type":"codeVoice"},{"text":" are reserved. These tokens can’t be overloaded, nor can they be used as custom operators.","type":"text"}]}],"style":"note","name":"Note","type":"aside"},{"inlineContent":[{"text":"The whitespace around an operator is used to determine whether an operator is used as a prefix operator, a postfix operator, or an infix operator. This behavior has the following rules:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"If an operator has whitespace around both sides or around neither side, it’s treated as an infix operator. As an example, the ","type":"text"},{"code":"+++","type":"codeVoice"},{"text":" operator in ","type":"text"},{"code":"a+++b","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"a +++ b","type":"codeVoice"},{"text":" is treated as an infix operator.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If an operator has whitespace on the left side only, it’s treated as a prefix unary operator. As an example, the "},{"type":"codeVoice","code":"+++"},{"type":"text","text":" operator in "},{"type":"codeVoice","code":"a +++b"},{"type":"text","text":" is treated as a prefix unary operator."}]}]},{"content":[{"inlineContent":[{"text":"If an operator has whitespace on the right side only, it’s treated as a postfix unary operator. As an example, the ","type":"text"},{"type":"codeVoice","code":"+++"},{"text":" operator in ","type":"text"},{"type":"codeVoice","code":"a+++ b"},{"text":" is treated as a postfix unary operator.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If an operator has no whitespace on the left but is followed immediately by a dot ("},{"type":"codeVoice","code":"."},{"type":"text","text":"), it’s treated as a postfix unary operator. As an example, the "},{"type":"codeVoice","code":"+++"},{"type":"text","text":" operator in "},{"type":"codeVoice","code":"a+++.b"},{"type":"text","text":" is treated as a postfix unary operator ("},{"type":"codeVoice","code":"a+++ .b"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"a +++ .b"},{"type":"text","text":")."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"For the purposes of these rules, the characters "},{"type":"codeVoice","code":"("},{"type":"text","text":", "},{"type":"codeVoice","code":"["},{"type":"text","text":", and "},{"type":"codeVoice","code":"{"},{"type":"text","text":" before an operator, the characters "},{"type":"codeVoice","code":")"},{"type":"text","text":", "},{"type":"codeVoice","code":"]"},{"type":"text","text":", and "},{"type":"codeVoice","code":"}"},{"type":"text","text":" after an operator, and the characters "},{"type":"codeVoice","code":","},{"type":"text","text":", "},{"type":"codeVoice","code":";"},{"type":"text","text":", and "},{"type":"codeVoice","code":":"},{"type":"text","text":" are also considered whitespace."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If the "},{"type":"codeVoice","code":"!"},{"type":"text","text":" or "},{"type":"codeVoice","code":"?"},{"type":"text","text":" predefined operator has no whitespace on the left, it’s treated as a postfix operator, regardless of whether it has whitespace on the right. To use the "},{"type":"codeVoice","code":"?"},{"type":"text","text":" as the optional-chaining operator, it must not have whitespace on the left. To use it in the ternary conditional ("},{"type":"codeVoice","code":"?"},{"type":"text","text":" "},{"type":"codeVoice","code":":"},{"type":"text","text":") operator, it must have whitespace around both sides."}],"type":"paragraph"},{"inlineContent":[{"text":"If one of the arguments to an infix operator is a regular expression literal, then the operator must have whitespace around both sides.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In certain constructs, operators with a leading "},{"type":"codeVoice","code":"<"},{"type":"text","text":" or "},{"type":"codeVoice","code":">"},{"type":"text","text":" may be split into two or more tokens. The remainder is treated the same way and may be split again. As a result, you don’t need to add whitespace to disambiguate between the closing "},{"type":"codeVoice","code":">"},{"type":"text","text":" characters in constructs like "},{"type":"codeVoice","code":"Dictionary<String, Array<Int>>"},{"type":"text","text":". In this example, the closing "},{"type":"codeVoice","code":">"},{"type":"text","text":" characters aren’t treated as a single token that may then be misinterpreted as a bit shift "},{"type":"codeVoice","code":">>"},{"type":"text","text":" operator."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To learn how to define new, custom operators, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Custom-Operators","isActive":true,"type":"reference"},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Operator-Declaration","isActive":true,"type":"reference"},{"type":"text","text":". To learn how to overload existing operators, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Operator-Methods","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"style":"note","name":"Grammar of operators","type":"aside"}]}],"kind":"article","metadata":{"role":"article","title":"Lexical Structure","roleHeading":"Article","modules":[{"name":"Swift"}]},"references":{"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Custom-Operators":{"url":"\/documentation\/swift\/advancedoperators#Custom-Operators","title":"Custom Operators","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Custom-Operators","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Declarations#Operator-Declaration":{"url":"\/documentation\/swift\/declarations#Operator-Declaration","title":"Operator Declaration","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Operator-Declaration","kind":"section"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure#Identifiers":{"url":"\/documentation\/swift\/lexicalstructure#Identifiers","title":"Identifiers","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Identifiers","kind":"section"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","abstract":[{"text":"An ","type":"text"},{"inlineContent":[{"text":"operator","type":"text"}],"type":"emphasis"},{"text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (","type":"text"},{"code":"+","type":"codeVoice"},{"text":") adds two numbers, as in ","type":"text"},{"code":"let i = 1 + 2","type":"codeVoice"},{"text":", and the logical AND operator (","type":"text"},{"code":"&&","type":"codeVoice"},{"text":") combines two Boolean values, as in ","type":"text"},{"code":"if enteredDoorCode && passedRetinaScan","type":"codeVoice"},{"text":".","type":"text"}],"kind":"article","url":"\/documentation\/swift\/basicoperators","title":"Basic Operators","type":"topic","role":"article"},"doc://com.apple.Swift/documentation/Swift/TheBasics#Integers":{"url":"\/documentation\/swift\/thebasics#Integers","title":"Integers","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Integers","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Statements":{"abstract":[{"text":"In Swift, there are three kinds of statements: simple statements, compiler control statements, and control flow statements. Simple statements are the most common and consist of either an expression or a declaration. Compiler control statements allow the program to change aspects of the compiler’s behavior and include a conditional compilation block and a line control statement.","type":"text"}],"url":"\/documentation\/swift\/statements","role":"article","title":"Statements","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift":{"title":"Swift","url":"\/documentation\/swift","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","role":"collection","type":"topic"},"https://developer.apple.com/library/content/documentation/Xcode/Reference/xcode_markup_formatting_ref/index.html":{"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html","title":"Markup Formatting Reference","titleInlineContent":[{"text":"Markup Formatting Reference","type":"text"}],"type":"link","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Xcode\/Reference\/xcode_markup_formatting_ref\/index.html"},"https://developer.apple.com/documentation/swift/string":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/string","title":"String","titleInlineContent":[{"type":"text","text":"String"}],"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/string"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"url":"\/documentation\/swift\/advancedoperators","role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","isActive":true},{"type":"text","text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Patterns":{"abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"text":" represents the structure of a single value or a composite value. For example, the structure of a tuple ","type":"text"},{"type":"codeVoice","code":"(1, 2)"},{"text":" is a comma-separated list of two elements. Because patterns represent the structure of a value rather than any one particular value, you can match them with a variety of values. For instance, the pattern ","type":"text"},{"type":"codeVoice","code":"(x, y)"},{"text":" matches the tuple ","type":"text"},{"type":"codeVoice","code":"(1, 2)"},{"text":" and any other two-element tuple. In addition to matching a pattern with a value, you can extract part or all of a composite value and bind each part to a constant or variable name.","type":"text"}],"url":"\/documentation\/swift\/patterns","role":"article","title":"Patterns","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Operator-Methods":{"url":"\/documentation\/swift\/advancedoperators#Operator-Methods","title":"Operator Methods","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Operator-Methods","kind":"section"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"url":"\/documentation\/swift\/stringsandcharacters","role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"text":"string","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a series of characters, such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":". Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"text":" type. The contents of a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" can be accessed in various ways, including as a collection of ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" values.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Attributes#propertyWrapper":{"type":"topic","url":"\/documentation\/swift\/attributes#propertyWrapper","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#propertyWrapper","kind":"section","title":"propertyWrapper"},"doc://com.apple.Swift/documentation/Swift/AboutTheLanguageReference":{"abstract":[{"text":"This part of the book describes the formal grammar of the Swift programming language. The grammar described here is intended to help you understand the language in more detail, rather than to allow you to directly implement a parser or compiler.","type":"text"}],"url":"\/documentation\/swift\/aboutthelanguagereference","role":"article","title":"About the Language Reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AboutTheLanguageReference","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Expressions":{"abstract":[{"text":"In Swift, there are four kinds of expressions: prefix expressions, infix expressions, primary expressions, and postfix expressions. Evaluating an expression returns a value, causes a side effect, or both.","type":"text"}],"url":"\/documentation\/swift\/expressions","role":"article","title":"Expressions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/zzSummaryOfTheGrammar":{"abstract":[],"url":"\/documentation\/swift\/zzsummaryofthegrammar","role":"article","title":"Summary of the Grammar","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Attributes":{"abstract":[{"text":"There are two kinds of attributes in Swift—those that apply to declarations and those that apply to types. An attribute provides additional information about the declaration or type. For example, the ","type":"text"},{"type":"codeVoice","code":"discardableResult"},{"text":" attribute on a function declaration indicates that, although the function returns a value, the compiler shouldn’t generate a warning if the return value is unused.","type":"text"}],"url":"\/documentation\/swift\/attributes","role":"article","title":"Attributes","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/GenericParametersAndArguments":{"abstract":[{"text":"This chapter describes parameters and arguments for generic types, functions, and initializers. When you declare a generic type, function, subscript, or initializer, you specify the type parameters that the generic type, function, or initializer can work with. These type parameters act as placeholders that are replaced by actual concrete type arguments when an instance of a generic type is created or a generic function or initializer is called.","type":"text"}],"url":"\/documentation\/swift\/genericparametersandarguments","role":"article","title":"Generic Parameters and Arguments","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure#Operators":{"title":"Operators","abstract":[],"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Operators","type":"topic","url":"\/documentation\/swift\/lexicalstructure#Operators"},"doc://com.apple.Swift/documentation/Swift/Declarations":{"abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"declaration","type":"text"}]},{"text":" introduces a new name or construct into your program. For example, you use declarations to introduce functions and methods, to introduce variables and constants, and to define enumeration, structure, class, and protocol types. You can also use a declaration to extend the behavior of an existing named type and to import symbols into your program that are declared elsewhere.","type":"text"}],"url":"\/documentation\/swift\/declarations","role":"article","title":"Declarations","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Types":{"abstract":[{"text":"In Swift, there are two kinds of types: named types and compound types. A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"named type","type":"text"}]},{"text":" is a type that can be given a particular name when it’s defined. Named types include classes, structures, enumerations, and protocols. For example, instances of a user-defined class named ","type":"text"},{"type":"codeVoice","code":"MyClass"},{"text":" have the type ","type":"text"},{"type":"codeVoice","code":"MyClass"},{"text":". In addition to user-defined named types, the Swift standard library defines many commonly used named types, including those that represent arrays, dictionaries, and optional values.","type":"text"}],"url":"\/documentation\/swift\/types","role":"article","title":"Types","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","type":"topic","kind":"article"}}}