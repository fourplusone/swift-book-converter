{"schemaVersion":{"patch":0,"major":0,"minor":3},"abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators"},{"type":"text","text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C."}],"kind":"article","seeAlsoSections":[{"generated":true,"title":"Language Guide","identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl"]}],"sections":[],"metadata":{"modules":[{"name":"Swift"}],"role":"article","title":"Advanced Operators","roleHeading":"Article"},"variants":[{"paths":["\/documentation\/swift\/advancedoperators"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"content":[{"type":"heading","anchor":"overview","text":"Overview","level":2},{"type":"paragraph","inlineContent":[{"text":"Unlike arithmetic operators in C, arithmetic operators in Swift don’t overflow by default. Overflow behavior is trapped and reported as an error. To opt in to overflow behavior, use Swift’s second set of arithmetic operators that overflow by default, such as the overflow addition operator (","type":"text"},{"type":"codeVoice","code":"&+"},{"text":"). All of these overflow operators begin with an ampersand (","type":"text"},{"code":"&","type":"codeVoice"},{"text":").","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"When you define your own structures, classes, and enumerations, it can be useful to provide your own implementations of the standard Swift operators for these custom types. Swift makes it easy to provide tailored implementations of these operators and to determine exactly what their behavior should be for each type you create.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You’re not limited to the predefined operators. Swift gives you the freedom to define your own custom infix, prefix, postfix, and assignment operators, with custom precedence and associativity values. These operators can be used and adopted in your code like any of the predefined operators, and you can even extend existing types to support the custom operators you define.","type":"text"}]},{"type":"heading","anchor":"Bitwise-Operators","text":"Bitwise Operators","level":2},{"type":"paragraph","inlineContent":[{"inlineContent":[{"type":"text","text":"Bitwise operators"}],"type":"emphasis"},{"text":" enable you to manipulate the individual raw data bits within a data structure. They’re often used in low-level programming, such as graphics programming and device driver creation. Bitwise operators can also be useful when you work with raw data from external sources, such as encoding and decoding data for communication over a custom protocol.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Swift supports all of the bitwise operators found in C, as described below."}],"type":"paragraph"},{"text":"Bitwise NOT Operator","anchor":"Bitwise-NOT-Operator","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"bitwise NOT operator"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"~"},{"type":"text","text":") inverts all bits in a number:"}],"type":"paragraph"},{"inlineContent":[{"identifier":"bitwiseNOT","type":"image"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The bitwise NOT operator is a prefix operator, and appears immediately before the value it operates on, without any white space:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let initialBits: UInt8 = 0b00001111","let invertedBits = ~initialBits  \/\/ equals 11110000"]},{"inlineContent":[{"code":"UInt8","type":"codeVoice"},{"text":" integers have eight bits and can store any value between ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"255","type":"codeVoice"},{"text":". This example initializes a ","type":"text"},{"code":"UInt8","type":"codeVoice"},{"text":" integer with the binary value ","type":"text"},{"code":"00001111","type":"codeVoice"},{"text":", which has its first four bits set to ","type":"text"},{"code":"0","type":"codeVoice"},{"text":", and its second four bits set to ","type":"text"},{"code":"1","type":"codeVoice"},{"text":". This is equivalent to a decimal value of ","type":"text"},{"code":"15","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The bitwise NOT operator is then used to create a new constant called "},{"type":"codeVoice","code":"invertedBits"},{"type":"text","text":", which is equal to "},{"type":"codeVoice","code":"initialBits"},{"type":"text","text":", but with all of the bits inverted. Zeros become ones, and ones become zeros. The value of "},{"type":"codeVoice","code":"invertedBits"},{"type":"text","text":" is "},{"type":"codeVoice","code":"11110000"},{"type":"text","text":", which is equal to an unsigned decimal value of "},{"type":"codeVoice","code":"240"},{"type":"text","text":"."}],"type":"paragraph"},{"text":"Bitwise AND Operator","anchor":"Bitwise-AND-Operator","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"text":"bitwise AND operator","type":"text"}],"type":"emphasis"},{"type":"text","text":" ("},{"code":"&","type":"codeVoice"},{"type":"text","text":") combines the bits of two numbers. It returns a new number whose bits are set to "},{"code":"1","type":"codeVoice"},{"type":"text","text":" only if the bits were equal to "},{"code":"1","type":"codeVoice"},{"type":"text","text":" in "},{"inlineContent":[{"text":"both","type":"text"}],"type":"emphasis"},{"type":"text","text":" input numbers:"}],"type":"paragraph"},{"inlineContent":[{"identifier":"bitwiseAND","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"In the example below, the values of ","type":"text"},{"code":"firstSixBits","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"lastSixBits","type":"codeVoice"},{"text":" both have four middle bits equal to ","type":"text"},{"code":"1","type":"codeVoice"},{"text":". The bitwise AND operator combines them to make the number ","type":"text"},{"code":"00111100","type":"codeVoice"},{"text":", which is equal to an unsigned decimal value of ","type":"text"},{"code":"60","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let firstSixBits: UInt8 = 0b11111100","let lastSixBits: UInt8  = 0b00111111","let middleFourBits = firstSixBits & lastSixBits  \/\/ equals 00111100"]},{"text":"Bitwise OR Operator","anchor":"Bitwise-OR-Operator","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"text":"bitwise OR operator","type":"text"}]},{"type":"text","text":" ("},{"type":"codeVoice","code":"|"},{"type":"text","text":") compares the bits of two numbers. The operator returns a new number whose bits are set to "},{"type":"codeVoice","code":"1"},{"type":"text","text":" if the bits are equal to "},{"type":"codeVoice","code":"1"},{"type":"text","text":" in "},{"type":"emphasis","inlineContent":[{"type":"text","text":"either"}]},{"type":"text","text":" input number:"}],"type":"paragraph"},{"inlineContent":[{"identifier":"bitwiseOR","type":"image"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In the example below, the values of "},{"type":"codeVoice","code":"someBits"},{"type":"text","text":" and "},{"type":"codeVoice","code":"moreBits"},{"type":"text","text":" have different bits set to "},{"type":"codeVoice","code":"1"},{"type":"text","text":". The bitwise OR operator combines them to make the number "},{"type":"codeVoice","code":"11111110"},{"type":"text","text":", which equals an unsigned decimal of "},{"type":"codeVoice","code":"254"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let someBits: UInt8 = 0b10110010","let moreBits: UInt8 = 0b01011110","let combinedbits = someBits | moreBits  \/\/ equals 11111110"]},{"text":"Bitwise XOR Operator","anchor":"Bitwise-XOR-Operator","type":"heading","level":3},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"bitwise XOR operator"}]},{"text":", or “exclusive OR operator” (","type":"text"},{"code":"^","type":"codeVoice"},{"type":"text","text":"), compares the bits of two numbers. The operator returns a new number whose bits are set to "},{"code":"1","type":"codeVoice"},{"type":"text","text":" where the input bits are different and are set to "},{"code":"0","type":"codeVoice"},{"type":"text","text":" where the input bits are the same:"}],"type":"paragraph"},{"inlineContent":[{"identifier":"bitwiseXOR","type":"image"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In the example below, the values of "},{"type":"codeVoice","code":"firstBits"},{"type":"text","text":" and "},{"type":"codeVoice","code":"otherBits"},{"type":"text","text":" each have a bit set to "},{"type":"codeVoice","code":"1"},{"type":"text","text":" in a location that the other does not. The bitwise XOR operator sets both of these bits to "},{"type":"codeVoice","code":"1"},{"type":"text","text":" in its output value. All of the other bits in "},{"type":"codeVoice","code":"firstBits"},{"type":"text","text":" and "},{"type":"codeVoice","code":"otherBits"},{"type":"text","text":" match and are set to "},{"type":"codeVoice","code":"0"},{"type":"text","text":" in the output value:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let firstBits: UInt8 = 0b00010100","let otherBits: UInt8 = 0b00000101","let outputBits = firstBits ^ otherBits  \/\/ equals 00010001"]},{"text":"Bitwise Left and Right Shift Operators","anchor":"Bitwise-Left-and-Right-Shift-Operators","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"bitwise left shift operator"}],"type":"emphasis"},{"type":"text","text":" ("},{"type":"codeVoice","code":"<<"},{"type":"text","text":") and "},{"inlineContent":[{"text":"bitwise right shift operator","type":"text"}],"type":"emphasis"},{"type":"text","text":" ("},{"type":"codeVoice","code":">>"},{"type":"text","text":") move all bits in a number to the left or the right by a certain number of places, according to the rules defined below."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Bitwise left and right shifts have the effect of multiplying or dividing an integer by a factor of two. Shifting an integer’s bits to the left by one position doubles its value, whereas shifting it to the right by one position halves its value."}],"type":"paragraph"},{"text":"Shifting Behavior for Unsigned Integers","anchor":"Shifting-Behavior-for-Unsigned-Integers","type":"heading","level":4},{"inlineContent":[{"type":"text","text":"The bit-shifting behavior for unsigned integers is as follows:"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"text":"Existing bits are moved to the left or right by the requested number of places.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Any bits that are moved beyond the bounds of the integer’s storage are discarded.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Zeros are inserted in the spaces left behind after the original bits are moved to the left or right.","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"This approach is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"logical shift"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The illustration below shows the results of "},{"type":"codeVoice","code":"11111111 << 1"},{"type":"text","text":" (which is "},{"type":"codeVoice","code":"11111111"},{"type":"text","text":" shifted to the left by "},{"type":"codeVoice","code":"1"},{"type":"text","text":" place), and "},{"type":"codeVoice","code":"11111111 >> 1"},{"type":"text","text":" (which is "},{"type":"codeVoice","code":"11111111"},{"type":"text","text":" shifted to the right by "},{"type":"codeVoice","code":"1"},{"type":"text","text":" place). Blue numbers are shifted, gray numbers are discarded, and orange zeros are inserted:"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"bitshiftUnsigned"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here’s how bit shifting looks in Swift code:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let shiftBits: UInt8 = 4   \/\/ 00000100 in binary","shiftBits << 1             \/\/ 00001000","shiftBits << 2             \/\/ 00010000","shiftBits << 5             \/\/ 10000000","shiftBits << 6             \/\/ 00000000","shiftBits >> 2             \/\/ 00000001"]},{"inlineContent":[{"type":"text","text":"You can use bit shifting to encode and decode values within other data types:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let pink: UInt32 = 0xCC6699","let redComponent = (pink & 0xFF0000) >> 16    \/\/ redComponent is 0xCC, or 204","let greenComponent = (pink & 0x00FF00) >> 8   \/\/ greenComponent is 0x66, or 102","let blueComponent = pink & 0x0000FF           \/\/ blueComponent is 0x99, or 153"]},{"inlineContent":[{"type":"text","text":"This example uses a "},{"type":"codeVoice","code":"UInt32"},{"type":"text","text":" constant called "},{"type":"codeVoice","code":"pink"},{"type":"text","text":" to store a Cascading Style Sheets color value for the color pink. The CSS color value "},{"type":"codeVoice","code":"#CC6699"},{"type":"text","text":" is written as "},{"type":"codeVoice","code":"0xCC6699"},{"type":"text","text":" in Swift’s hexadecimal number representation. This color is then decomposed into its red ("},{"type":"codeVoice","code":"CC"},{"type":"text","text":"), green ("},{"type":"codeVoice","code":"66"},{"type":"text","text":"), and blue ("},{"type":"codeVoice","code":"99"},{"type":"text","text":") components by the bitwise AND operator ("},{"type":"codeVoice","code":"&"},{"type":"text","text":") and the bitwise right shift operator ("},{"type":"codeVoice","code":">>"},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The red component is obtained by performing a bitwise AND between the numbers "},{"type":"codeVoice","code":"0xCC6699"},{"type":"text","text":" and "},{"type":"codeVoice","code":"0xFF0000"},{"type":"text","text":". The zeros in "},{"type":"codeVoice","code":"0xFF0000"},{"type":"text","text":" effectively “mask” the second and third bytes of "},{"type":"codeVoice","code":"0xCC6699"},{"type":"text","text":", causing the "},{"type":"codeVoice","code":"6699"},{"type":"text","text":" to be ignored and leaving "},{"type":"codeVoice","code":"0xCC0000"},{"type":"text","text":" as the result."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This number is then shifted 16 places to the right ("},{"type":"codeVoice","code":">> 16"},{"type":"text","text":"). Each pair of characters in a hexadecimal number uses 8 bits, so a move 16 places to the right will convert "},{"type":"codeVoice","code":"0xCC0000"},{"type":"text","text":" into "},{"type":"codeVoice","code":"0x0000CC"},{"type":"text","text":". This is the same as "},{"type":"codeVoice","code":"0xCC"},{"type":"text","text":", which has a decimal value of "},{"type":"codeVoice","code":"204"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Similarly, the green component is obtained by performing a bitwise AND between the numbers "},{"type":"codeVoice","code":"0xCC6699"},{"type":"text","text":" and "},{"type":"codeVoice","code":"0x00FF00"},{"type":"text","text":", which gives an output value of "},{"type":"codeVoice","code":"0x006600"},{"type":"text","text":". This output value is then shifted eight places to the right, giving a value of "},{"type":"codeVoice","code":"0x66"},{"type":"text","text":", which has a decimal value of "},{"type":"codeVoice","code":"102"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Finally, the blue component is obtained by performing a bitwise AND between the numbers "},{"type":"codeVoice","code":"0xCC6699"},{"type":"text","text":" and "},{"type":"codeVoice","code":"0x0000FF"},{"type":"text","text":", which gives an output value of "},{"type":"codeVoice","code":"0x000099"},{"type":"text","text":". Because "},{"type":"codeVoice","code":"0x000099"},{"type":"text","text":" already equals "},{"type":"codeVoice","code":"0x99"},{"type":"text","text":", which has a decimal value of "},{"type":"codeVoice","code":"153"},{"type":"text","text":", this value is used without shifting it to the right,"}],"type":"paragraph"},{"text":"Shifting Behavior for Signed Integers","anchor":"Shifting-Behavior-for-Signed-Integers","type":"heading","level":4},{"inlineContent":[{"text":"The shifting behavior is more complex for signed integers than for unsigned integers, because of the way signed integers are represented in binary. (The examples below are based on 8-bit signed integers for simplicity, but the same principles apply for signed integers of any size.)","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Signed integers use their first bit (known as the "},{"type":"emphasis","inlineContent":[{"text":"sign bit","type":"text"}]},{"type":"text","text":") to indicate whether the integer is positive or negative. A sign bit of "},{"code":"0","type":"codeVoice"},{"type":"text","text":" means positive, and a sign bit of "},{"code":"1","type":"codeVoice"},{"type":"text","text":" means negative."}],"type":"paragraph"},{"inlineContent":[{"text":"The remaining bits (known as the ","type":"text"},{"inlineContent":[{"type":"text","text":"value bits"}],"type":"emphasis"},{"text":") store the actual value. Positive numbers are stored in exactly the same way as for unsigned integers, counting upwards from ","type":"text"},{"code":"0","type":"codeVoice"},{"text":". Here’s how the bits inside an ","type":"text"},{"code":"Int8","type":"codeVoice"},{"text":" look for the number ","type":"text"},{"code":"4","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"bitshiftSignedFour"}],"type":"paragraph"},{"inlineContent":[{"text":"The sign bit is ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" (meaning “positive”), and the seven value bits are just the number ","type":"text"},{"code":"4","type":"codeVoice"},{"text":", written in binary notation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Negative numbers, however, are stored differently. They’re stored by subtracting their absolute value from ","type":"text"},{"code":"2","type":"codeVoice"},{"text":" to the power of ","type":"text"},{"code":"n","type":"codeVoice"},{"text":", where ","type":"text"},{"code":"n","type":"codeVoice"},{"text":" is the number of value bits. An eight-bit number has seven value bits, so this means ","type":"text"},{"code":"2","type":"codeVoice"},{"text":" to the power of ","type":"text"},{"code":"7","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"128","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Here’s how the bits inside an ","type":"text"},{"code":"Int8","type":"codeVoice"},{"text":" look for the number ","type":"text"},{"type":"codeVoice","code":"-4"},{"text":":","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"bitshiftSignedMinusFour"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This time, the sign bit is "},{"type":"codeVoice","code":"1"},{"type":"text","text":" (meaning “negative”), and the seven value bits have a binary value of "},{"type":"codeVoice","code":"124"},{"type":"text","text":" (which is "},{"type":"codeVoice","code":"128 - 4"},{"type":"text","text":"):"}],"type":"paragraph"},{"inlineContent":[{"identifier":"bitshiftSignedMinusFourValue","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"This encoding for negative numbers is known as a ","type":"text"},{"inlineContent":[{"type":"text","text":"two’s complement"}],"type":"emphasis"},{"text":" representation. It may seem an unusual way to represent negative numbers, but it has several advantages.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"First, you can add ","type":"text"},{"code":"-1","type":"codeVoice"},{"text":" to ","type":"text"},{"code":"-4","type":"codeVoice"},{"text":", simply by performing a standard binary addition of all eight bits (including the sign bit), and discarding anything that doesn’t fit in the eight bits once you’re done:","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"bitshiftSignedAddition"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Second, the two’s complement representation also lets you shift the bits of negative numbers to the left and right like positive numbers, and still end up doubling them for every shift you make to the left, or halving them for every shift you make to the right. To achieve this, an extra rule is used when signed integers are shifted to the right: When you shift signed integers to the right, apply the same rules as for unsigned integers, but fill any empty bits on the left with the "},{"type":"emphasis","inlineContent":[{"text":"sign bit","type":"text"}]},{"type":"text","text":", rather than with a zero."}],"type":"paragraph"},{"inlineContent":[{"identifier":"bitshiftSigned","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"This action ensures that signed integers have the same sign after they’re shifted to the right, and is known as an ","type":"text"},{"inlineContent":[{"type":"text","text":"arithmetic shift"}],"type":"emphasis"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Because of the special way that positive and negative numbers are stored, shifting either of them to the right moves them closer to zero. Keeping the sign bit the same during this shift means that negative integers remain negative as their value moves closer to zero."}],"type":"paragraph"},{"text":"Overflow Operators","anchor":"Overflow-Operators","type":"heading","level":2},{"inlineContent":[{"text":"If you try to insert a number into an integer constant or variable that can’t hold that value, by default Swift reports an error rather than allowing an invalid value to be created. This behavior gives extra safety when you work with numbers that are too large or too small.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For example, the ","type":"text"},{"code":"Int16","type":"codeVoice"},{"text":" integer type can hold any signed integer between ","type":"text"},{"code":"-32768","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"32767","type":"codeVoice"},{"text":". Trying to set an ","type":"text"},{"code":"Int16","type":"codeVoice"},{"text":" constant or variable to a number outside of this range causes an error:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var potentialOverflow = Int16.max","\/\/ potentialOverflow equals 32767, which is the maximum value an Int16 can hold","potentialOverflow += 1","\/\/ this causes an error"]},{"inlineContent":[{"type":"text","text":"Providing error handling when values get too large or too small gives you much more flexibility when coding for boundary value conditions."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, when you specifically want an overflow condition to truncate the number of available bits, you can opt in to this behavior rather than triggering an error. Swift provides three arithmetic "},{"type":"emphasis","inlineContent":[{"type":"text","text":"overflow operators"}]},{"type":"text","text":" that opt in to the overflow behavior for integer calculations. These operators all begin with an ampersand ("},{"type":"codeVoice","code":"&"},{"type":"text","text":"):"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Overflow addition (","type":"text"},{"code":"&+","type":"codeVoice"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Overflow subtraction (","type":"text"},{"code":"&-","type":"codeVoice"},{"text":")","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Overflow multiplication (","type":"text"},{"code":"&*","type":"codeVoice"},{"text":")","type":"text"}]}]}]},{"text":"Value Overflow","anchor":"Value-Overflow","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Numbers can overflow in both the positive and negative direction."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here’s an example of what happens when an unsigned integer is allowed to overflow in the positive direction, using the overflow addition operator ("},{"type":"codeVoice","code":"&+"},{"type":"text","text":"):"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var unsignedOverflow = UInt8.max","\/\/ unsignedOverflow equals 255, which is the maximum value a UInt8 can hold","unsignedOverflow = unsignedOverflow &+ 1","\/\/ unsignedOverflow is now equal to 0"]},{"inlineContent":[{"type":"text","text":"The variable "},{"code":"unsignedOverflow","type":"codeVoice"},{"type":"text","text":" is initialized with the maximum value a "},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":" can hold ("},{"code":"255","type":"codeVoice"},{"type":"text","text":", or "},{"code":"11111111","type":"codeVoice"},{"type":"text","text":" in binary). It’s then incremented by "},{"code":"1","type":"codeVoice"},{"type":"text","text":" using the overflow addition operator ("},{"code":"&+","type":"codeVoice"},{"type":"text","text":"). This pushes its binary representation just over the size that a "},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":" can hold, causing it to overflow beyond its bounds, as shown in the diagram below. The value that remains within the bounds of the "},{"code":"UInt8","type":"codeVoice"},{"type":"text","text":" after the overflow addition is "},{"code":"00000000","type":"codeVoice"},{"type":"text","text":", or zero."}],"type":"paragraph"},{"inlineContent":[{"identifier":"overflowAddition","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"Something similar happens when an unsigned integer is allowed to overflow in the negative direction. Here’s an example using the overflow subtraction operator (","type":"text"},{"type":"codeVoice","code":"&-"},{"text":"):","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var unsignedOverflow = UInt8.min","\/\/ unsignedOverflow equals 0, which is the minimum value a UInt8 can hold","unsignedOverflow = unsignedOverflow &- 1","\/\/ unsignedOverflow is now equal to 255"]},{"inlineContent":[{"text":"The minimum value that a ","type":"text"},{"code":"UInt8","type":"codeVoice"},{"text":" can hold is zero, or ","type":"text"},{"code":"00000000","type":"codeVoice"},{"text":" in binary. If you subtract ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"00000000","type":"codeVoice"},{"text":" using the overflow subtraction operator (","type":"text"},{"code":"&-","type":"codeVoice"},{"text":"), the number will overflow and wrap around to ","type":"text"},{"code":"11111111","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"255","type":"codeVoice"},{"text":" in decimal.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"overflowUnsignedSubtraction"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Overflow also occurs for signed integers. All addition and subtraction for signed integers is performed in bitwise fashion, with the sign bit included as part of the numbers being added or subtracted, as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Bitwise-Left-and-Right-Shift-Operators"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var signedOverflow = Int8.min","\/\/ signedOverflow equals -128, which is the minimum value an Int8 can hold","signedOverflow = signedOverflow &- 1","\/\/ signedOverflow is now equal to 127"]},{"inlineContent":[{"text":"The minimum value that an ","type":"text"},{"type":"codeVoice","code":"Int8"},{"text":" can hold is ","type":"text"},{"type":"codeVoice","code":"-128"},{"text":", or ","type":"text"},{"type":"codeVoice","code":"10000000"},{"text":" in binary. Subtracting ","type":"text"},{"type":"codeVoice","code":"1"},{"text":" from this binary number with the overflow operator gives a binary value of ","type":"text"},{"type":"codeVoice","code":"01111111"},{"text":", which toggles the sign bit and gives positive ","type":"text"},{"type":"codeVoice","code":"127"},{"text":", the maximum positive value that an ","type":"text"},{"type":"codeVoice","code":"Int8"},{"text":" can hold.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"overflowSignedSubtraction"}],"type":"paragraph"},{"inlineContent":[{"text":"For both signed and unsigned integers, overflow in the positive direction wraps around from the maximum valid integer value back to the minimum, and overflow in the negative direction wraps around from the minimum value to the maximum.","type":"text"}],"type":"paragraph"},{"text":"Precedence and Associativity","anchor":"Precedence-and-Associativity","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Operator "},{"inlineContent":[{"text":"precedence","type":"text"}],"type":"emphasis"},{"type":"text","text":" gives some operators higher priority than others; these operators are applied first."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Operator "},{"type":"emphasis","inlineContent":[{"type":"text","text":"associativity"}]},{"type":"text","text":" defines how operators of the same precedence are grouped together—either grouped from the left, or grouped from the right. Think of it as meaning “they associate with the expression to their left,” or “they associate with the expression to their right.”"}],"type":"paragraph"},{"inlineContent":[{"text":"It’s important to consider each operator’s precedence and associativity when working out the order in which a compound expression will be calculated. For example, operator precedence explains why the following expression equals ","type":"text"},{"code":"17","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["2 + 3 % 4 * 5","\/\/ this equals 17"]},{"inlineContent":[{"text":"If you read strictly from left to right, you might expect the expression to be calculated as follows:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"2"},{"type":"text","text":" plus "},{"type":"codeVoice","code":"3"},{"type":"text","text":" equals "},{"type":"codeVoice","code":"5"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"5","type":"codeVoice"},{"text":" remainder ","type":"text"},{"code":"4","type":"codeVoice"},{"text":" equals ","type":"text"},{"code":"1","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"1"},{"text":" times ","type":"text"},{"type":"codeVoice","code":"5"},{"text":" equals ","type":"text"},{"type":"codeVoice","code":"5"}]}]}]},{"inlineContent":[{"type":"text","text":"However, the actual answer is "},{"type":"codeVoice","code":"17"},{"type":"text","text":", not "},{"type":"codeVoice","code":"5"},{"type":"text","text":". Higher-precedence operators are evaluated before lower-precedence ones. In Swift, as in C, the remainder operator ("},{"type":"codeVoice","code":"%"},{"type":"text","text":") and the multiplication operator ("},{"type":"codeVoice","code":"*"},{"type":"text","text":") have a higher precedence than the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":"). As a result, they’re both evaluated before the addition is considered."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, remainder and multiplication have the "},{"type":"emphasis","inlineContent":[{"text":"same","type":"text"}]},{"type":"text","text":" precedence as each other. To work out the exact evaluation order to use, you also need to consider their associativity. Remainder and multiplication both associate with the expression to their left. Think of this as adding implicit parentheses around these parts of the expression, starting from their left:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["2 + ((3 % 4) * 5)"]},{"inlineContent":[{"type":"codeVoice","code":"(3 % 4)"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"3"},{"text":", so this is equivalent to:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["2 + (3 * 5)"]},{"inlineContent":[{"type":"codeVoice","code":"(3 * 5)"},{"type":"text","text":" is "},{"type":"codeVoice","code":"15"},{"type":"text","text":", so this is equivalent to:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["2 + 15"]},{"inlineContent":[{"type":"text","text":"This calculation yields the final answer of "},{"type":"codeVoice","code":"17"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"For information about the operators provided by the Swift standard library, including a complete list of the operator precedence groups and associativity settings, see ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","isActive":true,"type":"reference"},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations]","type":"text"},{"text":".","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s operator precedences and associativity rules are simpler and more predictable than those found in C and Objective-C. However, this means that they aren’t exactly the same as in C-based languages. Be careful to ensure that operator interactions still behave in the way you intend when porting existing code to Swift."}]}],"name":"Note","type":"aside"},{"text":"Operator Methods","anchor":"Operator-Methods","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Classes and structures can provide their own implementations of existing operators. This is known as "},{"inlineContent":[{"type":"text","text":"overloading"}],"type":"emphasis"},{"type":"text","text":" the existing operators."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example below shows how to implement the arithmetic addition operator ("},{"code":"+","type":"codeVoice"},{"type":"text","text":") for a custom structure. The arithmetic addition operator is a binary operator because it operates on two targets and it’s an infix operator because it appears between those two targets."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example defines a "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" structure for a two-dimensional position vector "},{"type":"codeVoice","code":"(x, y)"},{"type":"text","text":", followed by a definition of an "},{"type":"emphasis","inlineContent":[{"text":"operator method","type":"text"}]},{"type":"text","text":" to add together instances of the "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" structure:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Vector2D {","    var x = 0.0, y = 0.0","}","","extension Vector2D {","    static func + (left: Vector2D, right: Vector2D) -> Vector2D {","        return Vector2D(x: left.x + right.x, y: left.y + right.y)","    }","}"]},{"inlineContent":[{"text":"The operator method is defined as a type method on ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"text":", with a method name that matches the operator to be overloaded (","type":"text"},{"code":"+","type":"codeVoice"},{"text":"). Because addition isn’t part of the essential behavior for a vector, the type method is defined in an extension of ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"text":" rather than in the main structure declaration of ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"text":". Because the arithmetic addition operator is a binary operator, this operator method takes two input parameters of type ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"text":" and returns a single output value, also of type ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this implementation, the input parameters are named "},{"type":"codeVoice","code":"left"},{"type":"text","text":" and "},{"type":"codeVoice","code":"right"},{"type":"text","text":" to represent the "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" instances that will be on the left side and right side of the "},{"type":"codeVoice","code":"+"},{"type":"text","text":" operator. The method returns a new "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" instance, whose "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" properties are initialized with the sum of the "},{"type":"codeVoice","code":"x"},{"type":"text","text":" and "},{"type":"codeVoice","code":"y"},{"type":"text","text":" properties from the two "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" instances that are added together."}],"type":"paragraph"},{"inlineContent":[{"text":"The type method can be used as an infix operator between existing ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"text":" instances:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let vector = Vector2D(x: 3.0, y: 1.0)","let anotherVector = Vector2D(x: 2.0, y: 4.0)","let combinedVector = vector + anotherVector","\/\/ combinedVector is a Vector2D instance with values of (5.0, 5.0)"]},{"inlineContent":[{"type":"text","text":"This example adds together the vectors "},{"type":"codeVoice","code":"(3.0, 1.0)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"(2.0, 4.0)"},{"type":"text","text":" to make the vector "},{"type":"codeVoice","code":"(5.0, 5.0)"},{"type":"text","text":", as illustrated below."}],"type":"paragraph"},{"inlineContent":[{"identifier":"vectorAddition","type":"image"}],"type":"paragraph"},{"text":"Prefix and Postfix Operators","anchor":"Prefix-and-Postfix-Operators","type":"heading","level":3},{"inlineContent":[{"text":"The example shown above demonstrates a custom implementation of a binary infix operator. Classes and structures can also provide implementations of the standard ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"unary operators"}]},{"text":". Unary operators operate on a single target. They’re ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"prefix"}]},{"text":" if they precede their target (such as ","type":"text"},{"type":"codeVoice","code":"-a"},{"text":") and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"postfix","type":"text"}]},{"text":" operators if they follow their target (such as ","type":"text"},{"type":"codeVoice","code":"b!"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You implement a prefix or postfix unary operator by writing the "},{"type":"codeVoice","code":"prefix"},{"type":"text","text":" or "},{"type":"codeVoice","code":"postfix"},{"type":"text","text":" modifier before the "},{"type":"codeVoice","code":"func"},{"type":"text","text":" keyword when declaring the operator method:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Vector2D {","    static prefix func - (vector: Vector2D) -> Vector2D {","        return Vector2D(x: -vector.x, y: -vector.y)","    }","}"]},{"inlineContent":[{"text":"The example above implements the unary minus operator (","type":"text"},{"type":"codeVoice","code":"-a"},{"text":") for ","type":"text"},{"type":"codeVoice","code":"Vector2D"},{"text":" instances. The unary minus operator is a prefix operator, and so this method has to be qualified with the ","type":"text"},{"type":"codeVoice","code":"prefix"},{"text":" modifier.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For simple numeric values, the unary minus operator converts positive numbers into their negative equivalent and vice versa. The corresponding implementation for "},{"code":"Vector2D","type":"codeVoice"},{"type":"text","text":" instances performs this operation on both the "},{"code":"x","type":"codeVoice"},{"type":"text","text":" and "},{"code":"y","type":"codeVoice"},{"type":"text","text":" properties:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let positive = Vector2D(x: 3.0, y: 4.0)","let negative = -positive","\/\/ negative is a Vector2D instance with values of (-3.0, -4.0)","let alsoPositive = -negative","\/\/ alsoPositive is a Vector2D instance with values of (3.0, 4.0)"]},{"text":"Compound Assignment Operators","anchor":"Compound-Assignment-Operators","type":"heading","level":3},{"inlineContent":[{"inlineContent":[{"text":"Compound assignment operators","type":"text"}],"type":"emphasis"},{"type":"text","text":" combine assignment ("},{"code":"=","type":"codeVoice"},{"type":"text","text":") with another operation. For example, the addition assignment operator ("},{"code":"+=","type":"codeVoice"},{"type":"text","text":") combines addition and assignment into a single operation. You mark a compound assignment operator’s left input parameter type as "},{"code":"inout","type":"codeVoice"},{"type":"text","text":", because the parameter’s value will be modified directly from within the operator method."}],"type":"paragraph"},{"inlineContent":[{"text":"The example below implements an addition assignment operator method for ","type":"text"},{"type":"codeVoice","code":"Vector2D"},{"text":" instances:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Vector2D {","    static func += (left: inout Vector2D, right: Vector2D) {","        left = left + right","    }","}"]},{"inlineContent":[{"text":"Because an addition operator was defined earlier, you don’t need to reimplement the addition process here. Instead, the addition assignment operator method takes advantage of the existing addition operator method, and uses it to set the left value to be the left value plus the right value:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var original = Vector2D(x: 1.0, y: 2.0)","let vectorToAdd = Vector2D(x: 3.0, y: 4.0)","original += vectorToAdd","\/\/ original now has values of (4.0, 6.0)"]},{"style":"note","content":[{"inlineContent":[{"type":"text","text":"It isn’t possible to overload the default assignment operator ("},{"type":"codeVoice","code":"="},{"type":"text","text":"). Only the compound assignment operators can be overloaded. Similarly, the ternary conditional operator ("},{"type":"codeVoice","code":"a ? b : c"},{"type":"text","text":") can’t be overloaded."}],"type":"paragraph"}],"name":"Note","type":"aside"},{"text":"Equivalence Operators","anchor":"Equivalence-Operators","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"By default, custom classes and structures don’t have an implementation of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"equivalence operators"}]},{"type":"text","text":", known as the "},{"type":"emphasis","inlineContent":[{"text":"equal to","type":"text"}]},{"type":"text","text":" operator ("},{"type":"codeVoice","code":"=="},{"type":"text","text":") and "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not equal to"}]},{"type":"text","text":" operator ("},{"type":"codeVoice","code":"!="},{"type":"text","text":"). You usually implement the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator, and use the standard library’s default implementation of the "},{"type":"codeVoice","code":"!="},{"type":"text","text":" operator that negates the result of the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator. There are two ways to implement the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator: You can implement it yourself, or for many types, you can ask Swift to synthesize an implementation for you. In both cases, you add conformance to the standard library’s "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol."}],"type":"paragraph"},{"inlineContent":[{"text":"You provide an implementation of the ","type":"text"},{"code":"==","type":"codeVoice"},{"text":" operator in the same way as you implement other infix operators:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Vector2D: Equatable {","    static func == (left: Vector2D, right: Vector2D) -> Bool {","        return (left.x == right.x) && (left.y == right.y)","    }","}"]},{"inlineContent":[{"text":"The example above implements an ","type":"text"},{"code":"==","type":"codeVoice"},{"text":" operator to check whether two ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"text":" instances have equivalent values. In the context of ","type":"text"},{"code":"Vector2D","type":"codeVoice"},{"text":", it makes sense to consider “equal” as meaning “both instances have the same ","type":"text"},{"code":"x","type":"codeVoice"},{"text":" values and ","type":"text"},{"code":"y","type":"codeVoice"},{"text":" values”, and so this is the logic used by the operator implementation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can now use this operator to check whether two "},{"type":"codeVoice","code":"Vector2D"},{"type":"text","text":" instances are equivalent:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let twoThree = Vector2D(x: 2.0, y: 3.0)","let anotherTwoThree = Vector2D(x: 2.0, y: 3.0)","if twoThree == anotherTwoThree {","    print(\"These two vectors are equivalent.\")","}","\/\/ Prints \"These two vectors are equivalent.\""]},{"inlineContent":[{"text":"In many simple cases, you can ask Swift to provide synthesized implementations of the equivalence operators for you, as described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Custom Operators","anchor":"Custom-Operators","type":"heading","level":2},{"inlineContent":[{"text":"You can declare and implement your own ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"custom operators","type":"text"}]},{"text":" in addition to the standard operators provided by Swift. For a list of characters that can be used to define custom operators, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Operators","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"New operators are declared at a global level using the "},{"code":"operator","type":"codeVoice"},{"type":"text","text":" keyword, and are marked with the "},{"code":"prefix","type":"codeVoice"},{"type":"text","text":", "},{"code":"infix","type":"codeVoice"},{"type":"text","text":" or "},{"code":"postfix","type":"codeVoice"},{"type":"text","text":" modifiers:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["prefix operator +++"]},{"inlineContent":[{"text":"The example above defines a new prefix operator called ","type":"text"},{"type":"codeVoice","code":"+++"},{"text":". This operator doesn’t have an existing meaning in Swift, and so it’s given its own custom meaning below in the specific context of working with ","type":"text"},{"type":"codeVoice","code":"Vector2D"},{"text":" instances. For the purposes of this example, ","type":"text"},{"type":"codeVoice","code":"+++"},{"text":" is treated as a new “prefix doubling” operator. It doubles the ","type":"text"},{"type":"codeVoice","code":"x"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"y"},{"text":" values of a ","type":"text"},{"type":"codeVoice","code":"Vector2D"},{"text":" instance, by adding the vector to itself with the addition assignment operator defined earlier. To implement the ","type":"text"},{"type":"codeVoice","code":"+++"},{"text":" operator, you add a type method called ","type":"text"},{"type":"codeVoice","code":"+++"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"Vector2D"},{"text":" as follows:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension Vector2D {","    static prefix func +++ (vector: inout Vector2D) -> Vector2D {","        vector += vector","        return vector","    }","}","","var toBeDoubled = Vector2D(x: 1.0, y: 4.0)","let afterDoubling = +++toBeDoubled","\/\/ toBeDoubled now has values of (2.0, 8.0)","\/\/ afterDoubling also has values of (2.0, 8.0)"]},{"text":"Precedence for Custom Infix Operators","anchor":"Precedence-for-Custom-Infix-Operators","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Custom infix operators each belong to a precedence group. A precedence group specifies an operator’s precedence relative to other infix operators, as well as the operator’s associativity. See "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Precedence-and-Associativity","isActive":true},{"type":"text","text":" for an explanation of how these characteristics affect an infix operator’s interaction with other infix operators."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A custom infix operator that isn’t explicitly placed into a precedence group is given a default precedence group with a precedence immediately higher than the precedence of the ternary conditional operator."}],"type":"paragraph"},{"inlineContent":[{"text":"The following example defines a new custom infix operator called ","type":"text"},{"code":"+-","type":"codeVoice"},{"text":", which belongs to the precedence group ","type":"text"},{"code":"AdditionPrecedence","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["infix operator +-: AdditionPrecedence","extension Vector2D {","    static func +- (left: Vector2D, right: Vector2D) -> Vector2D {","        return Vector2D(x: left.x + right.x, y: left.y - right.y)","    }","}","let firstVector = Vector2D(x: 1.0, y: 2.0)","let secondVector = Vector2D(x: 3.0, y: 4.0)","let plusMinusVector = firstVector +- secondVector","\/\/ plusMinusVector is a Vector2D instance with values of (4.0, -2.0)"]},{"inlineContent":[{"text":"This operator adds together the ","type":"text"},{"type":"codeVoice","code":"x"},{"text":" values of two vectors, and subtracts the ","type":"text"},{"type":"codeVoice","code":"y"},{"text":" value of the second vector from the first. Because it’s in essence an “additive” operator, it has been given the same precedence group as additive infix operators such as ","type":"text"},{"type":"codeVoice","code":"+"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"-"},{"text":". For information about the operators provided by the Swift standard library, including a complete list of the operator precedence groups and associativity settings, see ","type":"text"},{"overridingTitle":"Operator Declarations","type":"reference","overridingTitleInlineContent":[{"text":"Operator Declarations","type":"text"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","isActive":true},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations]","type":"text"},{"text":". For more information about precedence groups and to see the syntax for defining your own operators and precedence groups, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Operator-Declaration","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"style":"note","content":[{"inlineContent":[{"text":"You don’t specify a precedence when defining a prefix or postfix operator. However, if you apply both a prefix and a postfix operator to the same operand, the postfix operator is applied first.","type":"text"}],"type":"paragraph"}],"name":"Note","type":"aside"},{"text":"Result Builders","anchor":"Result-Builders","type":"heading","level":2},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"result builder","type":"text"}],"type":"emphasis"},{"text":" is a type you define that adds syntax for creating nested data, like a list or tree, in a natural, declarative way. The code that uses the result builder can include ordinary Swift syntax, like ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"for","type":"codeVoice"},{"text":", to handle conditional or repeated pieces of data.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The code below defines a few types for drawing on a single line using stars and text.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["protocol Drawable {","    func draw() -> String","}","struct Line: Drawable {","    var elements: [Drawable]","    func draw() -> String {","        return elements.map { $0.draw() }.joined(separator: \"\")","    }","}","struct Text: Drawable {","    var content: String","    init(_ content: String) { self.content = content }","    func draw() -> String { return content }","}","struct Space: Drawable {","    func draw() -> String { return \" \" }","}","struct Stars: Drawable {","    var length: Int","    func draw() -> String { return String(repeating: \"*\", count: length) }","}","struct AllCaps: Drawable {","    var content: Drawable","    func draw() -> String { return content.draw().uppercased() }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"Drawable","type":"codeVoice"},{"type":"text","text":" protocol defines the requirement for something that can be drawn, like a line or shape: The type must implement a "},{"code":"draw()","type":"codeVoice"},{"type":"text","text":" method. The "},{"code":"Line","type":"codeVoice"},{"type":"text","text":" structure represents a single-line drawing, and it serves the top-level container for most drawings. To draw a "},{"code":"Line","type":"codeVoice"},{"type":"text","text":", the structure calls "},{"code":"draw()","type":"codeVoice"},{"type":"text","text":" on each of the line’s components, and then concatenates the resulting strings into a single string. The "},{"code":"Text","type":"codeVoice"},{"type":"text","text":" structure wraps a string to make it part of a drawing. The "},{"code":"AllCaps","type":"codeVoice"},{"type":"text","text":" structure wraps and modifies another drawing, converting any text in the drawing to uppercase."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"It’s possible to make a drawing with these types by calling their initializers:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let name: String? = \"Ravi Patel\"","let manualDrawing = Line(elements: [","    Stars(length: 3),","    Text(\"Hello\"),","    Space(),","    AllCaps(content: Text((name ?? \"World\") + \"!\")),","    Stars(length: 2),","    ])","print(manualDrawing.draw())","\/\/ Prints \"***Hello RAVI PATEL!**\""]},{"inlineContent":[{"text":"This code works, but it’s a little awkward. The deeply nested parentheses after ","type":"text"},{"code":"AllCaps","type":"codeVoice"},{"text":" are hard to read. The fallback logic to use “World” when ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" has to be done inline using the ","type":"text"},{"code":"??","type":"codeVoice"},{"text":" operator, which would be difficult with anything more complex. If you needed to include switches or ","type":"text"},{"code":"for","type":"codeVoice"},{"text":" loops to build up part of the drawing, there’s no way to do that. A result builder lets you rewrite code like this so that it looks like normal Swift code.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To define a result builder, you write the "},{"type":"codeVoice","code":"@resultBuilder"},{"type":"text","text":" attribute on a type declaration. For example, this code defines a result builder called "},{"type":"codeVoice","code":"DrawingBuilder"},{"type":"text","text":", which lets you use a declarative syntax to describe a drawing:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@resultBuilder","struct DrawingBuilder {","    static func buildBlock(_ components: Drawable...) -> Drawable {","        return Line(elements: components)","    }","    static func buildEither(first: Drawable) -> Drawable {","        return first","    }","    static func buildEither(second: Drawable) -> Drawable {","        return second","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"DrawingBuilder"},{"type":"text","text":" structure defines three methods that implement parts of the result builder syntax. The "},{"type":"codeVoice","code":"buildBlock(_:)"},{"type":"text","text":" method adds support for writing a series of lines in a block of code. It combines the components in that block into a "},{"type":"codeVoice","code":"Line"},{"type":"text","text":". The "},{"type":"codeVoice","code":"buildEither(first:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"buildEither(second:)"},{"type":"text","text":" methods add support for "},{"type":"codeVoice","code":"if"},{"type":"text","text":"-"},{"type":"codeVoice","code":"else"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can apply the "},{"type":"codeVoice","code":"@DrawingBuilder"},{"type":"text","text":" attribute to a function’s parameter, which turns a closure passed to the function into the value that the result builder creates from that closure. For example:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func draw(@DrawingBuilder content: () -> Drawable) -> Drawable {","    return content()","}","func caps(@DrawingBuilder content: () -> Drawable) -> Drawable {","    return AllCaps(content: content())","}","","func makeGreeting(for name: String? = nil) -> Drawable {","    let greeting = draw {","        Stars(length: 3)","        Text(\"Hello\")","        Space()","        caps {","            if let name = name {","                Text(name + \"!\")","            } else {","                Text(\"World!\")","            }","        }","        Stars(length: 2)","    }","    return greeting","}","let genericGreeting = makeGreeting()","print(genericGreeting.draw())","\/\/ Prints \"***Hello WORLD!**\"","","let personalGreeting = makeGreeting(for: \"Ravi Patel\")","print(personalGreeting.draw())","\/\/ Prints \"***Hello RAVI PATEL!**\""]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"makeGreeting(for:)"},{"type":"text","text":" function takes a "},{"type":"codeVoice","code":"name"},{"type":"text","text":" parameter and uses it to draw a personalized greeting. The "},{"type":"codeVoice","code":"draw(_:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"caps(_:)"},{"type":"text","text":" functions both take a single closure as their argument, which is marked with the "},{"type":"codeVoice","code":"@DrawingBuilder"},{"type":"text","text":" attribute. When you call those functions, you use the special syntax that "},{"type":"codeVoice","code":"DrawingBuilder"},{"type":"text","text":" defines. Swift transforms that declarative description of a drawing into a series of calls to the methods on "},{"type":"codeVoice","code":"DrawingBuilder"},{"type":"text","text":" to build up the value that’s passed as the function argument. For example, Swift transforms the call to "},{"type":"codeVoice","code":"caps(_:)"},{"type":"text","text":" in that example into code like the following:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let capsDrawing = caps {","    let partialDrawing: Drawable","    if let name = name {","        let text = Text(name + \"!\")","        partialDrawing = DrawingBuilder.buildEither(first: text)","    } else {","        let text = Text(\"World!\")","        partialDrawing = DrawingBuilder.buildEither(second: text)","    }","    return partialDrawing","}"]},{"inlineContent":[{"type":"text","text":"Swift transforms the "},{"code":"if","type":"codeVoice"},{"type":"text","text":"-"},{"code":"else","type":"codeVoice"},{"type":"text","text":" block into calls to the "},{"code":"buildEither(first:)","type":"codeVoice"},{"type":"text","text":" and "},{"code":"buildEither(second:)","type":"codeVoice"},{"type":"text","text":" methods. Although you don’t call these methods in your own code, showing the result of the transformation makes it easier to see how Swift transforms your code when you use the "},{"code":"DrawingBuilder","type":"codeVoice"},{"type":"text","text":" syntax."}],"type":"paragraph"},{"inlineContent":[{"text":"To add support for writing ","type":"text"},{"code":"for","type":"codeVoice"},{"text":" loops in the special drawing syntax, add a ","type":"text"},{"code":"buildArray(_:)","type":"codeVoice"},{"text":" method.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension DrawingBuilder {","    static func buildArray(_ components: [Drawable]) -> Drawable {","        return Line(elements: components)","    }","}","let manyStars = draw {","    Text(\"Stars:\")","    for length in 1...3 {","        Space()","        Stars(length: length)","    }","}"]},{"inlineContent":[{"text":"In the code above, the ","type":"text"},{"code":"for","type":"codeVoice"},{"text":" loop creates an array of drawings, and the ","type":"text"},{"code":"buildArray(_:)","type":"codeVoice"},{"text":" method turns that array into a ","type":"text"},{"code":"Line","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For a complete list of how Swift transforms builder syntax into calls to the builder type’s methods, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#resultBuilder","isActive":true,"type":"reference"},{"text":".","type":"text"}],"type":"paragraph"}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"references":{"doc://com.apple.Swift/documentation/Swift/Properties":{"role":"article","type":"topic","url":"\/documentation\/swift\/properties","abstract":[{"inlineContent":[{"type":"text","text":"Properties"}],"type":"emphasis"},{"type":"text","text":" associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","title":"Properties","kind":"article"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed."}],"url":"\/documentation\/swift\/automaticreferencecounting","type":"topic","role":"article","title":"Automatic Reference Counting","kind":"article"},"bitshiftSignedFour":{"variants":[{"url":"\/images\/bitshiftSignedFour@2x.png","traits":["2x","light"]}],"type":"image","identifier":"bitshiftSignedFour","alt":null},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"role":"article","type":"topic","url":"\/documentation\/swift\/classesandstructures","abstract":[{"inlineContent":[{"type":"text","text":"Structures"}],"type":"emphasis"},{"type":"text","text":" and "},{"inlineContent":[{"text":"classes","type":"text"}],"type":"emphasis"},{"type":"text","text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","title":"Structures and Classes","kind":"article"},"bitwiseAND":{"variants":[{"traits":["2x","light"],"url":"\/images\/bitwiseAND@2x.png"}],"type":"image","identifier":"bitwiseAND","alt":null},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements. These include "},{"code":"while","type":"codeVoice"},{"type":"text","text":" loops to perform a task multiple times; "},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" to transfer the flow of execution to another point in your code."}],"type":"topic","title":"Control Flow","role":"article","url":"\/documentation\/swift\/controlflow"},"doc://com.apple.Swift/documentation/Swift/Attributes#resultBuilder":{"url":"\/documentation\/swift\/attributes#resultBuilder","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#resultBuilder","abstract":[],"kind":"section","title":"resultBuilder","type":"topic"},"bitshiftSigned":{"variants":[{"url":"\/images\/bitshiftSigned@2x.png","traits":["2x","light"]}],"type":"image","identifier":"bitshiftSigned","alt":null},"doc://com.apple.Swift/documentation/Swift/Methods":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C."}],"type":"topic","title":"Methods","role":"article","url":"\/documentation\/swift\/methods"},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"role":"article","type":"topic","url":"\/documentation\/swift\/deinitialization","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"deinitializer"}],"type":"emphasis"},{"type":"text","text":" is called immediately before a class instance is deallocated. You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword, similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword. Deinitializers are only available on class types."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","title":"Deinitialization","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Subscripts":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"type":"topic","title":"Subscripts","role":"article","url":"\/documentation\/swift\/subscripts"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","abstract":[{"inlineContent":[{"type":"text","text":"Optional chaining"}],"type":"emphasis"},{"text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", the property, method, or subscript call returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/optionalchaining","type":"topic","role":"article","title":"Optional Chaining","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation":{"url":"\/documentation\/swift\/protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Adopting-a-Protocol-Using-a-Synthesized-Implementation","abstract":[],"kind":"section","title":"Adopting a Protocol Using a Synthesized Implementation","type":"topic"},"vectorAddition":{"variants":[{"traits":["2x","light"],"url":"\/images\/vectorAddition@2x.png"}],"type":"image","identifier":"vectorAddition","alt":null},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","abstract":[{"inlineContent":[{"type":"text","text":"Access control"}],"type":"emphasis"},{"type":"text","text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used."}],"type":"topic","title":"Access Control","role":"article","url":"\/documentation\/swift\/accesscontrol"},"doc://com.apple.Swift/documentation/Swift/Declarations#Operator-Declaration":{"title":"Operator Declaration","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Operator-Declaration","type":"topic","url":"\/documentation\/swift\/declarations#Operator-Declaration","abstract":[]},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors."}],"type":"topic","title":"Memory Safety","role":"article","url":"\/documentation\/swift\/memorysafety"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure#Operators":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure#Operators","title":"Operators","type":"topic","abstract":[],"url":"\/documentation\/swift\/lexicalstructure#Operators","kind":"section"},"bitwiseOR":{"variants":[{"url":"\/images\/bitwiseOR@2x.png","traits":["2x","light"]}],"type":"image","identifier":"bitwiseOR","alt":null},"doc://com.apple.Swift/documentation/Swift/TypeCasting":{"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","title":"Type Casting","type":"topic","kind":"article","role":"article","url":"\/documentation\/swift\/typecasting"},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","abstract":[{"type":"text","text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t."}],"url":"\/documentation\/swift\/opaquetypes","type":"topic","role":"article","title":"Opaque Types","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Enumerations":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code."}],"url":"\/documentation\/swift\/enumerations","type":"topic","role":"article","title":"Enumerations","kind":"article"},"overflowSignedSubtraction":{"variants":[{"traits":["2x","light"],"url":"\/images\/overflowSignedSubtraction@2x.png"}],"type":"image","identifier":"overflowSignedSubtraction","alt":null},"overflowUnsignedSubtraction":{"variants":[{"url":"\/images\/overflowUnsignedSubtraction@2x.png","traits":["2x","light"]}],"type":"image","identifier":"overflowUnsignedSubtraction","alt":null},"doc://com.apple.Swift/documentation/Swift/Extensions":{"type":"topic","kind":"article","title":"Extensions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as "},{"type":"emphasis","inlineContent":[{"text":"retroactive modeling","type":"text"}]},{"type":"text","text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)"}],"url":"\/documentation\/swift\/extensions"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Precedence-and-Associativity":{"kind":"section","url":"\/documentation\/swift\/advancedoperators#Precedence-and-Associativity","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Precedence-and-Associativity","title":"Precedence and Associativity"},"doc://com.apple.Swift/documentation/Swift/Inheritance":{"role":"article","type":"topic","url":"\/documentation\/swift\/inheritance","abstract":[{"text":"A class can ","type":"text"},{"inlineContent":[{"type":"text","text":"inherit"}],"type":"emphasis"},{"text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a ","type":"text"},{"inlineContent":[{"type":"text","text":"subclass"}],"type":"emphasis"},{"type":"text","text":", and the class it inherits from is known as its "},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"type":"text","text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","title":"Inheritance","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Functions":{"title":"Functions","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed."}],"url":"\/documentation\/swift\/functions"},"doc://com.apple.Swift/documentation/Swift":{"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","abstract":[],"type":"topic","title":"Swift","role":"collection","url":"\/documentation\/swift"},"bitwiseNOT":{"identifier":"bitwiseNOT","variants":[{"url":"\/images\/bitwiseNOT@2x.png","traits":["2x","light"]}],"alt":null,"type":"image"},"bitwiseXOR":{"identifier":"bitwiseXOR","variants":[{"traits":["2x","light"],"url":"\/images\/bitwiseXOR@2x.png"}],"alt":null,"type":"image"},"bitshiftSignedAddition":{"identifier":"bitshiftSignedAddition","variants":[{"url":"\/images\/bitshiftSignedAddition@2x.png","traits":["2x","light"]}],"alt":null,"type":"image"},"bitshiftUnsigned":{"identifier":"bitshiftUnsigned","variants":[{"traits":["2x","light"],"url":"\/images\/bitshiftUnsigned@2x.png"}],"alt":null,"type":"image"},"bitshiftSignedMinusFourValue":{"identifier":"bitshiftSignedMinusFourValue","variants":[{"url":"\/images\/bitshiftSignedMinusFourValue@2x.png","traits":["2x","light"]}],"alt":null,"type":"image"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"type":"topic","title":"Error Handling","role":"article","url":"\/documentation\/swift\/errorhandling"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"role":"article","type":"topic","url":"\/documentation\/swift\/stringsandcharacters","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"text":"string","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a series of characters, such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":". Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type. The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways, including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","title":"Strings and Characters","kind":"article"},"https://developer.apple.com/documentation/swift/operator_declarations":{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","title":"Operator Declarations","titleInlineContent":[{"text":"Operator Declarations","type":"text"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","type":"link"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use."}],"url":"\/documentation\/swift\/initialization","type":"topic","role":"article","title":"Initialization","kind":"article"},"bitshiftSignedMinusFour":{"identifier":"bitshiftSignedMinusFour","variants":[{"url":"\/images\/bitshiftSignedMinusFour@2x.png","traits":["2x","light"]}],"alt":null,"type":"image"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes":{"role":"article","type":"topic","url":"\/documentation\/swift\/collectiontypes","abstract":[{"type":"text","text":"Swift provides three primary "},{"inlineContent":[{"type":"text","text":"collection types"}],"type":"emphasis"},{"type":"text","text":", known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","title":"Collection Types","kind":"article"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"type":"topic","kind":"article","title":"Basic Operators","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","role":"article","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers, as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":", and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values, as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/basicoperators"},"doc://com.apple.Swift/documentation/Swift/Generics":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner."}],"url":"\/documentation\/swift\/generics","type":"topic","role":"article","title":"Generics","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Protocols":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"protocol","type":"text"}]},{"type":"text","text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to "},{"inlineContent":[{"type":"text","text":"conform"}],"type":"emphasis"},{"type":"text","text":" to that protocol."}],"type":"topic","title":"Protocols","role":"article","url":"\/documentation\/swift\/protocols"},"overflowAddition":{"identifier":"overflowAddition","variants":[{"traits":["2x","light"],"url":"\/images\/overflowAddition@2x.png"}],"alt":null,"type":"image"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"url":"\/documentation\/swift\/thebasics","type":"topic","role":"article","title":"The Basics","kind":"article"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Bitwise-Left-and-Right-Shift-Operators":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Bitwise-Left-and-Right-Shift-Operators","kind":"section","title":"Bitwise Left and Right Shift Operators","url":"\/documentation\/swift\/advancedoperators#Bitwise-Left-and-Right-Shift-Operators","type":"topic","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Closures":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages."}],"url":"\/documentation\/swift\/closures","type":"topic","role":"article","title":"Closures","kind":"article"},"doc://com.apple.Swift/documentation/Swift/NestedTypes":{"url":"\/documentation\/swift\/nestedtypes","type":"topic","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":", whereby you nest supporting enumerations, classes, and structures within the definition of the type they support."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","role":"article"},"doc://com.apple.Swift/documentation/Swift/Concurrency":{"title":"Concurrency","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. "},{"type":"emphasis","inlineContent":[{"text":"Parallel code","type":"text"}]},{"text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way.","type":"text"}],"url":"\/documentation\/swift\/concurrency"}}}