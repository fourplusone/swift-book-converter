{"schemaVersion":{"patch":0,"minor":3,"major":0},"abstract":[{"text":"Swift uses ","type":"text"},{"inlineContent":[{"type":"text","text":"Automatic Reference Counting"}],"type":"emphasis"},{"text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed.","type":"text"}],"kind":"article","seeAlsoSections":[{"identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"],"generated":true,"title":"Language Guide"}],"sections":[],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Swift"}],"title":"Automatic Reference Counting"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swift\/automaticreferencecounting"]}],"primaryContentSections":[{"content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"inlineContent":[{"type":"text","text":"However, in a few cases ARC requires more information about the relationships between parts of your code in order to manage memory for you. This chapter describes those situations and shows how you enable ARC to manage all of your app’s memory. Using ARC in Swift is very similar to the approach described in "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/releasenotes\/ObjectiveC\/RN-TransitioningToARC\/Introduction\/Introduction.html"},{"type":"text","text":" [https:\/\/developer.apple.com\/library\/content\/releasenotes\/ObjectiveC\/RN-TransitioningToARC\/Introduction\/Introduction.html]"},{"type":"text","text":" for using ARC with Objective-C."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Reference counting applies only to instances of classes. Structures and enumerations are value types, not reference types, and aren’t stored and passed by reference."}],"type":"paragraph"},{"level":2,"anchor":"How-ARC-Works","type":"heading","text":"How ARC Works"},{"inlineContent":[{"text":"Every time you create a new instance of a class, ARC allocates a chunk of memory to store information about that instance. This memory holds information about the type of the instance, together with the values of any stored properties associated with that instance.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Additionally, when an instance is no longer needed, ARC frees up the memory used by that instance so that the memory can be used for other purposes instead. This ensures that class instances don’t take up space in memory when they’re no longer needed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, if ARC were to deallocate an instance that was still in use, it would no longer be possible to access that instance’s properties, or call that instance’s methods. Indeed, if you tried to access the instance, your app would most likely crash."}],"type":"paragraph"},{"inlineContent":[{"text":"To make sure that instances don’t disappear while they’re still needed, ARC tracks how many properties, constants, and variables are currently referring to each class instance. ARC will not deallocate an instance as long as at least one active reference to that instance still exists.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To make this possible, whenever you assign a class instance to a property, constant, or variable, that property, constant, or variable makes a "},{"inlineContent":[{"type":"text","text":"strong reference"}],"type":"emphasis"},{"type":"text","text":" to the instance. The reference is called a “strong” reference because it keeps a firm hold on that instance, and doesn’t allow it to be deallocated for as long as that strong reference remains."}],"type":"paragraph"},{"text":"ARC in Action","type":"heading","anchor":"ARC-in-Action","level":2},{"inlineContent":[{"text":"Here’s an example of how Automatic Reference Counting works. This example starts with a simple class called ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":", which defines a stored constant property called ","type":"text"},{"code":"name","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class Person {","    let name: String","    init(name: String) {","        self.name = name","        print(\"\\(name) is being initialized\")","    }","    deinit {","        print(\"\\(name) is being deinitialized\")","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" class has an initializer that sets the instance’s "},{"code":"name","type":"codeVoice"},{"type":"text","text":" property and prints a message to indicate that initialization is underway. The "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" class also has a deinitializer that prints a message when an instance of the class is deallocated."}],"type":"paragraph"},{"inlineContent":[{"text":"The next code snippet defines three variables of type ","type":"text"},{"code":"Person?","type":"codeVoice"},{"text":", which are used to set up multiple references to a new ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance in subsequent code snippets. Because these variables are of an optional type (","type":"text"},{"code":"Person?","type":"codeVoice"},{"text":", not ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":"), they’re automatically initialized with a value of ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", and don’t currently reference a ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var reference1: Person?","var reference2: Person?","var reference3: Person?"]},{"inlineContent":[{"text":"You can now create a new ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance and assign it to one of these three variables:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["reference1 = Person(name: \"John Appleseed\")","\/\/ Prints \"John Appleseed is being initialized\""]},{"inlineContent":[{"text":"Note that the message ","type":"text"},{"type":"codeVoice","code":"\"John Appleseed is being initialized\""},{"text":" is printed at the point that you call the ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" class’s initializer. This confirms that initialization has taken place.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Because the new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance has been assigned to the "},{"type":"codeVoice","code":"reference1"},{"type":"text","text":" variable, there’s now a strong reference from "},{"type":"codeVoice","code":"reference1"},{"type":"text","text":" to the new "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" instance. Because there’s at least one strong reference, ARC makes sure that this "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" is kept in memory and isn’t deallocated."}],"type":"paragraph"},{"inlineContent":[{"text":"If you assign the same ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance to two more variables, two more strong references to that instance are established:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["reference2 = reference1","reference3 = reference1"]},{"inlineContent":[{"type":"text","text":"There are now "},{"inlineContent":[{"type":"text","text":"three"}],"type":"emphasis"},{"type":"text","text":" strong references to this single "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" instance."}],"type":"paragraph"},{"inlineContent":[{"text":"If you break two of these strong references (including the original reference) by assigning ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" to two of the variables, a single strong reference remains, and the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance isn’t deallocated:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["reference1 = nil","reference2 = nil"]},{"inlineContent":[{"type":"text","text":"ARC doesn’t deallocate the "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" instance until the third and final strong reference is broken, at which point it’s clear that you are no longer using the "},{"type":"codeVoice","code":"Person"},{"text":" instance:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["reference3 = nil","\/\/ Prints \"John Appleseed is being deinitialized\""]},{"text":"Strong Reference Cycles Between Class Instances","type":"heading","anchor":"Strong-Reference-Cycles-Between-Class-Instances","level":2},{"inlineContent":[{"text":"In the examples above, ARC is able to track the number of references to the new ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance you create and to deallocate that ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance when it’s no longer needed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"However, it’s possible to write code in which an instance of a class "},{"type":"emphasis","inlineContent":[{"type":"text","text":"never"}]},{"type":"text","text":" gets to a point where it has zero strong references. This can happen if two class instances hold a strong reference to each other, such that each instance keeps the other alive. This is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"strong reference cycle"}]},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You resolve strong reference cycles by defining some of the relationships between classes as weak or unowned references instead of as strong references. This process is described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances","type":"reference","isActive":true},{"text":". However, before you learn how to resolve a strong reference cycle, it’s useful to understand how such a cycle is caused.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example of how a strong reference cycle can be created by accident. This example defines two classes called "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":", which model a block of apartments and its residents:"}]},{"type":"codeListing","code":["class Person {","    let name: String","    init(name: String) { self.name = name }","    var apartment: Apartment?","    deinit { print(\"\\(name) is being deinitialized\") }","}","","class Apartment {","    let unit: String","    init(unit: String) { self.unit = unit }","    var tenant: Person?","    deinit { print(\"Apartment \\(unit) is being deinitialized\") }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" instance has a "},{"code":"name","type":"codeVoice"},{"type":"text","text":" property of type "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and an optional "},{"code":"apartment","type":"codeVoice"},{"type":"text","text":" property that’s initially "},{"code":"nil","type":"codeVoice"},{"type":"text","text":". The "},{"code":"apartment","type":"codeVoice"},{"type":"text","text":" property is optional, because a person may not always have an apartment."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Similarly, every "},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" instance has a "},{"code":"unit","type":"codeVoice"},{"type":"text","text":" property of type "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and has an optional "},{"code":"tenant","type":"codeVoice"},{"type":"text","text":" property that’s initially "},{"code":"nil","type":"codeVoice"},{"type":"text","text":". The tenant property is optional because an apartment may not always have a tenant."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Both of these classes also define a deinitializer, which prints the fact that an instance of that class is being deinitialized. This enables you to see whether instances of "},{"type":"codeVoice","code":"Person"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Apartment"},{"text":" are being deallocated as expected.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This next code snippet defines two variables of optional type called ","type":"text"},{"type":"codeVoice","code":"john"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"unit4A"},{"text":", which will be set to a specific ","type":"text"},{"type":"codeVoice","code":"Apartment"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" instance below. Both of these variables have an initial value of ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":", by virtue of being optional:","type":"text"}]},{"type":"codeListing","code":["var john: Person?","var unit4A: Apartment?"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now create a specific "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" instance and "},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" instance and assign these new instances to the "},{"code":"john","type":"codeVoice"},{"type":"text","text":" and "},{"code":"unit4A","type":"codeVoice"},{"type":"text","text":" variables:"}]},{"type":"codeListing","code":["john = Person(name: \"John Appleseed\")","unit4A = Apartment(unit: \"4A\")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Here’s how the strong references look after creating and assigning these two instances. The ","type":"text"},{"code":"john","type":"codeVoice"},{"text":" variable now has a strong reference to the new ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance, and the ","type":"text"},{"code":"unit4A","type":"codeVoice"},{"text":" variable has a strong reference to the new ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"text":" instance:","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"referenceCycle01","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now link the two instances together so that the person has an apartment, and the apartment has a tenant. Note that an exclamation point ("},{"type":"codeVoice","code":"!"},{"type":"text","text":") is used to unwrap and access the instances stored inside the "},{"type":"codeVoice","code":"john"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":" optional variables, so that the properties of those instances can be set:"}]},{"type":"codeListing","code":["john!.apartment = unit4A","unit4A!.tenant = john"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the strong references look after you link the two instances together:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"referenceCycle02"}]},{"type":"paragraph","inlineContent":[{"text":"Unfortunately, linking these two instances creates a strong reference cycle between them. The ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" instance now has a strong reference to the ","type":"text"},{"type":"codeVoice","code":"Apartment"},{"text":" instance, and the ","type":"text"},{"type":"codeVoice","code":"Apartment"},{"text":" instance has a strong reference to the ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" instance. Therefore, when you break the strong references held by the ","type":"text"},{"type":"codeVoice","code":"john"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"unit4A"},{"text":" variables, the reference counts don’t drop to zero, and the instances aren’t deallocated by ARC:","type":"text"}]},{"type":"codeListing","code":["john = nil","unit4A = nil"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that neither deinitializer was called when you set these two variables to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". The strong reference cycle prevents the "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instances from ever being deallocated, causing a memory leak in your app."}]},{"type":"paragraph","inlineContent":[{"text":"Here’s how the strong references look after you set the ","type":"text"},{"code":"john","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"unit4A","type":"codeVoice"},{"text":" variables to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":":","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"referenceCycle03"}]},{"type":"paragraph","inlineContent":[{"text":"The strong references between the ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" instance and the ","type":"text"},{"type":"codeVoice","code":"Apartment"},{"text":" instance remain and can’t be broken.","type":"text"}]},{"anchor":"Resolving-Strong-Reference-Cycles-Between-Class-Instances","level":2,"type":"heading","text":"Resolving Strong Reference Cycles Between Class Instances"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides two ways to resolve strong reference cycles when you work with properties of class type: weak references and unowned references."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Weak and unowned references enable one instance in a reference cycle to refer to the other instance "},{"inlineContent":[{"text":"without","type":"text"}],"type":"emphasis"},{"type":"text","text":" keeping a strong hold on it. The instances can then refer to each other without creating a strong reference cycle."}]},{"type":"paragraph","inlineContent":[{"text":"Use a weak reference when the other instance has a shorter lifetime—that is, when the other instance can be deallocated first. In the ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"text":" example above, it’s appropriate for an apartment to be able to have no tenant at some point in its lifetime, and so a weak reference is an appropriate way to break the reference cycle in this case. In contrast, use an unowned reference when the other instance has the same lifetime or a longer lifetime.","type":"text"}]},{"anchor":"Weak-References","level":3,"type":"heading","text":"Weak References"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"weak reference","type":"text"}]},{"type":"text","text":" is a reference that doesn’t keep a strong hold on the instance it refers to, and so doesn’t stop ARC from disposing of the referenced instance. This behavior prevents the reference from becoming part of a strong reference cycle. You indicate a weak reference by placing the "},{"type":"codeVoice","code":"weak"},{"type":"text","text":" keyword before a property or variable declaration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because a weak reference doesn’t keep a strong hold on the instance it refers to, it’s possible for that instance to be deallocated while the weak reference is still referring to it. Therefore, ARC automatically sets a weak reference to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" when the instance that it refers to is deallocated. And, because weak references need to allow their value to be changed to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" at runtime, they’re always declared as variables, rather than constants, of an optional type."}]},{"type":"paragraph","inlineContent":[{"text":"You can check for the existence of a value in the weak reference, just like any other optional value, and you will never end up with a reference to an invalid instance that no longer exists.","type":"text"}]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Property observers aren’t called when ARC sets a weak reference to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The example below is identical to the "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" example from above, with one important difference. This time around, the "},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" type’s "},{"code":"tenant","type":"codeVoice"},{"type":"text","text":" property is declared as a weak reference:"}]},{"type":"codeListing","code":["class Person {","    let name: String","    init(name: String) { self.name = name }","    var apartment: Apartment?","    deinit { print(\"\\(name) is being deinitialized\") }","}","","class Apartment {","    let unit: String","    init(unit: String) { self.unit = unit }","    weak var tenant: Person?","    deinit { print(\"Apartment \\(unit) is being deinitialized\") }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The strong references from the two variables ("},{"type":"codeVoice","code":"john"},{"type":"text","text":" and "},{"type":"codeVoice","code":"unit4A"},{"type":"text","text":") and the links between the two instances are created as before:"}]},{"type":"codeListing","code":["var john: Person?","var unit4A: Apartment?","","john = Person(name: \"John Appleseed\")","unit4A = Apartment(unit: \"4A\")","","john!.apartment = unit4A","unit4A!.tenant = john"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the references look now that you’ve linked the two instances together:"}]},{"type":"paragraph","inlineContent":[{"identifier":"weakReference01","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance still has a strong reference to the ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"text":" instance, but the ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"text":" instance now has a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"weak"}]},{"text":" reference to the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance. This means that when you break the strong reference held by the ","type":"text"},{"code":"john","type":"codeVoice"},{"text":" variable by setting it to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", there are no more strong references to the ","type":"text"},{"code":"Person","type":"codeVoice"},{"text":" instance:","type":"text"}]},{"type":"codeListing","code":["john = nil","\/\/ Prints \"John Appleseed is being deinitialized\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Because there are no more strong references to the ","type":"text"},{"type":"codeVoice","code":"Person"},{"text":" instance, it’s deallocated and the ","type":"text"},{"type":"codeVoice","code":"tenant"},{"text":" property is set to ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":":","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"weakReference02","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"The only remaining strong reference to the ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"text":" instance is from the ","type":"text"},{"code":"unit4A","type":"codeVoice"},{"text":" variable. If you break ","type":"text"},{"inlineContent":[{"type":"text","text":"that"}],"type":"emphasis"},{"text":" strong reference, there are no more strong references to the ","type":"text"},{"code":"Apartment","type":"codeVoice"},{"text":" instance:","type":"text"}]},{"type":"codeListing","code":["unit4A = nil","\/\/ Prints \"Apartment 4A is being deinitialized\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because there are no more strong references to the "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" instance, it too is deallocated:"}]},{"type":"paragraph","inlineContent":[{"identifier":"weakReference03","type":"image"}]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"In systems that use garbage collection, weak pointers are sometimes used to implement a simple caching mechanism because objects with no strong references are deallocated only when memory pressure triggers garbage collection. However, with ARC, values are deallocated as soon as their last strong reference is removed, making weak references unsuitable for such a purpose."}],"type":"paragraph"}]},{"anchor":"Unowned-References","level":3,"type":"heading","text":"Unowned References"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like a weak reference, an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"unowned reference"}]},{"type":"text","text":" doesn’t keep a strong hold on the instance it refers to. Unlike a weak reference, however, an unowned reference is used when the other instance has the same lifetime or a longer lifetime. You indicate an unowned reference by placing the "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" keyword before a property or variable declaration."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlike a weak reference, an unowned reference is expected to always have a value. As a result, marking a value as unowned doesn’t make it optional, and ARC never sets an unowned reference’s value to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}]},{"type":"aside","style":"important","name":"Important","content":[{"inlineContent":[{"text":"Use an unowned reference only when you are sure that the reference ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"always"}]},{"text":" refers to an instance that hasn’t been deallocated.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you try to access the value of an unowned reference after that instance has been deallocated, you’ll get a runtime error."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The following example defines two classes, "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" and "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":", which model a bank customer and a possible credit card for that customer. These two classes each store an instance of the other class as a property. This relationship has the potential to create a strong reference cycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The relationship between "},{"code":"Customer","type":"codeVoice"},{"type":"text","text":" and "},{"code":"CreditCard","type":"codeVoice"},{"type":"text","text":" is slightly different from the relationship between "},{"code":"Apartment","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Person","type":"codeVoice"},{"type":"text","text":" seen in the weak reference example above. In this data model, a customer may or may not have a credit card, but a credit card will "},{"inlineContent":[{"type":"text","text":"always"}],"type":"emphasis"},{"type":"text","text":" be associated with a customer. A "},{"code":"CreditCard","type":"codeVoice"},{"type":"text","text":" instance never outlives the "},{"code":"Customer","type":"codeVoice"},{"type":"text","text":" that it refers to. To represent this, the "},{"code":"Customer","type":"codeVoice"},{"type":"text","text":" class has an optional "},{"code":"card","type":"codeVoice"},{"type":"text","text":" property, but the "},{"code":"CreditCard","type":"codeVoice"},{"type":"text","text":" class has an unowned (and non-optional) "},{"code":"customer","type":"codeVoice"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Furthermore, a new "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance can "},{"inlineContent":[{"type":"text","text":"only"}],"type":"emphasis"},{"type":"text","text":" be created by passing a "},{"type":"codeVoice","code":"number"},{"type":"text","text":" value and a "},{"type":"codeVoice","code":"customer"},{"type":"text","text":" instance to a custom "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" initializer. This ensures that a "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance always has a "},{"type":"codeVoice","code":"customer"},{"type":"text","text":" instance associated with it when the "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance is created."}]},{"type":"paragraph","inlineContent":[{"text":"Because a credit card will always have a customer, you define its ","type":"text"},{"type":"codeVoice","code":"customer"},{"text":" property as an unowned reference, to avoid a strong reference cycle:","type":"text"}]},{"type":"codeListing","code":["class Customer {","    let name: String","    var card: CreditCard?","    init(name: String) {","        self.name = name","    }","    deinit { print(\"\\(name) is being deinitialized\") }","}","","class CreditCard {","    let number: UInt64","    unowned let customer: Customer","    init(number: UInt64, customer: Customer) {","        self.number = number","        self.customer = customer","    }","    deinit { print(\"Card #\\(number) is being deinitialized\") }","}"],"syntax":"swift"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"number"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" class is defined with a type of "},{"type":"codeVoice","code":"UInt64"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", to ensure that the "},{"type":"codeVoice","code":"number"},{"type":"text","text":" property’s capacity is large enough to store a 16-digit card number on both 32-bit and 64-bit systems."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This next code snippet defines an optional "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" variable called "},{"type":"codeVoice","code":"john"},{"type":"text","text":", which will be used to store a reference to a specific customer. This variable has an initial value of nil, by virtue of being optional:"}]},{"type":"codeListing","code":["var john: Customer?"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can now create a "},{"code":"Customer","type":"codeVoice"},{"type":"text","text":" instance, and use it to initialize and assign a new "},{"code":"CreditCard","type":"codeVoice"},{"type":"text","text":" instance as that customer’s "},{"code":"card","type":"codeVoice"},{"type":"text","text":" property:"}]},{"type":"codeListing","code":["john = Customer(name: \"John Appleseed\")","john!.card = CreditCard(number: 1234_5678_9012_3456, customer: john!)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Here’s how the references look, now that you’ve linked the two instances:","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"unownedReference01","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Customer","type":"codeVoice"},{"text":" instance now has a strong reference to the ","type":"text"},{"code":"CreditCard","type":"codeVoice"},{"text":" instance, and the ","type":"text"},{"code":"CreditCard","type":"codeVoice"},{"text":" instance has an unowned reference to the ","type":"text"},{"code":"Customer","type":"codeVoice"},{"text":" instance.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because of the unowned "},{"code":"customer","type":"codeVoice"},{"type":"text","text":" reference, when you break the strong reference held by the "},{"code":"john","type":"codeVoice"},{"type":"text","text":" variable, there are no more strong references to the "},{"code":"Customer","type":"codeVoice"},{"type":"text","text":" instance:"}]},{"type":"paragraph","inlineContent":[{"identifier":"unownedReference02","type":"image"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because there are no more strong references to the "},{"type":"codeVoice","code":"Customer"},{"type":"text","text":" instance, it’s deallocated. After this happens, there are no more strong references to the "},{"type":"codeVoice","code":"CreditCard"},{"type":"text","text":" instance, and it too is deallocated:"}]},{"type":"codeListing","code":["john = nil","\/\/ Prints \"John Appleseed is being deinitialized\"","\/\/ Prints \"Card #1234567890123456 is being deinitialized\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The final code snippet above shows that the deinitializers for the ","type":"text"},{"type":"codeVoice","code":"Customer"},{"text":" instance and ","type":"text"},{"type":"codeVoice","code":"CreditCard"},{"text":" instance both print their “deinitialized” messages after the ","type":"text"},{"type":"codeVoice","code":"john"},{"text":" variable is set to ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples above show how to use "},{"type":"emphasis","inlineContent":[{"text":"safe","type":"text"}]},{"type":"text","text":" unowned references. Swift also provides "},{"type":"emphasis","inlineContent":[{"text":"unsafe","type":"text"}]},{"type":"text","text":" unowned references for cases where you need to disable runtime safety checks—for example, for performance reasons. As with all unsafe operations, you take on the responsibility for checking that code for safety."}]},{"type":"paragraph","inlineContent":[{"text":"You indicate an unsafe unowned reference by writing ","type":"text"},{"code":"unowned(unsafe)","type":"codeVoice"},{"text":". If you try to access an unsafe unowned reference after the instance that it refers to is deallocated, your program will try to access the memory location where the instance used to be, which is an unsafe operation.","type":"text"}]}]},{"anchor":"Unowned-Optional-References","level":3,"type":"heading","text":"Unowned Optional References"},{"type":"paragraph","inlineContent":[{"text":"You can mark an optional reference to a class as unowned. In terms of the ARC ownership model, an unowned optional reference and a weak reference can both be used in the same contexts. The difference is that when you use an unowned optional reference, you’re responsible for making sure it always refers to a valid object or is set to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s an example that keeps track of the courses offered by a particular department at a school:"}]},{"type":"codeListing","code":["class Department {","    var name: String","    var courses: [Course]","    init(name: String) {","        self.name = name","        self.courses = []","    }","}","","class Course {","    var name: String","    unowned var department: Department","    unowned var nextCourse: Course?","    init(name: String, in department: Department) {","        self.name = name","        self.department = department","        self.nextCourse = nil","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"code":"Department","type":"codeVoice"},{"text":" maintains a strong reference to each course that the department offers. In the ARC ownership model, a department owns its courses. ","type":"text"},{"code":"Course","type":"codeVoice"},{"text":" has two unowned references, one to the department and one to the next course a student should take; a course doesn’t own either of these objects. Every course is part of some department so the ","type":"text"},{"code":"department","type":"codeVoice"},{"text":" property isn’t an optional. However, because some courses don’t have a recommended follow-on course, the ","type":"text"},{"code":"nextCourse","type":"codeVoice"},{"text":" property is an optional.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example of using these classes:","type":"text"}]},{"type":"codeListing","code":["let department = Department(name: \"Horticulture\")","","let intro = Course(name: \"Survey of Plants\", in: department)","let intermediate = Course(name: \"Growing Common Herbs\", in: department)","let advanced = Course(name: \"Caring for Tropical Plants\", in: department)","","intro.nextCourse = intermediate","intermediate.nextCourse = advanced","department.courses = [intro, intermediate, advanced]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The code above creates a department and its three courses. The intro and intermediate courses both have a suggested next course stored in their ","type":"text"},{"code":"nextCourse","type":"codeVoice"},{"text":" property, which maintains an unowned optional reference to the course a student should take after completing this one.","type":"text"}]},{"type":"paragraph","inlineContent":[{"identifier":"unownedOptionalReference","type":"image"}]},{"type":"paragraph","inlineContent":[{"text":"An unowned optional reference doesn’t keep a strong hold on the instance of the class that it wraps, and so it doesn’t prevent ARC from deallocating the instance. It behaves the same as an unowned reference does under ARC, except that an unowned optional reference can be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like non-optional unowned references, you’re responsible for ensuring that "},{"code":"nextCourse","type":"codeVoice"},{"type":"text","text":" always refers to a course that hasn’t been deallocated. In this case, for example, when you delete a course from "},{"code":"department.courses","type":"codeVoice"},{"type":"text","text":" you also need to remove any references to it that other courses might have."}]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"The underlying type of an optional value is ","type":"text"},{"type":"codeVoice","code":"Optional"},{"type":"text","text":", which is an enumeration in the Swift standard library. However, optionals are an exception to the rule that value types can’t be marked with "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The optional that wraps the class doesn’t use reference counting, so you don’t need to maintain a strong reference to the optional."}]}]},{"anchor":"Unowned-References-and-Implicitly-Unwrapped-Optional-Properties","level":3,"type":"heading","text":"Unowned References and Implicitly Unwrapped Optional Properties"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The examples for weak and unowned references above cover two of the more common scenarios in which it’s necessary to break a strong reference cycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Person"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Apartment"},{"type":"text","text":" example shows a situation where two properties, both of which are allowed to be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", have the potential to cause a strong reference cycle. This scenario is best resolved with a weak reference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"Customer","type":"codeVoice"},{"type":"text","text":" and "},{"code":"CreditCard","type":"codeVoice"},{"type":"text","text":" example shows a situation where one property that’s allowed to be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" and another property that can’t be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" have the potential to cause a strong reference cycle. This scenario is best resolved with an unowned reference."}]},{"type":"paragraph","inlineContent":[{"text":"However, there’s a third scenario, in which ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"both"}]},{"text":" properties should always have a value, and neither property should ever be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" once initialization is complete. In this scenario, it’s useful to combine an unowned property on one class with an implicitly unwrapped optional property on the other class.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This enables both properties to be accessed directly (without optional unwrapping) once initialization is complete, while still avoiding a reference cycle. This section shows you how to set up such a relationship."}]},{"type":"paragraph","inlineContent":[{"text":"The example below defines two classes, ","type":"text"},{"code":"Country","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"City","type":"codeVoice"},{"text":", each of which stores an instance of the other class as a property. In this data model, every country must always have a capital city, and every city must always belong to a country. To represent this, the ","type":"text"},{"code":"Country","type":"codeVoice"},{"text":" class has a ","type":"text"},{"code":"capitalCity","type":"codeVoice"},{"text":" property, and the ","type":"text"},{"code":"City","type":"codeVoice"},{"text":" class has a ","type":"text"},{"code":"country","type":"codeVoice"},{"text":" property:","type":"text"}]},{"type":"codeListing","code":["class Country {","    let name: String","    var capitalCity: City!","    init(name: String, capitalName: String) {","        self.name = name","        self.capitalCity = City(name: capitalName, country: self)","    }","}","","class City {","    let name: String","    unowned let country: Country","    init(name: String, country: Country) {","        self.name = name","        self.country = country","    }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"To set up the interdependency between the two classes, the initializer for ","type":"text"},{"code":"City","type":"codeVoice"},{"text":" takes a ","type":"text"},{"code":"Country","type":"codeVoice"},{"text":" instance, and stores this instance in its ","type":"text"},{"code":"country","type":"codeVoice"},{"text":" property.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The initializer for ","type":"text"},{"type":"codeVoice","code":"City"},{"text":" is called from within the initializer for ","type":"text"},{"type":"codeVoice","code":"Country"},{"text":". However, the initializer for ","type":"text"},{"type":"codeVoice","code":"Country"},{"text":" can’t pass ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"City"},{"text":" initializer until a new ","type":"text"},{"type":"codeVoice","code":"Country"},{"text":" instance is fully initialized, as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Two-Phase-Initialization"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To cope with this requirement, you declare the "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" property of "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" as an implicitly unwrapped optional property, indicated by the exclamation point at the end of its type annotation ("},{"type":"codeVoice","code":"City!"},{"type":"text","text":"). This means that the "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" property has a default value of "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", like any other optional, but can be accessed without the need to unwrap its value as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Implicitly-Unwrapped-Optionals"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because "},{"code":"capitalCity","type":"codeVoice"},{"type":"text","text":" has a default "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" value, a new "},{"code":"Country","type":"codeVoice"},{"type":"text","text":" instance is considered fully initialized as soon as the "},{"code":"Country","type":"codeVoice"},{"type":"text","text":" instance sets its "},{"code":"name","type":"codeVoice"},{"type":"text","text":" property within its initializer. This means that the "},{"code":"Country","type":"codeVoice"},{"type":"text","text":" initializer can start to reference and pass around the implicit "},{"code":"self","type":"codeVoice"},{"type":"text","text":" property as soon as the "},{"code":"name","type":"codeVoice"},{"type":"text","text":" property is set. The "},{"code":"Country","type":"codeVoice"},{"type":"text","text":" initializer can therefore pass "},{"code":"self","type":"codeVoice"},{"type":"text","text":" as one of the parameters for the "},{"code":"City","type":"codeVoice"},{"type":"text","text":" initializer when the "},{"code":"Country","type":"codeVoice"},{"type":"text","text":" initializer is setting its own "},{"code":"capitalCity","type":"codeVoice"},{"type":"text","text":" property."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"All of this means that you can create the "},{"type":"codeVoice","code":"Country"},{"type":"text","text":" and "},{"type":"codeVoice","code":"City"},{"type":"text","text":" instances in a single statement, without creating a strong reference cycle, and the "},{"type":"codeVoice","code":"capitalCity"},{"type":"text","text":" property can be accessed directly, without needing to use an exclamation point to unwrap its optional value:"}]},{"type":"codeListing","code":["var country = Country(name: \"Canada\", capitalName: \"Ottawa\")","print(\"\\(country.name)'s capital city is called \\(country.capitalCity.name)\")","\/\/ Prints \"Canada's capital city is called Ottawa\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"In the example above, the use of an implicitly unwrapped optional means that all of the two-phase class initializer requirements are satisfied. The ","type":"text"},{"type":"codeVoice","code":"capitalCity"},{"text":" property can be used and accessed like a non-optional value once initialization is complete, while still avoiding a strong reference cycle.","type":"text"}]},{"anchor":"Strong-Reference-Cycles-for-Closures","level":2,"type":"heading","text":"Strong Reference Cycles for Closures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You saw above how a strong reference cycle can be created when two class instance properties hold a strong reference to each other. You also saw how to use weak and unowned references to break these strong reference cycles."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A strong reference cycle can also occur if you assign a closure to a property of a class instance, and the body of that closure captures the instance. This capture might occur because the closure’s body accesses a property of the instance, such as "},{"code":"self.someProperty","type":"codeVoice"},{"type":"text","text":", or because the closure calls a method on the instance, such as "},{"code":"self.someMethod()","type":"codeVoice"},{"type":"text","text":". In either case, these accesses cause the closure to “capture” "},{"code":"self","type":"codeVoice"},{"type":"text","text":", creating a strong reference cycle."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This strong reference cycle occurs because closures, like classes, are "},{"inlineContent":[{"type":"text","text":"reference types"}],"type":"emphasis"},{"type":"text","text":". When you assign a closure to a property, you are assigning a "},{"inlineContent":[{"type":"text","text":"reference"}],"type":"emphasis"},{"type":"text","text":" to that closure. In essence, it’s the same problem as above—two strong references are keeping each other alive. However, rather than two class instances, this time it’s a class instance and a closure that are keeping each other alive."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides an elegant solution to this problem, known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"closure capture list"}]},{"type":"text","text":". However, before you learn how to break a strong reference cycle with a closure capture list, it’s useful to understand how such a cycle can be caused."}]},{"type":"paragraph","inlineContent":[{"text":"The example below shows how you can create a strong reference cycle when using a closure that references ","type":"text"},{"code":"self","type":"codeVoice"},{"text":". This example defines a class called ","type":"text"},{"code":"HTMLElement","type":"codeVoice"},{"text":", which provides a simple model for an individual element within an HTML document:","type":"text"}]},{"type":"codeListing","code":["class HTMLElement {","","    let name: String","    let text: String?","","    lazy var asHTML: () -> String = {","        if let text = self.text {","            return \"<\\(self.name)>\\(text)<\/\\(self.name)>\"","        } else {","            return \"<\\(self.name) \/>\"","        }","    }","","    init(name: String, text: String? = nil) {","        self.name = name","        self.text = text","    }","","    deinit {","        print(\"\\(name) is being deinitialized\")","    }","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"HTMLElement","type":"codeVoice"},{"text":" class defines a ","type":"text"},{"code":"name","type":"codeVoice"},{"text":" property, which indicates the name of the element, such as ","type":"text"},{"code":"\"h1\"","type":"codeVoice"},{"text":" for a heading element, ","type":"text"},{"code":"\"p\"","type":"codeVoice"},{"text":" for a paragraph element, or ","type":"text"},{"code":"\"br\"","type":"codeVoice"},{"text":" for a line break element. ","type":"text"},{"code":"HTMLElement","type":"codeVoice"},{"text":" also defines an optional ","type":"text"},{"code":"text","type":"codeVoice"},{"text":" property, which you can set to a string that represents the text to be rendered within that HTML element.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to these two simple properties, the "},{"code":"HTMLElement","type":"codeVoice"},{"type":"text","text":" class defines a lazy property called "},{"code":"asHTML","type":"codeVoice"},{"type":"text","text":". This property references a closure that combines "},{"code":"name","type":"codeVoice"},{"type":"text","text":" and "},{"code":"text","type":"codeVoice"},{"type":"text","text":" into an HTML string fragment. The "},{"code":"asHTML","type":"codeVoice"},{"type":"text","text":" property is of type "},{"code":"() -> String","type":"codeVoice"},{"type":"text","text":", or “a function that takes no parameters, and returns a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value”."}]},{"type":"paragraph","inlineContent":[{"text":"By default, the ","type":"text"},{"type":"codeVoice","code":"asHTML"},{"text":" property is assigned a closure that returns a string representation of an HTML tag. This tag contains the optional ","type":"text"},{"type":"codeVoice","code":"text"},{"text":" value if it exists, or no text content if ","type":"text"},{"type":"codeVoice","code":"text"},{"text":" doesn’t exist. For a paragraph element, the closure would return ","type":"text"},{"type":"codeVoice","code":"\"<p>some text<\/p>\""},{"text":" or ","type":"text"},{"type":"codeVoice","code":"\"<p \/>\""},{"text":", depending on whether the ","type":"text"},{"type":"codeVoice","code":"text"},{"text":" property equals ","type":"text"},{"type":"codeVoice","code":"\"some text\""},{"text":" or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"asHTML","type":"codeVoice"},{"type":"text","text":" property is named and used somewhat like an instance method. However, because "},{"code":"asHTML","type":"codeVoice"},{"type":"text","text":" is a closure property rather than an instance method, you can replace the default value of the "},{"code":"asHTML","type":"codeVoice"},{"type":"text","text":" property with a custom closure, if you want to change the HTML rendering for a particular HTML element."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, the "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" property could be set to a closure that defaults to some text if the "},{"type":"codeVoice","code":"text"},{"type":"text","text":" property is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", in order to prevent the representation from returning an empty HTML tag:"}]},{"type":"codeListing","code":["let heading = HTMLElement(name: \"h1\")","let defaultText = \"some default text\"","heading.asHTML = {","    return \"<\\(heading.name)>\\(heading.text ?? defaultText)<\/\\(heading.name)>\"","}","print(heading.asHTML())","\/\/ Prints \"<h1>some default text<\/h1>\""],"syntax":"swift"},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"asHTML","type":"codeVoice"},{"type":"text","text":" property is declared as a lazy property, because it’s only needed if and when the element actually needs to be rendered as a string value for some HTML output target. The fact that "},{"code":"asHTML","type":"codeVoice"},{"type":"text","text":" is a lazy property means that you can refer to "},{"code":"self","type":"codeVoice"},{"type":"text","text":" within the default closure, because the lazy property will not be accessed until after initialization has been completed and "},{"code":"self","type":"codeVoice"},{"type":"text","text":" is known to exist."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"HTMLElement","type":"codeVoice"},{"type":"text","text":" class provides a single initializer, which takes a "},{"code":"name","type":"codeVoice"},{"type":"text","text":" argument and (if desired) a "},{"code":"text","type":"codeVoice"},{"type":"text","text":" argument to initialize a new element. The class also defines a deinitializer, which prints a message to show when an "},{"code":"HTMLElement","type":"codeVoice"},{"type":"text","text":" instance is deallocated."}]},{"type":"paragraph","inlineContent":[{"text":"Here’s how you use the ","type":"text"},{"code":"HTMLElement","type":"codeVoice"},{"text":" class to create and print a new instance:","type":"text"}]},{"type":"codeListing","code":["var paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")","print(paragraph!.asHTML())","\/\/ Prints \"<p>hello, world<\/p>\""],"syntax":"swift"},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"paragraph"},{"type":"text","text":" variable above is defined as an "},{"inlineContent":[{"type":"text","text":"optional"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":", so that it can be set to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" below to demonstrate the presence of a strong reference cycle."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"text":"Unfortunately, the ","type":"text"},{"type":"codeVoice","code":"HTMLElement"},{"text":" class, as written above, creates a strong reference cycle between an ","type":"text"},{"type":"codeVoice","code":"HTMLElement"},{"text":" instance and the closure used for its default ","type":"text"},{"type":"codeVoice","code":"asHTML"},{"text":" value. Here’s how the cycle looks:","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"closureReferenceCycle01"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The instance’s "},{"code":"asHTML","type":"codeVoice"},{"type":"text","text":" property holds a strong reference to its closure. However, because the closure refers to "},{"code":"self","type":"codeVoice"},{"type":"text","text":" within its body (as a way to reference "},{"code":"self.name","type":"codeVoice"},{"type":"text","text":" and "},{"code":"self.text","type":"codeVoice"},{"type":"text","text":"), the closure "},{"type":"emphasis","inlineContent":[{"type":"text","text":"captures"}]},{"type":"text","text":" self, which means that it holds a strong reference back to the "},{"code":"HTMLElement","type":"codeVoice"},{"type":"text","text":" instance. A strong reference cycle is created between the two. (For more information about capturing values in a closure, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Capturing-Values","isActive":true,"type":"reference"},{"type":"text","text":".)"}]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Even though the closure refers to "},{"type":"codeVoice","code":"self"},{"type":"text","text":" multiple times, it only captures one strong reference to the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance."}]}]},{"type":"paragraph","inlineContent":[{"text":"If you set the ","type":"text"},{"code":"paragraph","type":"codeVoice"},{"text":" variable to ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" and break its strong reference to the ","type":"text"},{"code":"HTMLElement","type":"codeVoice"},{"text":" instance, neither the ","type":"text"},{"code":"HTMLElement","type":"codeVoice"},{"text":" instance nor its closure are deallocated, because of the strong reference cycle:","type":"text"}]},{"type":"codeListing","code":["paragraph = nil"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that the message in the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" deinitializer isn’t printed, which shows that the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance isn’t deallocated."}]},{"anchor":"Resolving-Strong-Reference-Cycles-for-Closures","level":2,"type":"heading","text":"Resolving Strong Reference Cycles for Closures"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You resolve a strong reference cycle between a closure and a class instance by defining a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"capture list"}]},{"text":" as part of the closure’s definition. A capture list defines the rules to use when capturing one or more reference types within the closure’s body. As with strong reference cycles between two class instances, you declare each captured reference to be a weak or unowned reference rather than a strong reference. The appropriate choice of weak or unowned depends on the relationships between the different parts of your code.","type":"text"}]},{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"type":"text","text":"Swift requires you to write "},{"type":"codeVoice","code":"self.someProperty"},{"type":"text","text":" or "},{"type":"codeVoice","code":"self.someMethod()"},{"type":"text","text":" (rather than just "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" or "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":") whenever you refer to a member of "},{"type":"codeVoice","code":"self"},{"type":"text","text":" within a closure. This helps you remember that it’s possible to capture "},{"type":"codeVoice","code":"self"},{"type":"text","text":" by accident."}],"type":"paragraph"}]},{"anchor":"Defining-a-Capture-List","level":3,"type":"heading","text":"Defining a Capture List"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each item in a capture list is a pairing of the "},{"type":"codeVoice","code":"weak"},{"type":"text","text":" or "},{"type":"codeVoice","code":"unowned"},{"type":"text","text":" keyword with a reference to a class instance (such as "},{"type":"codeVoice","code":"self"},{"type":"text","text":") or a variable initialized with some value (such as "},{"type":"codeVoice","code":"delegate = self.delegate"},{"type":"text","text":"). These pairings are written within a pair of square braces, separated by commas."}]},{"type":"paragraph","inlineContent":[{"text":"Place the capture list before a closure’s parameter list and return type if they’re provided:","type":"text"}]},{"type":"codeListing","code":["lazy var someClosure = {","    [unowned self, weak delegate = self.delegate]","    (index: Int, stringToProcess: String) -> String in","    \/\/ closure body goes here","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"If a closure doesn’t specify a parameter list or return type because they can be inferred from context, place the capture list at the very start of the closure, followed by the ","type":"text"},{"code":"in","type":"codeVoice"},{"text":" keyword:","type":"text"}]},{"type":"codeListing","code":["lazy var someClosure = {","    [unowned self, weak delegate = self.delegate] in","    \/\/ closure body goes here","}"],"syntax":"swift"},{"anchor":"Weak-and-Unowned-References","level":3,"type":"heading","text":"Weak and Unowned References"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Define a capture in a closure as an unowned reference when the closure and the instance it captures will always refer to each other, and will always be deallocated at the same time."}]},{"type":"paragraph","inlineContent":[{"text":"Conversely, define a capture as a weak reference when the captured reference may become ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" at some point in the future. Weak references are always of an optional type, and automatically become ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" when the instance they reference is deallocated. This enables you to check for their existence within the closure’s body.","type":"text"}]},{"type":"aside","style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the captured reference will never become "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", it should always be captured as an unowned reference, rather than a weak reference."}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An unowned reference is the appropriate capture method to use to resolve the strong reference cycle in the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" example from "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures","type":"reference"},{"type":"text","text":" above. Here’s how you write the "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" class to avoid the cycle:"}]},{"type":"codeListing","code":["class HTMLElement {","","    let name: String","    let text: String?","","    lazy var asHTML: () -> String = {","        [unowned self] in","        if let text = self.text {","            return \"<\\(self.name)>\\(text)<\/\\(self.name)>\"","        } else {","            return \"<\\(self.name) \/>\"","        }","    }","","    init(name: String, text: String? = nil) {","        self.name = name","        self.text = text","    }","","    deinit {","        print(\"\\(name) is being deinitialized\")","    }","","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This implementation of "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" is identical to the previous implementation, apart from the addition of a capture list within the "},{"type":"codeVoice","code":"asHTML"},{"type":"text","text":" closure. In this case, the capture list is "},{"type":"codeVoice","code":"[unowned self]"},{"type":"text","text":", which means “capture self as an unowned reference rather than a strong reference”."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can create and print an "},{"type":"codeVoice","code":"HTMLElement"},{"type":"text","text":" instance as before:"}]},{"type":"codeListing","code":["var paragraph: HTMLElement? = HTMLElement(name: \"p\", text: \"hello, world\")","print(paragraph!.asHTML())","\/\/ Prints \"<p>hello, world<\/p>\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here’s how the references look with the capture list in place:"}]},{"type":"paragraph","inlineContent":[{"type":"image","identifier":"closureReferenceCycle02"}]},{"type":"paragraph","inlineContent":[{"text":"This time, the capture of ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" by the closure is an unowned reference, and doesn’t keep a strong hold on the ","type":"text"},{"type":"codeVoice","code":"HTMLElement"},{"text":" instance it has captured. If you set the strong reference from the ","type":"text"},{"type":"codeVoice","code":"paragraph"},{"text":" variable to ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":", the ","type":"text"},{"type":"codeVoice","code":"HTMLElement"},{"text":" instance is deallocated, as can be seen from the printing of its deinitializer message in the example below:","type":"text"}]},{"type":"codeListing","code":["paragraph = nil","\/\/ Prints \"p is being deinitialized\""],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For more information about capture lists, see ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions"},{"text":".","type":"text"}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","interfaceLanguage":"swift"},"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"references":{"doc://com.apple.Swift/documentation/Swift/TypeCasting":{"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","title":"Type Casting","type":"topic","kind":"article","role":"article","url":"\/documentation\/swift\/typecasting"},"referenceCycle01":{"identifier":"referenceCycle01","variants":[{"traits":["2x","light"],"url":"\/images\/referenceCycle01@2x.png"}],"type":"image","alt":null},"doc://com.apple.Swift/documentation/Swift/Functions":{"title":"Functions","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed."}],"url":"\/documentation\/swift\/functions"},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors."}],"type":"topic","title":"Memory Safety","role":"article","url":"\/documentation\/swift\/memorysafety"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","abstract":[{"inlineContent":[{"type":"text","text":"Optional chaining"}],"type":"emphasis"},{"text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", the property, method, or subscript call returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/optionalchaining","type":"topic","role":"article","title":"Optional Chaining","kind":"article"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"url":"\/documentation\/swift\/thebasics","type":"topic","role":"article","title":"The Basics","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Properties":{"role":"article","type":"topic","url":"\/documentation\/swift\/properties","abstract":[{"inlineContent":[{"type":"text","text":"Properties"}],"type":"emphasis"},{"type":"text","text":" associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","title":"Properties","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Methods":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C."}],"type":"topic","title":"Methods","role":"article","url":"\/documentation\/swift\/methods"},"closureReferenceCycle01":{"identifier":"closureReferenceCycle01","variants":[{"url":"\/images\/closureReferenceCycle01@2x.png","traits":["2x","light"]}],"type":"image","alt":null},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"role":"article","type":"topic","url":"\/documentation\/swift\/deinitialization","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"deinitializer"}],"type":"emphasis"},{"type":"text","text":" is called immediately before a class instance is deallocated. You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword, similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword. Deinitializers are only available on class types."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","title":"Deinitialization","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use."}],"url":"\/documentation\/swift\/initialization","type":"topic","role":"article","title":"Initialization","kind":"article"},"doc://com.apple.Swift/documentation/Swift/TheBasics#Implicitly-Unwrapped-Optionals":{"kind":"section","url":"\/documentation\/swift\/thebasics#Implicitly-Unwrapped-Optionals","abstract":[],"title":"Implicitly Unwrapped Optionals","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics#Implicitly-Unwrapped-Optionals"},"doc://com.apple.Swift/documentation/Swift/Extensions":{"type":"topic","kind":"article","title":"Extensions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as "},{"type":"emphasis","inlineContent":[{"text":"retroactive modeling","type":"text"}]},{"type":"text","text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)"}],"url":"\/documentation\/swift\/extensions"},"doc://com.apple.Swift/documentation/Swift/Protocols":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"protocol","type":"text"}]},{"type":"text","text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to "},{"inlineContent":[{"type":"text","text":"conform"}],"type":"emphasis"},{"type":"text","text":" to that protocol."}],"type":"topic","title":"Protocols","role":"article","url":"\/documentation\/swift\/protocols"},"doc://com.apple.Swift/documentation/Swift/Closures":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages."}],"url":"\/documentation\/swift\/closures","type":"topic","role":"article","title":"Closures","kind":"article"},"closureReferenceCycle02":{"identifier":"closureReferenceCycle02","variants":[{"traits":["2x","light"],"url":"\/images\/closureReferenceCycle02@2x.png"}],"type":"image","alt":null},"weakReference01":{"identifier":"weakReference01","variants":[{"url":"\/images\/weakReference01@2x.png","traits":["2x","light"]}],"type":"image","alt":null},"weakReference02":{"identifier":"weakReference02","variants":[{"traits":["2x","light"],"url":"\/images\/weakReference02@2x.png"}],"type":"image","alt":null},"doc://com.apple.Swift/documentation/Swift/Inheritance":{"role":"article","type":"topic","url":"\/documentation\/swift\/inheritance","abstract":[{"text":"A class can ","type":"text"},{"inlineContent":[{"type":"text","text":"inherit"}],"type":"emphasis"},{"text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a ","type":"text"},{"inlineContent":[{"type":"text","text":"subclass"}],"type":"emphasis"},{"type":"text","text":", and the class it inherits from is known as its "},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"type":"text","text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","title":"Inheritance","kind":"article"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures":{"url":"\/documentation\/swift\/automaticreferencecounting#Strong-Reference-Cycles-for-Closures","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Strong-Reference-Cycles-for-Closures","kind":"section","abstract":[],"type":"topic","title":"Strong Reference Cycles for Closures"},"unownedReference02":{"alt":null,"identifier":"unownedReference02","type":"image","variants":[{"url":"\/images\/unownedReference02@2x.png","traits":["2x","light"]}]},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"type":"topic","title":"Error Handling","role":"article","url":"\/documentation\/swift\/errorhandling"},"unownedOptionalReference":{"alt":null,"identifier":"unownedOptionalReference","type":"image","variants":[{"url":"\/images\/unownedOptionalReference@2x.png","traits":["2x","light"]}]},"unownedReference01":{"alt":null,"identifier":"unownedReference01","type":"image","variants":[{"url":"\/images\/unownedReference01@2x.png","traits":["2x","light"]}]},"doc://com.apple.Swift/documentation/Swift/Expressions":{"type":"topic","title":"Expressions","abstract":[{"type":"text","text":"In Swift, there are four kinds of expressions: prefix expressions, infix expressions, primary expressions, and postfix expressions. Evaluating an expression returns a value, causes a side effect, or both."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","kind":"article","role":"article","url":"\/documentation\/swift\/expressions"},"weakReference03":{"alt":null,"identifier":"weakReference03","type":"image","variants":[{"url":"\/images\/weakReference03@2x.png","traits":["2x","light"]}]},"referenceCycle03":{"alt":null,"identifier":"referenceCycle03","type":"image","variants":[{"url":"\/images\/referenceCycle03@2x.png","traits":["2x","light"]}]},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"role":"article","type":"topic","url":"\/documentation\/swift\/classesandstructures","abstract":[{"inlineContent":[{"type":"text","text":"Structures"}],"type":"emphasis"},{"type":"text","text":" and "},{"inlineContent":[{"text":"classes","type":"text"}],"type":"emphasis"},{"type":"text","text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","title":"Structures and Classes","kind":"article"},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","abstract":[{"type":"text","text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t."}],"url":"\/documentation\/swift\/opaquetypes","type":"topic","role":"article","title":"Opaque Types","kind":"article"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"role":"article","type":"topic","url":"\/documentation\/swift\/stringsandcharacters","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"text":"string","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a series of characters, such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":". Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type. The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways, including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","title":"Strings and Characters","kind":"article"},"referenceCycle02":{"alt":null,"identifier":"referenceCycle02","type":"image","variants":[{"url":"\/images\/referenceCycle02@2x.png","traits":["2x","light"]}]},"doc://com.apple.Swift/documentation/Swift/Initialization#Two-Phase-Initialization":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Two-Phase-Initialization","abstract":[],"kind":"section","type":"topic","title":"Two-Phase Initialization","url":"\/documentation\/swift\/initialization#Two-Phase-Initialization"},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements. These include "},{"code":"while","type":"codeVoice"},{"type":"text","text":" loops to perform a task multiple times; "},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" to transfer the flow of execution to another point in your code."}],"type":"topic","title":"Control Flow","role":"article","url":"\/documentation\/swift\/controlflow"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances","kind":"section","type":"topic","url":"\/documentation\/swift\/automaticreferencecounting#Resolving-Strong-Reference-Cycles-Between-Class-Instances","title":"Resolving Strong Reference Cycles Between Class Instances","abstract":[]},"https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html":{"url":"https:\/\/developer.apple.com\/library\/content\/releasenotes\/ObjectiveC\/RN-TransitioningToARC\/Introduction\/Introduction.html","identifier":"https:\/\/developer.apple.com\/library\/content\/releasenotes\/ObjectiveC\/RN-TransitioningToARC\/Introduction\/Introduction.html","titleInlineContent":[{"type":"text","text":"Transitioning to ARC Release Notes"}],"type":"link","title":"Transitioning to ARC Release Notes"},"doc://com.apple.Swift/documentation/Swift/NestedTypes":{"url":"\/documentation\/swift\/nestedtypes","type":"topic","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":", whereby you nest supporting enumerations, classes, and structures within the definition of the type they support."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","role":"article"},"doc://com.apple.Swift/documentation/Swift/Subscripts":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"type":"topic","title":"Subscripts","role":"article","url":"\/documentation\/swift\/subscripts"},"doc://com.apple.Swift/documentation/Swift/Concurrency":{"title":"Concurrency","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. "},{"type":"emphasis","inlineContent":[{"text":"Parallel code","type":"text"}]},{"text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way.","type":"text"}],"url":"\/documentation\/swift\/concurrency"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"abstract":[{"type":"text","text":"In addition to the operators described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators"},{"type":"text","text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","title":"Advanced Operators","type":"topic","kind":"article","role":"article","url":"\/documentation\/swift\/advancedoperators"},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","abstract":[{"inlineContent":[{"type":"text","text":"Access control"}],"type":"emphasis"},{"type":"text","text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used."}],"type":"topic","title":"Access Control","role":"article","url":"\/documentation\/swift\/accesscontrol"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"type":"topic","kind":"article","title":"Basic Operators","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","role":"article","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers, as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":", and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values, as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/basicoperators"},"doc://com.apple.Swift/documentation/Swift/Closures#Capturing-Values":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Capturing-Values","kind":"section","type":"topic","url":"\/documentation\/swift\/closures#Capturing-Values","title":"Capturing Values","abstract":[]},"doc://com.apple.Swift/documentation/Swift/CollectionTypes":{"role":"article","type":"topic","url":"\/documentation\/swift\/collectiontypes","abstract":[{"type":"text","text":"Swift provides three primary "},{"inlineContent":[{"type":"text","text":"collection types"}],"type":"emphasis"},{"type":"text","text":", known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","title":"Collection Types","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Enumerations":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code."}],"url":"\/documentation\/swift\/enumerations","type":"topic","role":"article","title":"Enumerations","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Generics":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner."}],"url":"\/documentation\/swift\/generics","type":"topic","role":"article","title":"Generics","kind":"article"},"doc://com.apple.Swift/documentation/Swift":{"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","abstract":[],"type":"topic","title":"Swift","role":"collection","url":"\/documentation\/swift"}}}