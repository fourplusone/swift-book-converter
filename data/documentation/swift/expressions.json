{"seeAlsoSections":[{"identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/AboutTheLanguageReference","doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar"],"title":"Language Reference","generated":true}],"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"inlineContent":[{"text":"Prefix and infix expressions let you apply operators to smaller expressions. Primary expressions are conceptually the simplest kind of expression, and they provide a way to access values. Postfix expressions, like prefix and infix expressions, let you build up more complex expressions using postfixes such as function calls and member access. Each kind of expression is described in detail in the sections below.","type":"text"}],"type":"paragraph"},{"name":"Grammar of an expression","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"style":"note","type":"aside"},{"text":"Prefix Expressions","level":2,"anchor":"Prefix-Expressions","type":"heading"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"text":"Prefix expressions","type":"text"}]},{"type":"text","text":" combine an optional prefix operator with an expression. Prefix operators take one argument, the expression that follows them."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For information about the behavior of these operators, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators"},{"type":"text","text":" and "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For information about the operators provided by the Swift standard library, see "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations"},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations]"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a prefix expression","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"style":"note","type":"aside"},{"text":"In-Out Expression","level":3,"anchor":"In-Out-Expression","type":"heading"},{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"in-out expression"}]},{"type":"text","text":" marks a variable that’s being passed as an in-out argument to a function call expression."}],"type":"paragraph"},{"syntax":"swift","code":["&expression"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"For more information about in-out parameters and to see an example, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#In-Out-Parameters"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In-out expressions are also used when providing a non-pointer argument in a context where a pointer is needed, as described in "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of an in-out expression","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"},{"text":"Try Operator","level":3,"anchor":"Try-Operator","type":"heading"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"try expression"}]},{"type":"text","text":" consists of the "},{"type":"codeVoice","code":"try"},{"type":"text","text":" operator followed by an expression that can throw an error. It has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["try expression"],"type":"codeListing"},{"inlineContent":[{"text":"The value of a ","type":"text"},{"code":"try","type":"codeVoice"},{"text":" expression is the value of the ","type":"text"},{"inlineContent":[{"type":"text","text":"expression"}],"type":"emphasis"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional-try expression"}]},{"type":"text","text":" consists of the "},{"type":"codeVoice","code":"try?"},{"type":"text","text":" operator followed by an expression that can throw an error. It has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["try? expression"],"type":"codeListing"},{"inlineContent":[{"text":"If the ","type":"text"},{"inlineContent":[{"type":"text","text":"expression"}],"type":"emphasis"},{"text":" doesn’t throw an error, the value of the optional-try expression is an optional containing the value of the ","type":"text"},{"inlineContent":[{"text":"expression","type":"text"}],"type":"emphasis"},{"text":". Otherwise, the value of the optional-try expression is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"forced-try expression"}],"type":"emphasis"},{"text":" consists of the ","type":"text"},{"code":"try!","type":"codeVoice"},{"text":" operator followed by an expression that can throw an error. It has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["try! expression"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The value of a forced-try expression is the value of the "},{"inlineContent":[{"text":"expression","type":"text"}],"type":"emphasis"},{"type":"text","text":". If the "},{"inlineContent":[{"type":"text","text":"expression"}],"type":"emphasis"},{"type":"text","text":" throws an error, a runtime error is produced."}],"type":"paragraph"},{"inlineContent":[{"text":"When the expression on the left-hand side of an infix operator is marked with ","type":"text"},{"code":"try","type":"codeVoice"},{"text":", ","type":"text"},{"code":"try?","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"try!","type":"codeVoice"},{"text":", that operator applies to the whole infix expression. That said, you can use parentheses to be explicit about the scope of the operator’s application.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ try applies to both function calls","sum = try someThrowingFunction() + anotherThrowingFunction()","","\/\/ try applies to both function calls","sum = try (someThrowingFunction() + anotherThrowingFunction())","","\/\/ Error: try applies only to the first function call","sum = (try someThrowingFunction()) + anotherThrowingFunction()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"A "},{"code":"try","type":"codeVoice"},{"type":"text","text":" expression can’t appear on the right-hand side of an infix operator, unless the infix operator is the assignment operator or the "},{"code":"try","type":"codeVoice"},{"type":"text","text":" expression is enclosed in parentheses."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If an expression includes both the "},{"type":"codeVoice","code":"try"},{"type":"text","text":" and "},{"type":"codeVoice","code":"await"},{"type":"text","text":" operator, the "},{"type":"codeVoice","code":"try"},{"type":"text","text":" operator must appear first."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For more information and to see examples of how to use "},{"type":"codeVoice","code":"try"},{"type":"text","text":", "},{"type":"codeVoice","code":"try?"},{"type":"text","text":", and "},{"type":"codeVoice","code":"try!"},{"type":"text","text":", see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a try expression","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}],"style":"note","type":"aside"},{"text":"Await Operator","level":3,"anchor":"Await-Operator","type":"heading"},{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"await expression"}]},{"type":"text","text":" consists of the "},{"type":"codeVoice","code":"await"},{"type":"text","text":" operator followed by an expression that uses the result of an asynchronous operation. It has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["await expression"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The value of an "},{"code":"await","type":"codeVoice"},{"type":"text","text":" expression is the value of the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An expression marked with "},{"type":"codeVoice","code":"await"},{"type":"text","text":" is called a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"potential suspension point"}]},{"type":"text","text":". Execution of an asynchronous function can be suspended at each expression that’s marked with "},{"type":"codeVoice","code":"await"},{"type":"text","text":". In addition, execution of concurrent code is never suspended at any other point. This means code between potential suspension points can safely update state that requires temporarily breaking invariants, provided that it completes the update before the next potential suspension point."}],"type":"paragraph"},{"inlineContent":[{"text":"An ","type":"text"},{"code":"await","type":"codeVoice"},{"text":" expression can appear only within an asynchronous context, such as the trailing closure passed to the ","type":"text"},{"code":"async(priority:operation:)","type":"codeVoice"},{"text":" function. It can’t appear in the body of a ","type":"text"},{"code":"defer","type":"codeVoice"},{"text":" statement, or in an autoclosure of synchronous function type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"When the expression on the left-hand side of an infix operator is marked with the ","type":"text"},{"type":"codeVoice","code":"await"},{"text":" operator, that operator applies to the whole infix expression. That said, you can use parentheses to be explicit about the scope of the operator’s application.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ await applies to both function calls","sum = await someAsyncFunction() + anotherAsyncFunction()","","\/\/ await applies to both function calls","sum = await (someAsyncFunction() + anotherAsyncFunction())","","\/\/ Error: await applies only to the first function call","sum = (await someAsyncFunction()) + anotherAsyncFunction()"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"An "},{"type":"codeVoice","code":"await"},{"type":"text","text":" expression can’t appear on the right-hand side of an infix operator, unless the infix operator is the assignment operator or the "},{"type":"codeVoice","code":"await"},{"type":"text","text":" expression is enclosed in parentheses."}],"type":"paragraph"},{"inlineContent":[{"text":"If an expression includes both the ","type":"text"},{"type":"codeVoice","code":"await"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"try"},{"text":" operator, the ","type":"text"},{"type":"codeVoice","code":"try"},{"text":" operator must appear first.","type":"text"}],"type":"paragraph"},{"name":"Grammar of an await expression","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"style":"note","type":"aside"},{"text":"Infix Expressions","level":2,"anchor":"Infix-Expressions","type":"heading"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Infix expressions"}]},{"type":"text","text":" combine an infix binary operator with the expression that it takes as its left- and right-hand arguments. It has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["left-hand argument operator right-hand argument"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"For information about the behavior of these operators, see "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"For information about the operators provided by the Swift standard library, see ","type":"text"},{"overridingTitleInlineContent":[{"text":"Operator Declarations","type":"text"}],"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","type":"reference","overridingTitle":"Operator Declarations"},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations]","type":"text"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"At parse time, an expression made up of infix operators is represented as a flat list. This list is transformed into a tree by applying operator precedence. For example, the expression ","type":"text"},{"type":"codeVoice","code":"2 + 3 * 5"},{"text":" is initially understood as a flat list of five items, ","type":"text"},{"type":"codeVoice","code":"2"},{"text":", ","type":"text"},{"type":"codeVoice","code":"+"},{"text":", ","type":"text"},{"type":"codeVoice","code":"3"},{"text":", ","type":"text"},{"type":"codeVoice","code":"*"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"5"},{"text":". This process transforms it into the tree (2 + (3 * 5)).","type":"text"}],"type":"paragraph"}],"style":"note","type":"aside"},{"name":"Grammar of an infix expression","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}],"style":"note","type":"aside"},{"text":"Assignment Operator","level":3,"anchor":"Assignment-Operator","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"assignment operator"}]},{"type":"text","text":" sets a new value for a given expression. It has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["expression = value"],"type":"codeListing"},{"inlineContent":[{"text":"The value of the ","type":"text"},{"inlineContent":[{"text":"expression","type":"text"}],"type":"emphasis"},{"text":" is set to the value obtained by evaluating the ","type":"text"},{"inlineContent":[{"text":"value","type":"text"}],"type":"emphasis"},{"text":". If the ","type":"text"},{"inlineContent":[{"type":"text","text":"expression"}],"type":"emphasis"},{"text":" is a tuple, the ","type":"text"},{"inlineContent":[{"type":"text","text":"value"}],"type":"emphasis"},{"text":" must be a tuple with the same number of elements. (Nested tuples are allowed.) Assignment is performed from each part of the ","type":"text"},{"inlineContent":[{"text":"value","type":"text"}],"type":"emphasis"},{"text":" to the corresponding part of the ","type":"text"},{"inlineContent":[{"type":"text","text":"expression"}],"type":"emphasis"},{"text":". For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["(a, _, (b, c)) = (\"test\", 9.45, (12, 3))","\/\/ a is \"test\", b is 12, c is 3, and 9.45 is ignored"],"type":"codeListing"},{"inlineContent":[{"text":"The assignment operator doesn’t return any value.","type":"text"}],"type":"paragraph"},{"name":"Grammar of an assignment operator","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}],"style":"note","type":"aside"},{"text":"Ternary Conditional Operator","level":3,"anchor":"Ternary-Conditional-Operator","type":"heading"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"ternary conditional operator"}]},{"text":" evaluates to one of two given values based on the value of a condition. It has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["condition ? expression used if true : expression used if false"],"type":"codeListing"},{"inlineContent":[{"text":"If the ","type":"text"},{"inlineContent":[{"text":"condition","type":"text"}],"type":"emphasis"},{"text":" evaluates to ","type":"text"},{"type":"codeVoice","code":"true"},{"text":", the conditional operator evaluates the first expression and returns its value. Otherwise, it evaluates the second expression and returns its value. The unused expression isn’t evaluated.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For an example that uses the ternary conditional operator, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Ternary-Conditional-Operator","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of a conditional operator","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"style":"note","type":"aside"},{"text":"Type-Casting Operators","level":3,"anchor":"Type-Casting-Operators","type":"heading"},{"inlineContent":[{"type":"text","text":"There are four type-casting operators: the "},{"type":"codeVoice","code":"is"},{"type":"text","text":" operator, the "},{"type":"codeVoice","code":"as"},{"type":"text","text":" operator, the "},{"type":"codeVoice","code":"as?"},{"type":"text","text":" operator, and the "},{"type":"codeVoice","code":"as!"},{"type":"text","text":" operator."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"They have the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["expression is type","expression as type","expression as? type","expression as! type"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"is"},{"type":"text","text":" operator checks at runtime whether the "},{"type":"emphasis","inlineContent":[{"text":"expression","type":"text"}]},{"type":"text","text":" can be cast to the specified "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type"}]},{"type":"text","text":". It returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"expression"}]},{"type":"text","text":" can be cast to the specified "},{"type":"emphasis","inlineContent":[{"text":"type","type":"text"}]},{"type":"text","text":"; otherwise, it returns "},{"type":"codeVoice","code":"false"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"as"},{"type":"text","text":" operator performs a cast when it’s known at compile time that the cast always succeeds, such as upcasting or bridging. Upcasting lets you use an expression as an instance of its type’s supertype, without using an intermediate variable. The following approaches are equivalent:"}],"type":"paragraph"},{"syntax":"swift","code":["func f(_ any: Any) { print(\"Function for Any\") }","func f(_ int: Int) { print(\"Function for Int\") }","let x = 10","f(x)","\/\/ Prints \"Function for Int\"","","let y: Any = x","f(y)","\/\/ Prints \"Function for Any\"","","f(x as Any)","\/\/ Prints \"Function for Any\""],"type":"codeListing"},{"inlineContent":[{"text":"Bridging lets you use an expression of a Swift standard library type such as ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" as its corresponding Foundation type such as ","type":"text"},{"type":"codeVoice","code":"NSString"},{"text":" without needing to create a new instance. For more information on bridging, see ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective_c_apis\/working_with_foundation_types","type":"reference"},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective_c_apis\/working_with_foundation_types]","type":"text"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"as?","type":"codeVoice"},{"text":" operator performs a conditional cast of the ","type":"text"},{"inlineContent":[{"text":"expression","type":"text"}],"type":"emphasis"},{"text":" to the specified ","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"text":". The ","type":"text"},{"code":"as?","type":"codeVoice"},{"text":" operator returns an optional of the specified ","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"text":". At runtime, if the cast succeeds, the value of ","type":"text"},{"inlineContent":[{"type":"text","text":"expression"}],"type":"emphasis"},{"text":" is wrapped in an optional and returned; otherwise, the value returned is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". If casting to the specified ","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"text":" is guaranteed to fail or is guaranteed to succeed, a compile-time error is raised.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"as!","type":"codeVoice"},{"text":" operator performs a forced cast of the ","type":"text"},{"inlineContent":[{"text":"expression","type":"text"}],"type":"emphasis"},{"text":" to the specified ","type":"text"},{"inlineContent":[{"type":"text","text":"type"}],"type":"emphasis"},{"text":". The ","type":"text"},{"code":"as!","type":"codeVoice"},{"text":" operator returns a value of the specified ","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"text":", not an optional type. If the cast fails, a runtime error is raised. The behavior of ","type":"text"},{"code":"x as! T","type":"codeVoice"},{"text":" is the same as the behavior of ","type":"text"},{"code":"(x as? T)!","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"For more information about type casting and to see examples that use the type-casting operators, see ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of a type-casting operator","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"style":"note","type":"aside"},{"text":"Primary Expressions","level":2,"anchor":"Primary-Expressions","type":"heading"},{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Primary expressions"}]},{"type":"text","text":" are the most basic kind of expression. They can be used as expressions on their own, and they can be combined with other tokens to make prefix expressions, infix expressions, and postfix expressions."}],"type":"paragraph"},{"name":"Grammar of a primary expression","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}],"style":"note","type":"aside"},{"text":"Literal Expression","level":3,"anchor":"Literal-Expression","type":"heading"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"literal expression"}],"type":"emphasis"},{"text":" consists of either an ordinary literal (such as a string or a number), an array or dictionary literal, a playground literal, or one of the following special literals:","type":"text"}],"type":"paragraph"},{"rows":[[[{"type":"paragraph","inlineContent":[{"text":"Literal","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Type","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Value","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"#file"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"The path to the file in which it appears.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"#fileID","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"String"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The name of the file and module in which it appears."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"#filePath"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The path to the file in which it appears."}]}]],[[{"type":"paragraph","inlineContent":[{"code":"#line","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"Int","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The line number on which it appears."}]}]],[[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"#column"}]}],[{"type":"paragraph","inlineContent":[{"code":"Int","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"The column number in which it begins."}]}]],[[{"type":"paragraph","inlineContent":[{"code":"#function","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"String","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"The name of the declaration in which it appears.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"code":"#dsohandle","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"code":"UnsafeRawPointer","type":"codeVoice"}]}],[{"type":"paragraph","inlineContent":[{"text":"The dynamic shared object (DSO) handle in use where it appears.","type":"text"}]}]]],"header":"row","type":"table"},{"inlineContent":[{"text":"The string value of ","type":"text"},{"type":"codeVoice","code":"#file"},{"text":" depends on the language version, to enable migration from the old ","type":"text"},{"type":"codeVoice","code":"#filePath"},{"text":" behavior to the new ","type":"text"},{"type":"codeVoice","code":"#fileID"},{"text":" behavior. Currently, ","type":"text"},{"type":"codeVoice","code":"#file"},{"text":" has the same value as ","type":"text"},{"type":"codeVoice","code":"#filePath"},{"text":". In a future version of Swift, ","type":"text"},{"type":"codeVoice","code":"#file"},{"text":" will have the same value as ","type":"text"},{"type":"codeVoice","code":"#fileID"},{"text":" instead. To adopt the future behavior, replace ","type":"text"},{"type":"codeVoice","code":"#file"},{"text":" with ","type":"text"},{"type":"codeVoice","code":"#fileID"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"#filePath"},{"text":" as appropriate.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The string value of a "},{"code":"#fileID","type":"codeVoice"},{"type":"text","text":" expression has the form "},{"inlineContent":[{"text":"module","type":"text"}],"type":"emphasis"},{"type":"text","text":"\/"},{"inlineContent":[{"type":"text","text":"file"}],"type":"emphasis"},{"type":"text","text":", where "},{"inlineContent":[{"text":"file","type":"text"}],"type":"emphasis"},{"type":"text","text":" is the name of the file in which the expression appears and "},{"inlineContent":[{"type":"text","text":"module"}],"type":"emphasis"},{"type":"text","text":" is the name of the module that this file is part of. The string value of a "},{"code":"#filePath","type":"codeVoice"},{"type":"text","text":" expression is the full file-system path to the file in which the expression appears. Both of these values can be changed by "},{"code":"#sourceLocation","type":"codeVoice"},{"type":"text","text":", as described in "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Line-Control-Statement","isActive":true,"type":"reference"},{"type":"text","text":". Because "},{"code":"#fileID","type":"codeVoice"},{"type":"text","text":" doesn’t embed the full path to the source file, unlike "},{"code":"#filePath","type":"codeVoice"},{"type":"text","text":", it gives you better privacy and reduces the size of the compiled binary. Avoid using "},{"code":"#filePath","type":"codeVoice"},{"type":"text","text":" outside of tests, build scripts, or other code that doesn’t become part of the shipping program."}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"To parse a ","type":"text"},{"type":"codeVoice","code":"#fileID"},{"text":" expression, read the module name as the text before the first slash (","type":"text"},{"type":"codeVoice","code":"\/"},{"text":") and the filename as the text after the last slash. In the future, the string might contain multiple slashes, such as ","type":"text"},{"type":"codeVoice","code":"MyModule\/some\/disambiguation\/MyFile.swift"},{"text":".","type":"text"}]}],"style":"note","type":"aside"},{"inlineContent":[{"type":"text","text":"Inside a function, the value of "},{"type":"codeVoice","code":"#function"},{"type":"text","text":" is the name of that function, inside a method it’s the name of that method, inside a property getter or setter it’s the name of that property, inside special members like "},{"type":"codeVoice","code":"init"},{"type":"text","text":" or "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":" it’s the name of that keyword, and at the top level of a file it’s the name of the current module."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When used as the default value of a function or method parameter, the special literal’s value is determined when the default value expression is evaluated at the call site."}],"type":"paragraph"},{"syntax":"swift","code":["func logFunctionName(string: String = #function) {","    print(string)","}","func myFunction() {","    logFunctionName() \/\/ Prints \"myFunction()\".","}"],"type":"codeListing"},{"inlineContent":[{"text":"An ","type":"text"},{"inlineContent":[{"type":"text","text":"array literal"}],"type":"emphasis"},{"text":" is an ordered collection of values. It has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["[value 1, value 2, ...]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The last expression in the array can be followed by an optional comma. The value of an array literal has type "},{"type":"codeVoice","code":"[T]"},{"type":"text","text":", where "},{"type":"codeVoice","code":"T"},{"type":"text","text":" is the type of the expressions inside it. If there are expressions of multiple types, "},{"type":"codeVoice","code":"T"},{"type":"text","text":" is their closest common supertype. Empty array literals are written using an empty pair of square brackets and can be used to create an empty array of a specified type."}],"type":"paragraph"},{"syntax":"swift","code":["var emptyArray: [Double] = []"],"type":"codeListing"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"dictionary literal"}],"type":"emphasis"},{"text":" is an unordered collection of key-value pairs. It has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["[key 1: value 1, key 2: value 2, ...]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The last expression in the dictionary can be followed by an optional comma. The value of a dictionary literal has type "},{"type":"codeVoice","code":"[Key: Value]"},{"type":"text","text":", where "},{"type":"codeVoice","code":"Key"},{"type":"text","text":" is the type of its key expressions and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" is the type of its value expressions. If there are expressions of multiple types, "},{"type":"codeVoice","code":"Key"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Value"},{"type":"text","text":" are the closest common supertype for their respective values. An empty dictionary literal is written as a colon inside a pair of brackets ("},{"type":"codeVoice","code":"[:]"},{"type":"text","text":") to distinguish it from an empty array literal. You can use an empty dictionary literal to create an empty dictionary literal of specified key and value types."}],"type":"paragraph"},{"syntax":"swift","code":["var emptyDictionary: [String: Double] = [:]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"text":"playground literal","type":"text"}],"type":"emphasis"},{"type":"text","text":" is used by Xcode to create an interactive representation of a color, file, or image within the program editor. Playground literals in plain text outside of Xcode are represented using a special literal syntax."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For information on using playground literals in Xcode, see "},{"type":"reference","identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev4c60242fc","isActive":true},{"type":"text","text":" [https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev4c60242fc]"},{"type":"text","text":" in Xcode Help."}],"type":"paragraph"},{"name":"Grammar of a literal expression","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}],"style":"note","type":"aside"},{"text":"Self Expression","level":3,"anchor":"Self-Expression","type":"heading"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"self"},{"type":"text","text":" expression is an explicit reference to the current type or instance of the type in which it occurs. It has the following forms:"}],"type":"paragraph"},{"syntax":"swift","code":["self","self.member name","self[subscript index]","self(initializer arguments)","self.init(initializer arguments)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In an initializer, subscript, or instance method, "},{"code":"self","type":"codeVoice"},{"type":"text","text":" refers to the current instance of the type in which it occurs. In a type method, "},{"code":"self","type":"codeVoice"},{"type":"text","text":" refers to the current type in which it occurs."}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" expression is used to specify scope when accessing members, providing disambiguation when there’s another variable of the same name in scope, such as a function parameter. For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeClass {","    var greeting: String","    init(greeting: String) {","        self.greeting = greeting","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"In a mutating method of a value type, you can assign a new instance of that value type to ","type":"text"},{"code":"self","type":"codeVoice"},{"text":". For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct Point {","    var x = 0.0, y = 0.0","    mutating func moveBy(x deltaX: Double, y deltaY: Double) {","        self = Point(x: x + deltaX, y: y + deltaY)","    }","}"],"type":"codeListing"},{"name":"Grammar of a self expression","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}]},{"type":"heading","level":3,"text":"Superclass Expression","anchor":"Superclass-Expression"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"superclass expression","type":"text"}],"type":"emphasis"},{"text":" lets a class interact with its superclass. It has one of the following forms:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["super.member name","super[subscript index]","super.init(initializer arguments)"],"type":"codeListing"},{"inlineContent":[{"text":"The first form is used to access a member of the superclass. The second form is used to access the superclass’s subscript implementation. The third form is used to access an initializer of the superclass.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Subclasses can use a superclass expression in their implementation of members, subscripting, and initializers to make use of the implementation in their superclass."}],"type":"paragraph"},{"name":"Grammar of a superclass expression","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}]},{"type":"heading","level":3,"text":"Closure Expression","anchor":"Closure-Expression"},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"closure expression"}],"type":"emphasis"},{"type":"text","text":" creates a closure, also known as a "},{"inlineContent":[{"text":"lambda","type":"text"}],"type":"emphasis"},{"type":"text","text":" or an "},{"inlineContent":[{"type":"text","text":"anonymous function"}],"type":"emphasis"},{"type":"text","text":" in other programming languages. Like a function declaration, a closure contains statements, and it captures constants and variables from its enclosing scope. It has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["{ (parameters) -> return type in","    statements","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"parameters"}],"type":"emphasis"},{"type":"text","text":" have the same form as the parameters in a function declaration, as described in "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Function-Declaration","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Writing "},{"type":"codeVoice","code":"throws"},{"type":"text","text":" or "},{"type":"codeVoice","code":"async"},{"type":"text","text":" in a closure expression explicitly marks a closure as throwing or asynchronous."}],"type":"paragraph"},{"syntax":"swift","code":["{ (parameters) async throws -> return type in","    statements","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If the body of a closure includes a try expression, the closure is understood to be throwing. Likewise, if it includes an await expression, it’s understood to be asynchronous."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There are several special forms that allow closures to be written more concisely:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"A closure can omit the types of its parameters, its return type, or both. If you omit the parameter names and both types, omit the ","type":"text"},{"type":"codeVoice","code":"in"},{"text":" keyword before the statements. If the omitted types can’t be inferred, a compile-time error is raised.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A closure may omit names for its parameters. Its parameters are then implicitly named ","type":"text"},{"code":"$","type":"codeVoice"},{"text":" followed by their position: ","type":"text"},{"code":"$0","type":"codeVoice"},{"text":", ","type":"text"},{"code":"$1","type":"codeVoice"},{"text":", ","type":"text"},{"code":"$2","type":"codeVoice"},{"text":", and so on.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"A closure that consists of only a single expression is understood to return the value of that expression. The contents of this expression are also considered when performing type inference on the surrounding expression."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"The following closure expressions are equivalent:"}],"type":"paragraph"},{"syntax":"swift","code":["myFunction { (x: Int, y: Int) -> Int in","    return x + y","}","","myFunction { x, y in","    return x + y","}","","myFunction { return $0 + $1 }","","myFunction { $0 + $1 }"],"type":"codeListing"},{"inlineContent":[{"text":"For information about passing a closure as an argument to a function, see ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Function-Call-Expression","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Closure expressions can be used without being stored in a variable or constant, such as when you immediately use a closure as part of a function call. The closure expressions passed to ","type":"text"},{"code":"myFunction","type":"codeVoice"},{"text":" in code above are examples of this kind of immediate use. As a result, whether a closure expression is escaping or nonescaping depends on the surrounding context of the expression. A closure expression is nonescaping if it’s called immediately or passed as a nonescaping function argument. Otherwise, the closure expression is escaping.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For more information about escaping closures, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Escaping-Closures","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","level":4,"text":"Capture Lists","anchor":"Capture-Lists"},{"inlineContent":[{"type":"text","text":"By default, a closure expression captures constants and variables from its surrounding scope with strong references to those values. You can use a "},{"inlineContent":[{"text":"capture list","type":"text"}],"type":"emphasis"},{"type":"text","text":" to explicitly control how values are captured in a closure."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A capture list is written as a comma-separated list of expressions surrounded by square brackets, before the list of parameters. If you use a capture list, you must also use the "},{"type":"codeVoice","code":"in"},{"type":"text","text":" keyword, even if you omit the parameter names, parameter types, and return type."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The entries in the capture list are initialized when the closure is created. For each entry in the capture list, a constant is initialized to the value of the constant or variable that has the same name in the surrounding scope. For example in the code below, "},{"type":"codeVoice","code":"a"},{"type":"text","text":" is included in the capture list but "},{"type":"codeVoice","code":"b"},{"type":"text","text":" is not, which gives them different behavior."}],"type":"paragraph"},{"syntax":"swift","code":["var a = 0","var b = 0","let closure = { [a] in","    print(a, b)","}","","a = 10","b = 10","closure()","\/\/ Prints \"0 10\""],"type":"codeListing"},{"inlineContent":[{"text":"There are two different things named ","type":"text"},{"type":"codeVoice","code":"a"},{"text":", the variable in the surrounding scope and the constant in the closure’s scope, but only one variable named ","type":"text"},{"type":"codeVoice","code":"b"},{"text":". The ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" in the inner scope is initialized with the value of the ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" in the outer scope when the closure is created, but their values aren’t connected in any special way. This means that a change to the value of ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" in the outer scope doesn’t affect the value of ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" in the inner scope, nor does a change to ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" inside the closure affect the value of ","type":"text"},{"type":"codeVoice","code":"a"},{"text":" outside the closure. In contrast, there’s only one variable named ","type":"text"},{"type":"codeVoice","code":"b"},{"text":"—the ","type":"text"},{"type":"codeVoice","code":"b"},{"text":" in the outer scope—so changes from inside or outside the closure are visible in both places.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"This distinction isn’t visible when the captured variable’s type has reference semantics. For example, there are two things named ","type":"text"},{"code":"x","type":"codeVoice"},{"text":" in the code below, a variable in the outer scope and a constant in the inner scope, but they both refer to the same object because of reference semantics.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class SimpleClass {","    var value: Int = 0","}","var x = SimpleClass()","var y = SimpleClass()","let closure = { [x] in","    print(x.value, y.value)","}","","x.value = 10","y.value = 10","closure()","\/\/ Prints \"10 10\""],"type":"codeListing"},{"inlineContent":[{"text":"If the type of the expression’s value is a class, you can mark the expression in a capture list with ","type":"text"},{"code":"weak","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"unowned","type":"codeVoice"},{"text":" to capture a weak or unowned reference to the expression’s value.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["myFunction { print(self.title) }                    \/\/ implicit strong capture","myFunction { [self] in print(self.title) }          \/\/ explicit strong capture","myFunction { [weak self] in print(self!.title) }    \/\/ weak capture","myFunction { [unowned self] in print(self.title) }  \/\/ unowned capture"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can also bind an arbitrary expression to a named value in a capture list. The expression is evaluated when the closure is created, and the value is captured with the specified strength. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Weak capture of \"self.parent\" as \"parent\"","myFunction { [weak parent = self.parent] in print(parent!.title) }"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"For more information and examples of closure expressions, see "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Closure-Expressions","isActive":true},{"type":"text","text":". For more information and examples of capture lists, see "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-for-Closures","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a closure expression","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}]},{"type":"heading","level":3,"text":"Implicit Member Expression","anchor":"Implicit-Member-Expression"},{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"implicit member expression"}]},{"type":"text","text":" is an abbreviated way to access a member of a type, such as an enumeration case or a type method, in a context where type inference can determine the implied type. It has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":[".member name"],"type":"codeListing"},{"inlineContent":[{"text":"For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var x = MyEnumeration.someValue","x = .anotherValue"],"type":"codeListing"},{"inlineContent":[{"text":"If the inferred type is an optional, you can also use a member of the non-optional type in an implicit member expression.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var someOptional: MyEnumeration? = .someValue"],"type":"codeListing"},{"inlineContent":[{"text":"Implicit member expressions can be followed by a postfix operator or other postfix syntax listed in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Postfix-Expressions"},{"text":". This is called a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"chained implicit member expression","type":"text"}]},{"text":". Although it’s common for all of the chained postfix expressions to have the same type, the only requirement is that the whole chained implicit member expression needs to be convertible to the type implied by its context. Specifically, if the implied type is an optional you can use a value of the non-optional type, and if the implied type is a class type you can use a value of one of its subclasses. For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeClass {","    static var shared = SomeClass()","    static var sharedSubclass = SomeSubclass()","    var a = AnotherClass()","}","class SomeSubclass: SomeClass { }","class AnotherClass {","    static var s = SomeClass()","    func f() -> SomeClass { return AnotherClass.s }","}","let x: SomeClass = .shared.a.f()","let y: SomeClass? = .shared","let z: SomeClass = .sharedSubclass"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the code above, the type of "},{"type":"codeVoice","code":"x"},{"type":"text","text":" matches the type implied by its context exactly, the type of "},{"type":"codeVoice","code":"y"},{"type":"text","text":" is convertible from "},{"type":"codeVoice","code":"SomeClass"},{"type":"text","text":" to "},{"type":"codeVoice","code":"SomeClass?"},{"type":"text","text":", and the type of "},{"type":"codeVoice","code":"z"},{"type":"text","text":" is convertible from "},{"type":"codeVoice","code":"SomeSubclass"},{"type":"text","text":" to "},{"type":"codeVoice","code":"SomeClass"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a implicit member expression","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}]},{"type":"heading","level":3,"text":"Parenthesized Expression","anchor":"Parenthesized-Expression"},{"inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"parenthesized expression"}]},{"type":"text","text":" consists of an expression surrounded by parentheses. You can use parentheses to specify the precedence of operations by explicitly grouping expressions. Grouping parentheses don’t change an expression’s type—for example, the type of "},{"type":"codeVoice","code":"(1)"},{"type":"text","text":" is simply "},{"type":"codeVoice","code":"Int"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a parenthesized expression","type":"aside","style":"note","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}]},{"type":"heading","level":3,"text":"Tuple Expression","anchor":"Tuple-Expression"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"tuple expression"}]},{"text":" consists of a comma-separated list of expressions surrounded by parentheses. Each expression can have an optional identifier before it, separated by a colon (","type":"text"},{"type":"codeVoice","code":":"},{"text":"). It has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["(identifier 1: expression 1, identifier 2: expression 2, ...)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Each identifier in a tuple expression must be unique within the scope of the tuple expression. In a nested tuple expression, identifiers at the same level of nesting must be unique. For example, "},{"type":"codeVoice","code":"(a: 10, a: 20)"},{"type":"text","text":" is invalid because the label "},{"type":"codeVoice","code":"a"},{"type":"text","text":" appears twice at the same level. However, "},{"type":"codeVoice","code":"(a: 10, b: (a: 1, x: 2))"},{"type":"text","text":" is valid—although "},{"type":"codeVoice","code":"a"},{"type":"text","text":" appears twice, it appears once in the outer tuple and once in the inner tuple."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A tuple expression can contain zero expressions, or it can contain two or more expressions. A single expression inside parentheses is a parenthesized expression."}],"type":"paragraph"},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Both an empty tuple expression and an empty tuple type are written "},{"code":"()","type":"codeVoice"},{"type":"text","text":" in Swift. Because "},{"code":"Void","type":"codeVoice"},{"type":"text","text":" is a type alias for "},{"code":"()","type":"codeVoice"},{"type":"text","text":", you can use it to write an empty tuple type. However, like all type aliases, "},{"code":"Void","type":"codeVoice"},{"type":"text","text":" is always a type—you can’t use it to write an empty tuple expression."}]}]},{"name":"Grammar of a tuple expression","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}]},{"type":"heading","level":3,"text":"Wildcard Expression","anchor":"Wildcard-Expression"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"wildcard expression","type":"text"}],"type":"emphasis"},{"text":" is used to explicitly ignore a value during an assignment. For example, in the following assignment 10 is assigned to ","type":"text"},{"code":"x","type":"codeVoice"},{"text":" and 20 is ignored:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["(x, _) = (10, 20)","\/\/ x is 10, and 20 is ignored"],"type":"codeListing"},{"name":"Grammar of a wildcard expression","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}]},{"type":"heading","level":3,"text":"Key-Path Expression","anchor":"Key-Path-Expression"},{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"text":"key-path expression","type":"text"}],"type":"emphasis"},{"type":"text","text":" refers to a property or subscript of a type. You use key-path expressions in dynamic programming tasks, such as key-value observing. They have the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["\\type name.path"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"type name"}]},{"text":" is the name of a concrete type, including any generic parameters, such as ","type":"text"},{"code":"String","type":"codeVoice"},{"text":", ","type":"text"},{"code":"[Int]","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"Set<Int>","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"path"}],"type":"emphasis"},{"text":" consists of property names, subscripts, optional-chaining expressions, and forced unwrapping expressions. Each of these key-path components can be repeated as many times as needed, in any order.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"At compile time, a key-path expression is replaced by an instance of the "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","isActive":true},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/keypath]"},{"type":"text","text":" class."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To access a value using a key path, pass the key path to the "},{"type":"codeVoice","code":"subscript(keyPath:)"},{"type":"text","text":" subscript, which is available on all types. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["struct SomeStructure {","    var someValue: Int","}","","let s = SomeStructure(someValue: 12)","let pathToProperty = \\SomeStructure.someValue","","let value = s[keyPath: pathToProperty]","\/\/ value is 12"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"type name","type":"text"}],"type":"emphasis"},{"text":" can be omitted in contexts where type inference can determine the implied type. The following code uses ","type":"text"},{"type":"codeVoice","code":"\\.someProperty"},{"text":" instead of ","type":"text"},{"type":"codeVoice","code":"\\SomeClass.someProperty"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeClass: NSObject {","    @objc dynamic var someProperty: Int","    init(someProperty: Int) {","        self.someProperty = someProperty","    }","}","","let c = SomeClass(someProperty: 10)","c.observe(\\.someProperty) { object, change in","    \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"path","type":"text"}],"type":"emphasis"},{"text":" can refer to ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" to create the identity key path (","type":"text"},{"code":"\\.self","type":"codeVoice"},{"text":"). The identity key path refers to a whole instance, so you can use it to access and change all of the data stored in a variable in a single step. For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var compoundValue = (a: 1, b: 2)","\/\/ Equivalent to compoundValue = (a: 10, b: 20)","compoundValue[keyPath: \\.self] = (a: 10, b: 20)"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"path"}],"type":"emphasis"},{"text":" can contain multiple property names, separated by periods, to refer to a property of a property’s value. This code uses the key path expression ","type":"text"},{"code":"\\OuterStructure.outer.someValue","type":"codeVoice"},{"text":" to access the ","type":"text"},{"code":"someValue","type":"codeVoice"},{"text":" property of the ","type":"text"},{"code":"OuterStructure","type":"codeVoice"},{"text":" type’s ","type":"text"},{"code":"outer","type":"codeVoice"},{"text":" property:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct OuterStructure {","    var outer: SomeStructure","    init(someValue: Int) {","        self.outer = SomeStructure(someValue: someValue)","    }","}","","let nested = OuterStructure(someValue: 24)","let nestedKeyPath = \\OuterStructure.outer.someValue","","let nestedValue = nested[keyPath: nestedKeyPath]","\/\/ nestedValue is 24"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"path","type":"text"}],"type":"emphasis"},{"text":" can include subscripts using brackets, as long as the subscript’s parameter type conforms to the ","type":"text"},{"type":"codeVoice","code":"Hashable"},{"text":" protocol. This example uses a subscript in a key path to access the second element of an array:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let greetings = [\"hello\", \"hola\", \"bonjour\", \"안녕\"]","let myGreeting = greetings[keyPath: \\[String].[1]]","\/\/ myGreeting is 'hola'"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The value used in a subscript can be a named value or a literal. Values are captured in key paths using value semantics. The following code uses the variable "},{"type":"codeVoice","code":"index"},{"type":"text","text":" in both a key-path expression and in a closure to access the third element of the "},{"type":"codeVoice","code":"greetings"},{"type":"text","text":" array. When "},{"type":"codeVoice","code":"index"},{"type":"text","text":" is modified, the key-path expression still references the third element, while the closure uses the new index."}],"type":"paragraph"},{"syntax":"swift","code":["var index = 2","let path = \\[String].[index]","let fn: ([String]) -> String = { strings in strings[index] }","","print(greetings[keyPath: path])","\/\/ Prints \"bonjour\"","print(fn(greetings))","\/\/ Prints \"bonjour\"","","\/\/ Setting 'index' to a new value doesn't affect 'path'","index += 1","print(greetings[keyPath: path])","\/\/ Prints \"bonjour\"","","\/\/ Because 'fn' closes over 'index', it uses the new value","print(fn(greetings))","\/\/ Prints \"안녕\""],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"path","type":"text"}]},{"text":" can use optional chaining and forced unwrapping. This code uses optional chaining in a key path to access a property of an optional string:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let firstGreeting: String? = greetings.first","print(firstGreeting?.count as Any)","\/\/ Prints \"Optional(5)\"","","\/\/ Do the same thing using a key path.","let count = greetings[keyPath: \\[String].first?.count]","print(count as Any)","\/\/ Prints \"Optional(5)\""],"type":"codeListing"},{"inlineContent":[{"text":"You can mix and match components of key paths to access values that are deeply nested within a type. The following code accesses different values and properties of a dictionary of arrays by using key-path expressions that combine these components.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let interestingNumbers = [\"prime\": [2, 3, 5, 7, 11, 13, 17],","                          \"triangular\": [1, 3, 6, 10, 15, 21, 28],","                          \"hexagonal\": [1, 6, 15, 28, 45, 66, 91]]","print(interestingNumbers[keyPath: \\[String: [Int]].[\"prime\"]] as Any)","\/\/ Prints \"Optional([2, 3, 5, 7, 11, 13, 17])\"","print(interestingNumbers[keyPath: \\[String: [Int]].[\"prime\"]![0]])","\/\/ Prints \"2\"","print(interestingNumbers[keyPath: \\[String: [Int]].[\"hexagonal\"]!.count])","\/\/ Prints \"7\"","print(interestingNumbers[keyPath: \\[String: [Int]].[\"hexagonal\"]!.count.bitWidth])","\/\/ Prints \"64\""],"type":"codeListing"},{"inlineContent":[{"text":"You can use a key path expression in contexts where you would normally provide a function or closure. Specifically, you can use a key path expression whose root type is ","type":"text"},{"code":"SomeType","type":"codeVoice"},{"text":" and whose path produces a value of type ","type":"text"},{"code":"Value","type":"codeVoice"},{"text":", instead of a function or closure of type ","type":"text"},{"code":"(SomeType) -> Value","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["struct Task {","    var description: String","    var completed: Bool","}","var toDoList = [","    Task(description: \"Practice ping-pong.\", completed: false),","    Task(description: \"Buy a pirate costume.\", completed: true),","    Task(description: \"Visit Boston in the Fall.\", completed: false),","]","","\/\/ Both approaches below are equivalent.","let descriptions = toDoList.filter(\\.completed).map(\\.description)","let descriptions2 = toDoList.filter { $0.completed }.map { $0.description }"],"type":"codeListing"},{"inlineContent":[{"text":"Any side effects of a key path expression are evaluated only at the point where the expression is evaluated. For example, if you make a function call inside a subscript in a key path expression, the function is called only once as part of evaluating the expression, not every time the key path is used.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func makeIndex() -> Int {","    print(\"Made an index\")","    return 0","}","\/\/ The line below calls makeIndex().","let taskKeyPath = \\[Task][makeIndex()]","\/\/ Prints \"Made an index\"","","\/\/ Using taskKeyPath doesn't call makeIndex() again.","let someTask = toDoList[keyPath: taskKeyPath]"],"type":"codeListing"},{"inlineContent":[{"text":"For more information about using key paths in code that interacts with Objective-C APIs, see ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift","type":"reference"},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift]","type":"text"},{"text":". For information about key-value coding and key-value observing, see ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueCoding\/index.html#\/\/apple_ref\/doc\/uid\/10000107i","type":"reference"},{"text":" [https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueCoding\/index.html#\/\/apple_ref\/doc\/uid\/10000107i]","type":"text"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueObserving\/KeyValueObserving.html#\/\/apple_ref\/doc\/uid\/10000177i","type":"reference"},{"text":" [https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueObserving\/KeyValueObserving.html#\/\/apple_ref\/doc\/uid\/10000177i]","type":"text"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of a key-path expression","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}]},{"type":"heading","level":3,"text":"Selector Expression","anchor":"Selector-Expression"},{"inlineContent":[{"text":"A selector expression lets you access the selector used to refer to a method or to a property’s getter or setter in Objective-C. It has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["#selector(method name)","#selector(getter: property name)","#selector(setter: property name)"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"type":"text","text":"method name"}],"type":"emphasis"},{"text":" and ","type":"text"},{"inlineContent":[{"text":"property name","type":"text"}],"type":"emphasis"},{"text":" must be a reference to a method or a property that’s available in the Objective-C runtime. The value of a selector expression is an instance of the ","type":"text"},{"code":"Selector","type":"codeVoice"},{"text":" type. For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeClass: NSObject {","    @objc let property: String","","    @objc(doSomethingWithInt:)","    func doSomething(_ x: Int) { }","","    init(property: String) {","        self.property = property","    }","}","let selectorForMethod = #selector(SomeClass.doSomething(_:))","let selectorForPropertyGetter = #selector(getter: SomeClass.property)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"When creating a selector for a property’s getter, the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"property name"}]},{"type":"text","text":" can be a reference to a variable or constant property. In contrast, when creating a selector for a property’s setter, the "},{"type":"emphasis","inlineContent":[{"type":"text","text":"property name"}]},{"type":"text","text":" must be a reference to a variable property only."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"method name"}],"type":"emphasis"},{"type":"text","text":" can contain parentheses for grouping, as well the "},{"code":"as","type":"codeVoice"},{"type":"text","text":" operator to disambiguate between methods that share a name but have different type signatures. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["extension SomeClass {","    @objc(doSomethingWithString:)","    func doSomething(_ x: String) { }","}","let anotherSelector = #selector(SomeClass.doSomething(_:) as (SomeClass) -> (String) -> Void)"],"type":"codeListing"},{"inlineContent":[{"text":"Because a selector is created at compile time, not at runtime, the compiler can check that a method or property exists and that they’re exposed to the Objective-C runtime.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Although the ","type":"text"},{"inlineContent":[{"text":"method name","type":"text"}],"type":"emphasis"},{"text":" and the ","type":"text"},{"inlineContent":[{"text":"property name","type":"text"}],"type":"emphasis"},{"text":" are expressions, they’re never evaluated.","type":"text"}]}]},{"inlineContent":[{"text":"For more information about using selectors in Swift code that interacts with Objective-C APIs, see ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift","isActive":true,"overridingTitleInlineContent":[{"text":"Using Objective-C Runtime Features in Swift","type":"text"}],"type":"reference","overridingTitle":"Using Objective-C Runtime Features in Swift"},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift]","type":"text"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Grammar of a selector expression","type":"aside","style":"note","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}]},{"type":"heading","level":3,"text":"Key-Path String Expression","anchor":"Key-Path-String-Expression"},{"inlineContent":[{"type":"text","text":"A key-path string expression lets you access the string used to refer to a property in Objective-C, for use in key-value coding and key-value observing APIs. It has the following form:"}],"type":"paragraph"},{"syntax":"swift","code":["#keyPath(property name)"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"property name","type":"text"}],"type":"emphasis"},{"text":" must be a reference to a property that’s available in the Objective-C runtime. At compile time, the key-path string expression is replaced by a string literal. For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeClass: NSObject {","    @objc var someProperty: Int","    init(someProperty: Int) {","        self.someProperty = someProperty","    }","}","","let c = SomeClass(someProperty: 12)","let keyPath = #keyPath(SomeClass.someProperty)","","if let value = c.value(forKey: keyPath) {","    print(value)","}","\/\/ Prints \"12\""],"type":"codeListing"},{"inlineContent":[{"text":"When you use a key-path string expression within a class, you can refer to a property of that class by writing just the property name, without the class name.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["extension SomeClass {","    func getSomeKeyPath() -> String {","        return #keyPath(someProperty)","    }","}","print(keyPath == c.getSomeKeyPath())","\/\/ Prints \"true\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Because the key path string is created at compile time, not at runtime, the compiler can check that the property exists and that the property is exposed to the Objective-C runtime."}],"type":"paragraph"},{"inlineContent":[{"text":"For more information about using key paths in Swift code that interacts with Objective-C APIs, see ","type":"text"},{"isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Using Objective-C Runtime Features in Swift"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift","overridingTitle":"Using Objective-C Runtime Features in Swift","type":"reference"},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift]","type":"text"},{"text":". For information about key-value coding and key-value observing, see ","type":"text"},{"isActive":true,"overridingTitleInlineContent":[{"text":"Key-Value Coding Programming Guide","type":"text"}],"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueCoding\/index.html#\/\/apple_ref\/doc\/uid\/10000107i","overridingTitle":"Key-Value Coding Programming Guide","type":"reference"},{"text":" [https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueCoding\/index.html#\/\/apple_ref\/doc\/uid\/10000107i]","type":"text"},{"text":" and ","type":"text"},{"isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Key-Value Observing Programming Guide"}],"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueObserving\/KeyValueObserving.html#\/\/apple_ref\/doc\/uid\/10000177i","overridingTitle":"Key-Value Observing Programming Guide","type":"reference"},{"text":" [https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueObserving\/KeyValueObserving.html#\/\/apple_ref\/doc\/uid\/10000177i]","type":"text"},{"text":".","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Although the "},{"type":"emphasis","inlineContent":[{"text":"property name","type":"text"}]},{"type":"text","text":" is an expression, it’s never evaluated."}]}]},{"name":"Grammar of a key-path string expression","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}]},{"type":"heading","level":2,"text":"Postfix Expressions","anchor":"Postfix-Expressions"},{"inlineContent":[{"inlineContent":[{"text":"Postfix expressions","type":"text"}],"type":"emphasis"},{"type":"text","text":" are formed by applying a postfix operator or other postfix syntax to an expression. Syntactically, every primary expression is also a postfix expression."}],"type":"paragraph"},{"inlineContent":[{"text":"For information about the behavior of these operators, see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators"},{"text":" and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For information about the operators provided by the Swift standard library, see "},{"isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"text","text":"Operator Declarations"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","overridingTitle":"Operator Declarations"},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations]"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a postfix expression","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}]},{"type":"heading","level":3,"text":"Function Call Expression","anchor":"Function-Call-Expression"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"function call expression","type":"text"}]},{"text":" consists of a function name followed by a comma-separated list of the function’s arguments in parentheses. Function call expressions have the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["function name(argument value 1, argument value 2)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"text":"function name","type":"text"}],"type":"emphasis"},{"type":"text","text":" can be any expression whose value is of a function type."}],"type":"paragraph"},{"inlineContent":[{"text":"If the function definition includes names for its parameters, the function call must include names before its argument values, separated by a colon (","type":"text"},{"type":"codeVoice","code":":"},{"text":"). This kind of function call expression has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["function name(argument name 1: argument value 1, argument name 2: argument value 2)"],"type":"codeListing"},{"inlineContent":[{"text":"A function call expression can include trailing closures in the form of closure expressions immediately after the closing parenthesis. The trailing closures are understood as arguments to the function, added after the last parenthesized argument. The first closure expression is unlabeled; any additional closure expressions are preceded by their argument labels. The example below shows the equivalent version of function calls that do and don’t use trailing closure syntax:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ someFunction takes an integer and a closure as its arguments","someFunction(x: x, f: { $0 == 13 })","someFunction(x: x) { $0 == 13 }","","\/\/ anotherFunction takes an integer and two closures as its arguments","anotherFunction(x: x, f: { $0 == 13 }, g: { print(99) })","anotherFunction(x: x) { $0 == 13 } g: { print(99) }"],"type":"codeListing"},{"inlineContent":[{"text":"If the trailing closure is the function’s only argument, you can omit the parentheses.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ someMethod takes a closure as its only argument","myData.someMethod() { $0 == 13 }","myData.someMethod { $0 == 13 }"],"type":"codeListing"},{"inlineContent":[{"text":"To include the trailing closures in the arguments, the compiler examines the function’s parameters from left to right as follows:","type":"text"}],"type":"paragraph"},{"type":"table","header":"row","rows":[[[{"type":"paragraph","inlineContent":[{"text":"Trailing Closure","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Parameter"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Action"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Labeled","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Labeled"}]}],[{"type":"paragraph","inlineContent":[{"text":"If the labels are the same, the closure matches the parameter; otherwise, the parameter is skipped.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"text":"Labeled","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"Unlabeled","type":"text"}]}],[{"type":"paragraph","inlineContent":[{"text":"The parameter is skipped.","type":"text"}]}]],[[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unlabeled"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"Labeled or unlabeled"}]}],[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the parameter structurally resembles a function type, as defined below, the closure matches the parameter; otherwise, the parameter is skipped."}]}]]]},{"inlineContent":[{"text":"The trailing closure is passed as the argument for the parameter that it matches. Parameters that were skipped during the scanning process don’t have an argument passed to them—for example, they can use a default parameter. After finding a match, scanning continues with the next trailing closure and the next parameter. At the end of the matching process, all trailing closures must have a match.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A parameter "},{"inlineContent":[{"type":"text","text":"structurally resembles"}],"type":"emphasis"},{"type":"text","text":" a function type if the parameter isn’t an in-out parameter, and the parameter is one of the following:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"A parameter whose type is a function type, like ","type":"text"},{"code":"(Bool) -> Int","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"text":"An autoclosure parameter whose wrapped expression’s type is a function type, like ","type":"text"},{"code":"@autoclosure () -> ((Bool) -> Int)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A variadic parameter whose array element type is a function type, like "},{"code":"((Bool) -> Int)...","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A parameter whose type is wrapped in one or more layers of optional, like ","type":"text"},{"code":"Optional<(Bool) -> Int>","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A parameter whose type combines these allowed types, like "},{"type":"codeVoice","code":"(Optional<(Bool) -> Int>)..."}]}]}]},{"inlineContent":[{"type":"text","text":"When a trailing closure is matched to a parameter whose type structurally resembles a function type, but isn’t a function, the closure is wrapped as needed. For example, if the parameter’s type is an optional type, the closure is wrapped in "},{"type":"codeVoice","code":"Optional"},{"type":"text","text":" automatically."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To ease migration of code from versions of Swift prior to 5.3—which performed this matching from right to left—the compiler checks both the left-to-right and right-to-left orderings. If the scan directions produce different results, the old right-to-left ordering is used and the compiler generates a warning. A future version of Swift will always use the left-to-right ordering."}],"type":"paragraph"},{"syntax":"swift","code":["typealias Callback = (Int) -> Int","func someFunction(firstClosure: Callback? = nil,","                  secondClosure: Callback? = nil) {","    let first = firstClosure?(10)","    let second = secondClosure?(20)","    print(first ?? \"-\", second ?? \"-\")","}","","someFunction()  \/\/ Prints \"- -\"","someFunction { return $0 + 100 }  \/\/ Ambiguous","someFunction { return $0 } secondClosure: { return $0 }  \/\/ Prints \"10 20\""],"type":"codeListing"},{"inlineContent":[{"text":"In the example above, the function call marked “Ambiguous” prints “- 120” and produces a compiler warning on Swift 5.3. A future version of Swift will print “110 -”.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A class, structure, or enumeration type can enable syntactic sugar for function call syntax by declaring one of several methods, as described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Methods-with-Special-Names","type":"reference","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"type":"heading","level":4,"text":"Implicit Conversion to a Pointer Type","anchor":"Implicit-Conversion-to-a-Pointer-Type"},{"inlineContent":[{"text":"In a function call expression, if the argument and parameter have a different type, the compiler tries to make their types match by applying one of the implicit conversions in the following list:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"inout SomeType","type":"codeVoice"},{"text":" can become ","type":"text"},{"code":"UnsafePointer<SomeType>","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"UnsafeMutablePointer<SomeType>","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"inout Array<SomeType>","type":"codeVoice"},{"text":" can become ","type":"text"},{"code":"UnsafePointer<SomeType>","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"UnsafeMutablePointer<SomeType>","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"Array<SomeType>","type":"codeVoice"},{"text":" can become ","type":"text"},{"code":"UnsafePointer<SomeType>","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"String"},{"type":"text","text":" can become "},{"type":"codeVoice","code":"UnsafePointer<CChar>"}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"The following two function calls are equivalent:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["func unsafeFunction(pointer: UnsafePointer<Int>) {","    \/\/ ...","}","var myNumber = 1234","","unsafeFunction(pointer: &myNumber)","withUnsafePointer(to: myNumber) { unsafeFunction(pointer: $0) }"],"type":"codeListing"},{"inlineContent":[{"text":"A pointer that’s created by these implicit conversions is valid only for the duration of the function call. To avoid undefined behavior, ensure that your code never persists the pointer after the function call ends.","type":"text"}],"type":"paragraph"},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"When implicitly converting an array to an unsafe pointer, Swift ensures that the array’s storage is contiguous by converting or copying the array as needed. For example, you can use this syntax with an array that was bridged to ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":" from an ","type":"text"},{"code":"NSArray","type":"codeVoice"},{"text":" subclass that makes no API contract about its storage. If you need to guarantee that the array’s storage is already contiguous, so the implicit conversion never needs to do this work, use ","type":"text"},{"code":"ContiguousArray","type":"codeVoice"},{"text":" instead of ","type":"text"},{"code":"Array","type":"codeVoice"},{"text":".","type":"text"}]}]},{"inlineContent":[{"type":"text","text":"Using "},{"code":"&","type":"codeVoice"},{"type":"text","text":" instead of an explicit function like "},{"code":"withUnsafePointer(to:)","type":"codeVoice"},{"type":"text","text":" can help make calls to low-level C functions more readable, especially when the function takes several pointer arguments. However, when calling functions from other Swift code, avoid using "},{"code":"&","type":"codeVoice"},{"type":"text","text":" instead of using the unsafe APIs explicitly."}],"type":"paragraph"},{"name":"Grammar of a function call expression","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}]},{"type":"heading","level":3,"text":"Initializer Expression","anchor":"Initializer-Expression"},{"inlineContent":[{"text":"An ","type":"text"},{"inlineContent":[{"text":"initializer expression","type":"text"}],"type":"emphasis"},{"text":" provides access to a type’s initializer. It has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["expression.init(initializer arguments)"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You use the initializer expression in a function call expression to initialize a new instance of a type. You also use an initializer expression to delegate to the initializer of a superclass."}],"type":"paragraph"},{"syntax":"swift","code":["class SomeSubClass: SomeSuperClass {","    override init() {","        \/\/ subclass initialization goes here","        super.init()","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Like a function, an initializer can be used as a value. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["\/\/ Type annotation is required because String has multiple initializers.","let initializer: (Int) -> String = String.init","let oneTwoThree = [1, 2, 3].map(initializer).reduce(\"\", +)","print(oneTwoThree)","\/\/ Prints \"123\""],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If you specify a type by name, you can access the type’s initializer without using an initializer expression. In all other cases, you must use an initializer expression."}],"type":"paragraph"},{"syntax":"swift","code":["let s1 = SomeType.init(data: 3)  \/\/ Valid","let s2 = SomeType(data: 1)       \/\/ Also valid","","let s3 = type(of: someValue).init(data: 7)  \/\/ Valid","let s4 = type(of: someValue)(data: 5)       \/\/ Error"],"type":"codeListing"},{"name":"Grammar of an initializer expression","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}]},{"type":"heading","level":3,"text":"Explicit Member Expression","anchor":"Explicit-Member-Expression"},{"inlineContent":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"explicit member expression"}]},{"type":"text","text":" allows access to the members of a named type, a tuple, or a module. It consists of a period ("},{"type":"codeVoice","code":"."},{"type":"text","text":") between the item and the identifier of its member."}],"type":"paragraph"},{"syntax":"swift","code":["expression.member name"],"type":"codeListing"},{"inlineContent":[{"text":"The members of a named type are named as part of the type’s declaration or extension. For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeClass {","    var someProperty = 42","}","let c = SomeClass()","let y = c.someProperty  \/\/ Member access"],"type":"codeListing"},{"inlineContent":[{"text":"The members of a tuple are implicitly named using integers in the order they appear, starting from zero. For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var t = (10, 20, 30)","t.0 = t.1","\/\/ Now t is (20, 20, 30)"],"type":"codeListing"},{"inlineContent":[{"text":"The members of a module access the top-level declarations of that module.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Types declared with the "},{"code":"dynamicMemberLookup","type":"codeVoice"},{"type":"text","text":" attribute include members that are looked up at runtime, as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To distinguish between methods or initializers whose names differ only by the names of their arguments, include the argument names in parentheses, with each argument name followed by a colon ("},{"type":"codeVoice","code":":"},{"type":"text","text":"). Write an underscore ("},{"type":"codeVoice","code":"_"},{"type":"text","text":") for an argument with no name. To distinguish between overloaded methods, use a type annotation. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeClass {","    func someMethod(x: Int, y: Int) {}","    func someMethod(x: Int, z: Int) {}","    func overloadedMethod(x: Int, y: Int) {}","    func overloadedMethod(x: Int, y: Bool) {}","}","let instance = SomeClass()","","let a = instance.someMethod              \/\/ Ambiguous","let b = instance.someMethod(x:y:)        \/\/ Unambiguous","","let d = instance.overloadedMethod        \/\/ Ambiguous","let d = instance.overloadedMethod(x:y:)  \/\/ Still ambiguous","let d: (Int, Bool) -> Void  = instance.overloadedMethod(x:y:)  \/\/ Unambiguous"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"If a period appears at the beginning of a line, it’s understood as part of an explicit member expression, not as an implicit member expression. For example, the following listing shows chained method calls split over several lines:"}],"type":"paragraph"},{"syntax":"swift","code":["let x = [10, 3, 20, 15, 4]","    .sorted()","    .filter { $0 > 5 }","    .map { $0 * 100 }"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"You can combine this multiline chained syntax with compiler control statements to control when each method is called. For example, the following code uses a different filtering rule on iOS:"}],"type":"paragraph"},{"syntax":"swift","code":["let numbers = [10, 20, 33, 43, 50]","#if os(iOS)",".filter { $0 < 40 }","#else",".filter { $0 > 25 }","#endif"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Between "},{"code":"#if","type":"codeVoice"},{"type":"text","text":", "},{"code":"#endif","type":"codeVoice"},{"type":"text","text":", and other compilation directives, the conditional compilation block can contain an implicit member expression followed by zero or more postfixes, to form a postfix expression. It can also contain another conditional compilation block, or a combination of these expressions and blocks."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can use this syntax anywhere that you can write an explicit member expression, not just in top-level code."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In the conditional compilation block, the branch for the "},{"type":"codeVoice","code":"#if"},{"type":"text","text":" compilation directive must contain at least one expression. The other branches can be empty."}],"type":"paragraph"},{"name":"Grammar of an explicit member expression","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}]},{"type":"heading","level":3,"text":"Postfix Self Expression","anchor":"Postfix-Self-Expression"},{"inlineContent":[{"text":"A postfix ","type":"text"},{"code":"self","type":"codeVoice"},{"text":" expression consists of an expression or the name of a type, immediately followed by ","type":"text"},{"code":".self","type":"codeVoice"},{"text":". It has the following forms:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["expression.self","type.self"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The first form evaluates to the value of the "},{"inlineContent":[{"type":"text","text":"expression"}],"type":"emphasis"},{"type":"text","text":". For example, "},{"code":"x.self","type":"codeVoice"},{"type":"text","text":" evaluates to "},{"code":"x","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"The second form evaluates to the value of the ","type":"text"},{"inlineContent":[{"text":"type","type":"text"}],"type":"emphasis"},{"text":". Use this form to access a type as a value. For example, because ","type":"text"},{"code":"SomeClass.self","type":"codeVoice"},{"text":" evaluates to the ","type":"text"},{"code":"SomeClass","type":"codeVoice"},{"text":" type itself, you can pass it to a function or method that accepts a type-level argument.","type":"text"}],"type":"paragraph"},{"name":"Grammar of a postfix self expression","type":"aside","style":"note","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}]},{"type":"heading","level":3,"text":"Subscript Expression","anchor":"Subscript-Expression"},{"inlineContent":[{"text":"A ","type":"text"},{"inlineContent":[{"type":"text","text":"subscript expression"}],"type":"emphasis"},{"text":" provides subscript access using the getter and setter of the corresponding subscript declaration. It has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["expression[index expressions]"],"type":"codeListing"},{"inlineContent":[{"text":"To evaluate the value of a subscript expression, the subscript getter for the ","type":"text"},{"inlineContent":[{"type":"text","text":"expression"}],"type":"emphasis"},{"text":"’s type is called with the ","type":"text"},{"inlineContent":[{"text":"index expressions","type":"text"}],"type":"emphasis"},{"text":" passed as the subscript parameters. To set its value, the subscript setter is called in the same way.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For information about subscript declarations, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Subscript-Declaration"},{"type":"text","text":"."}],"type":"paragraph"},{"name":"Grammar of a subscript expression","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}]},{"type":"heading","level":3,"text":"Forced-Value Expression","anchor":"Forced-Value-Expression"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"forced-value expression"}]},{"text":" unwraps an optional value that you are certain isn’t ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":". It has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["expression!"],"type":"codeListing"},{"inlineContent":[{"text":"If the value of the ","type":"text"},{"inlineContent":[{"text":"expression","type":"text"}],"type":"emphasis"},{"text":" isn’t ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", the optional value is unwrapped and returned with the corresponding non-optional type. Otherwise, a runtime error is raised.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The unwrapped value of a forced-value expression can be modified, either by mutating the value itself, or by assigning to one of the value’s members. For example:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var x: Int? = 0","x! += 1","\/\/ x is now 1","","var someDictionary = [\"a\": [1, 2, 3], \"b\": [10, 20]]","someDictionary[\"a\"]![0] = 100","\/\/ someDictionary is now [\"a\": [100, 2, 3], \"b\": [10, 20]]"],"type":"codeListing"},{"name":"Grammar of a forced-value expression","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]}]},{"type":"heading","level":3,"text":"Optional-Chaining Expression","anchor":"Optional-Chaining-Expression"},{"inlineContent":[{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional-chaining expression"}]},{"text":" provides a simplified syntax for using optional values in postfix expressions. It has the following form:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["expression?"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The postfix "},{"code":"?","type":"codeVoice"},{"type":"text","text":" operator makes an optional-chaining expression from an expression without changing the expression’s value."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Optional-chaining expressions must appear within a postfix expression, and they cause the postfix expression to be evaluated in a special way. If the value of the optional-chaining expression is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", all of the other operations in the postfix expression are ignored and the entire postfix expression evaluates to "},{"code":"nil","type":"codeVoice"},{"type":"text","text":". If the value of the optional-chaining expression isn’t "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", the value of the optional-chaining expression is unwrapped and used to evaluate the rest of the postfix expression. In either case, the value of the postfix expression is still of an optional type."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If a postfix expression that contains an optional-chaining expression is nested inside other postfix expressions, only the outermost expression returns an optional type. In the example below, when "},{"type":"codeVoice","code":"c"},{"type":"text","text":" isn’t "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", its value is unwrapped and used to evaluate "},{"type":"codeVoice","code":".property"},{"type":"text","text":", the value of which is used to evaluate "},{"type":"codeVoice","code":".performAction()"},{"type":"text","text":". The entire expression "},{"type":"codeVoice","code":"c?.property.performAction()"},{"type":"text","text":" has a value of an optional type."}],"type":"paragraph"},{"syntax":"swift","code":["var c: SomeClass?","var result: Bool? = c?.property.performAction()"],"type":"codeListing"},{"inlineContent":[{"text":"The following example shows the behavior of the example above without using optional chaining.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["var result: Bool?","if let unwrappedC = c {","    result = unwrappedC.property.performAction()","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The unwrapped value of an optional-chaining expression can be modified, either by mutating the value itself, or by assigning to one of the value’s members. If the value of the optional-chaining expression is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the expression on the right-hand side of the assignment operator isn’t evaluated. For example:"}],"type":"paragraph"},{"syntax":"swift","code":["func someFunctionWithSideEffects() -> Int {","    return 42  \/\/ No actual side effects.","}","var someDictionary = [\"a\": [1, 2, 3], \"b\": [10, 20]]","","someDictionary[\"not here\"]?[0] = someFunctionWithSideEffects()","\/\/ someFunctionWithSideEffects isn't evaluated","\/\/ someDictionary is still [\"a\": [1, 2, 3], \"b\": [10, 20]]","","someDictionary[\"a\"]?[0] = someFunctionWithSideEffects()","\/\/ someFunctionWithSideEffects is evaluated and returns 42","\/\/ someDictionary is now [\"a\": [42, 2, 3], \"b\": [10, 20]]"],"type":"codeListing"},{"name":"Grammar of an optional-chaining expression","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}]}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions"},"sections":[],"kind":"article","metadata":{"role":"article","modules":[{"name":"Swift"}],"roleHeading":"Article","title":"Expressions"},"abstract":[{"type":"text","text":"In Swift, there are four kinds of expressions: prefix expressions, infix expressions, primary expressions, and postfix expressions. Evaluating an expression returns a value, causes a side effect, or both."}],"schemaVersion":{"minor":3,"patch":0,"major":0},"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"variants":[{"paths":["\/documentation\/swift\/expressions"],"traits":[{"interfaceLanguage":"swift"}]}],"references":{"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-for-Closures":{"url":"\/documentation\/swift\/automaticreferencecounting#Resolving-Strong-Reference-Cycles-for-Closures","type":"topic","kind":"section","abstract":[],"title":"Resolving Strong Reference Cycles for Closures","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting#Resolving-Strong-Reference-Cycles-for-Closures"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"abstract":[{"type":"text","text":"In addition to the operators described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators"},{"type":"text","text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","title":"Advanced Operators","type":"topic","kind":"article","role":"article","url":"\/documentation\/swift\/advancedoperators"},"doc://com.apple.Swift/documentation/Swift/Declarations":{"url":"\/documentation\/swift\/declarations","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"declaration","type":"text"}]},{"type":"text","text":" introduces a new name or construct into your program. For example, you use declarations to introduce functions and methods, to introduce variables and constants, and to define enumeration, structure, class, and protocol types. You can also use a declaration to extend the behavior of an existing named type and to import symbols into your program that are declared elsewhere."}],"kind":"article","title":"Declarations","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","role":"article"},"doc://com.apple.Swift/documentation/Swift/Declarations#Function-Declaration":{"title":"Function Declaration","type":"topic","url":"\/documentation\/swift\/declarations#Function-Declaration","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Function-Declaration","abstract":[]},"doc://com.apple.Swift/documentation/Swift/zzSummaryOfTheGrammar":{"type":"topic","title":"Summary of the Grammar","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar","kind":"article","role":"article","url":"\/documentation\/swift\/zzsummaryofthegrammar"},"doc://com.apple.Swift/documentation/Swift/Statements#Line-Control-Statement":{"url":"\/documentation\/swift\/statements#Line-Control-Statement","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements#Line-Control-Statement","abstract":[],"kind":"section","title":"Line Control Statement","type":"topic"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"type":"topic","title":"Error Handling","role":"article","url":"\/documentation\/swift\/errorhandling"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueObserving/KeyValueObserving.html#//apple_ref/doc/uid/10000177i":{"titleInlineContent":[{"type":"text","text":"Key-Value Observing Programming Guide"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueObserving\/KeyValueObserving.html#\/\/apple_ref\/doc\/uid\/10000177i","type":"link","title":"Key-Value Observing Programming Guide","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueObserving\/KeyValueObserving.html#\/\/apple_ref\/doc\/uid\/10000177i"},"doc://com.apple.Swift/documentation/Swift/Expressions#Postfix-Expressions":{"url":"\/documentation\/swift\/expressions#Postfix-Expressions","type":"topic","kind":"section","abstract":[],"title":"Postfix Expressions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Postfix-Expressions"},"https://developer.apple.com/documentation/swift/using_objective_c_runtime_features_in_swift":{"titleInlineContent":[{"type":"text","text":"Using Objective-C Runtime Features in Swift"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift","type":"link","title":"Using Objective-C Runtime Features in Swift","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/using_objective_c_runtime_features_in_swift"},"https://developer.apple.com/documentation/swift/keypath":{"titleInlineContent":[{"type":"text","text":"KeyPath"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","type":"link","title":"KeyPath","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath"},"doc://com.apple.Swift/documentation/Swift/Patterns":{"type":"topic","kind":"article","role":"article","title":"Patterns","url":"\/documentation\/swift\/patterns","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","abstract":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"pattern","type":"text"}],"type":"emphasis"},{"text":" represents the structure of a single value or a composite value. For example, the structure of a tuple ","type":"text"},{"code":"(1, 2)","type":"codeVoice"},{"type":"text","text":" is a comma-separated list of two elements. Because patterns represent the structure of a value rather than any one particular value, you can match them with a variety of values. For instance, the pattern "},{"code":"(x, y)","type":"codeVoice"},{"type":"text","text":" matches the tuple "},{"code":"(1, 2)","type":"codeVoice"},{"type":"text","text":" and any other two-element tuple. In addition to matching a pattern with a value, you can extract part or all of a composite value and bind each part to a constant or variable name."}]},"doc://com.apple.Swift/documentation/Swift/Functions#In-Out-Parameters":{"abstract":[],"title":"In-Out Parameters","type":"topic","url":"\/documentation\/swift\/functions#In-Out-Parameters","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#In-Out-Parameters"},"doc://com.apple.Swift/documentation/Swift/Statements":{"type":"topic","title":"Statements","abstract":[{"type":"text","text":"In Swift, there are three kinds of statements: simple statements, compiler control statements, and control flow statements. Simple statements are the most common and consist of either an expression or a declaration. Compiler control statements allow the program to change aspects of the compiler’s behavior and include a conditional compilation block and a line control statement."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","kind":"article","role":"article","url":"\/documentation\/swift\/statements"},"https://developer.apple.com/documentation/swift/operator_declarations":{"titleInlineContent":[{"type":"text","text":"Operator Declarations"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations","type":"link","title":"Operator Declarations","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/operator_declarations"},"doc://com.apple.Swift/documentation/Swift/Expressions#Function-Call-Expression":{"url":"\/documentation\/swift\/expressions#Function-Call-Expression","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions#Function-Call-Expression","abstract":[],"kind":"section","title":"Function Call Expression","type":"topic"},"https://help.apple.com/xcode/mac/current/#/dev4c60242fc":{"titleInlineContent":[{"type":"text","text":"Add a color, file, or image literal"}],"url":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev4c60242fc","type":"link","title":"Add a color, file, or image literal","identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev4c60242fc"},"doc://com.apple.Swift/documentation/Swift/Closures#Closure-Expressions":{"abstract":[],"kind":"section","title":"Closure Expressions","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Closure-Expressions","url":"\/documentation\/swift\/closures#Closure-Expressions"},"doc://com.apple.Swift/documentation/Swift/BasicOperators#Ternary-Conditional-Operator":{"url":"\/documentation\/swift\/basicoperators#Ternary-Conditional-Operator","type":"topic","kind":"section","abstract":[],"title":"Ternary Conditional Operator","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators#Ternary-Conditional-Operator"},"doc://com.apple.Swift/documentation/Swift/Attributes":{"url":"\/documentation\/swift\/attributes","abstract":[{"type":"text","text":"There are two kinds of attributes in Swift—those that apply to declarations and those that apply to types. An attribute provides additional information about the declaration or type. For example, the "},{"type":"codeVoice","code":"discardableResult"},{"type":"text","text":" attribute on a function declaration indicates that, although the function returns a value, the compiler shouldn’t generate a warning if the return value is unused."}],"kind":"article","title":"Attributes","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","role":"article"},"doc://com.apple.Swift/documentation/Swift/Closures#Escaping-Closures":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Escaping-Closures","abstract":[],"url":"\/documentation\/swift\/closures#Escaping-Closures","type":"topic","title":"Escaping Closures"},"doc://com.apple.Swift/documentation/Swift/TypeCasting":{"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","title":"Type Casting","type":"topic","kind":"article","role":"article","url":"\/documentation\/swift\/typecasting"},"https://developer.apple.com/documentation/swift/imported_c_and_objective_c_apis/working_with_foundation_types":{"titleInlineContent":[{"type":"text","text":"Working with Foundation Types"}],"url":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective_c_apis\/working_with_foundation_types","type":"link","title":"Working with Foundation Types","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective_c_apis\/working_with_foundation_types"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/KeyValueCoding/index.html#//apple_ref/doc/uid/10000107i":{"titleInlineContent":[{"type":"text","text":"Key-Value Coding Programming Guide"}],"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueCoding\/index.html#\/\/apple_ref\/doc\/uid\/10000107i","type":"link","title":"Key-Value Coding Programming Guide","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/KeyValueCoding\/index.html#\/\/apple_ref\/doc\/uid\/10000107i"},"doc://com.apple.Swift/documentation/Swift/GenericParametersAndArguments":{"type":"topic","title":"Generic Parameters and Arguments","abstract":[{"type":"text","text":"This chapter describes parameters and arguments for generic types, functions, and initializers. When you declare a generic type, function, subscript, or initializer, you specify the type parameters that the generic type, function, or initializer can work with. These type parameters act as placeholders that are replaced by actual concrete type arguments when an instance of a generic type is created or a generic function or initializer is called."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","kind":"article","role":"article","url":"\/documentation\/swift\/genericparametersandarguments"},"doc://com.apple.Swift/documentation/Swift/AboutTheLanguageReference":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AboutTheLanguageReference","abstract":[{"text":"This part of the book describes the formal grammar of the Swift programming language. The grammar described here is intended to help you understand the language in more detail, rather than to allow you to directly implement a parser or compiler.","type":"text"}],"kind":"article","title":"About the Language Reference","role":"article","type":"topic","url":"\/documentation\/swift\/aboutthelanguagereference"},"doc://com.apple.Swift/documentation/Swift/Types":{"type":"topic","title":"Types","abstract":[{"type":"text","text":"In Swift, there are two kinds of types: named types and compound types. A "},{"type":"emphasis","inlineContent":[{"text":"named type","type":"text"}]},{"type":"text","text":" is a type that can be given a particular name when it’s defined. Named types include classes, structures, enumerations, and protocols. For example, instances of a user-defined class named "},{"type":"codeVoice","code":"MyClass"},{"type":"text","text":" have the type "},{"type":"codeVoice","code":"MyClass"},{"type":"text","text":". In addition to user-defined named types, the Swift standard library defines many commonly used named types, including those that represent arrays, dictionaries, and optional values."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","kind":"article","role":"article","url":"\/documentation\/swift\/types"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"type":"topic","kind":"article","title":"Basic Operators","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","role":"article","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers, as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":", and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values, as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/basicoperators"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure":{"url":"\/documentation\/swift\/lexicalstructure","abstract":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"text":"lexical structure","type":"text"}]},{"type":"text","text":" of Swift describes what sequence of characters form valid tokens of the language. These valid tokens form the lowest-level building blocks of the language and are used to describe the rest of the language in subsequent chapters. A token consists of an identifier, keyword, punctuation, literal, or operator."}],"kind":"article","title":"Lexical Structure","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","role":"article"},"doc://com.apple.Swift/documentation/Swift/Declarations#Protocol-Subscript-Declaration":{"title":"Protocol Subscript Declaration","type":"topic","url":"\/documentation\/swift\/declarations#Protocol-Subscript-Declaration","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Protocol-Subscript-Declaration","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Declarations#Methods-with-Special-Names":{"url":"\/documentation\/swift\/declarations#Methods-with-Special-Names","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Methods-with-Special-Names","kind":"section","type":"topic","title":"Methods with Special Names"},"doc://com.apple.Swift/documentation/Swift":{"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","abstract":[],"type":"topic","title":"Swift","role":"collection","url":"\/documentation\/swift"}}}