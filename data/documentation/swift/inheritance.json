{"seeAlsoSections":[{"generated":true,"title":"Language Guide","identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"]}],"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swift\/inheritance"]}],"primaryContentSections":[{"content":[{"level":2,"anchor":"overview","type":"heading","text":"Overview"},{"inlineContent":[{"text":"Classes in Swift can call and access methods, properties, and subscripts belonging to their superclass and can provide their own overriding versions of those methods, properties, and subscripts to refine or modify their behavior. Swift helps to ensure your overrides are correct by checking that the override definition has a matching superclass definition.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Classes can also add property observers to inherited properties in order to be notified when the value of a property changes. Property observers can be added to any property, regardless of whether it was originally defined as a stored or computed property."}],"type":"paragraph"},{"level":2,"anchor":"Defining-a-Base-Class","type":"heading","text":"Defining a Base Class"},{"inlineContent":[{"type":"text","text":"Any class that doesn’t inherit from another class is known as a "},{"inlineContent":[{"type":"text","text":"base class"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift classes don’t inherit from a universal base class. Classes you define without specifying a superclass automatically become base classes for you to build upon."}]}],"style":"note","name":"Note","type":"aside"},{"inlineContent":[{"text":"The example below defines a base class called ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":". This base class defines a stored property called ","type":"text"},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":", with a default value of "},{"code":"0.0","type":"codeVoice"},{"type":"text","text":" (inferring a property type of "},{"code":"Double","type":"codeVoice"},{"type":"text","text":"). The "},{"code":"currentSpeed","type":"codeVoice"},{"type":"text","text":" property’s value is used by a read-only computed "},{"code":"String","type":"codeVoice"},{"type":"text","text":" property called "},{"code":"description","type":"codeVoice"},{"type":"text","text":" to create a description of the vehicle."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"Vehicle","type":"codeVoice"},{"type":"text","text":" base class also defines a method called "},{"type":"codeVoice","code":"makeNoise"},{"type":"text","text":". This method doesn’t actually do anything for a base "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" instance, but will be customized by subclasses of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" later on:"}],"type":"paragraph"},{"syntax":"swift","code":["class Vehicle {","    var currentSpeed = 0.0","    var description: String {","        return \"traveling at \\(currentSpeed) miles per hour\"","    }","    func makeNoise() {","        \/\/ do nothing - an arbitrary vehicle doesn't necessarily make a noise","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"You create a new instance of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" with ","type":"text"},{"inlineContent":[{"text":"initializer syntax","type":"text"}],"type":"emphasis"},{"text":", which is written as a type name followed by empty parentheses:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let someVehicle = Vehicle()"],"type":"codeListing"},{"inlineContent":[{"text":"Having created a new ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" instance, you can access its ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" property to print a human-readable description of the vehicle’s current speed:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["print(\"Vehicle: \\(someVehicle.description)\")","\/\/ Vehicle: traveling at 0.0 miles per hour"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" class defines common characteristics for an arbitrary vehicle, but isn’t much use in itself. To make it more useful, you need to refine it to describe more specific kinds of vehicles.","type":"text"}],"type":"paragraph"},{"level":2,"anchor":"Subclassing","type":"heading","text":"Subclassing"},{"inlineContent":[{"inlineContent":[{"text":"Subclassing","type":"text"}],"type":"emphasis"},{"text":" is the act of basing a new class on an existing class. The subclass inherits characteristics from the existing class, which you can then refine. You can also add new characteristics to the subclass.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To indicate that a subclass has a superclass, write the subclass name before the superclass name, separated by a colon:"}],"type":"paragraph"},{"syntax":"swift","code":["class SomeSubclass: SomeSuperclass {","    \/\/ subclass definition goes here","}"],"type":"codeListing"},{"inlineContent":[{"text":"The following example defines a subclass called ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":", with a superclass of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class Bicycle: Vehicle {","    var hasBasket = false","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The new "},{"type":"codeVoice","code":"Bicycle"},{"type":"text","text":" class automatically gains all of the characteristics of "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":", such as its "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" and "},{"type":"codeVoice","code":"description"},{"type":"text","text":" properties and its "},{"type":"codeVoice","code":"makeNoise()"},{"type":"text","text":" method."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In addition to the characteristics it inherits, the "},{"code":"Bicycle","type":"codeVoice"},{"type":"text","text":" class defines a new stored property, "},{"code":"hasBasket","type":"codeVoice"},{"type":"text","text":", with a default value of "},{"code":"false","type":"codeVoice"},{"type":"text","text":" (inferring a type of "},{"code":"Bool","type":"codeVoice"},{"type":"text","text":" for the property)."}],"type":"paragraph"},{"inlineContent":[{"text":"By default, any new ","type":"text"},{"code":"Bicycle","type":"codeVoice"},{"text":" instance you create will not have a basket. You can set the ","type":"text"},{"code":"hasBasket","type":"codeVoice"},{"text":" property to ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" for a particular ","type":"text"},{"code":"Bicycle","type":"codeVoice"},{"text":" instance after that instance is created:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let bicycle = Bicycle()","bicycle.hasBasket = true"],"type":"codeListing"},{"inlineContent":[{"text":"You can also modify the inherited ","type":"text"},{"type":"codeVoice","code":"currentSpeed"},{"text":" property of a ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":" instance, and query the instance’s inherited ","type":"text"},{"type":"codeVoice","code":"description"},{"text":" property:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["bicycle.currentSpeed = 15.0","print(\"Bicycle: \\(bicycle.description)\")","\/\/ Bicycle: traveling at 15.0 miles per hour"],"type":"codeListing"},{"inlineContent":[{"text":"Subclasses can themselves be subclassed. The next example creates a subclass of ","type":"text"},{"type":"codeVoice","code":"Bicycle"},{"text":" for a two-seater bicycle known as a “tandem”:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class Tandem: Bicycle {","    var currentNumberOfPassengers = 0","}"],"type":"codeListing"},{"inlineContent":[{"code":"Tandem","type":"codeVoice"},{"text":" inherits all of the properties and methods from ","type":"text"},{"code":"Bicycle","type":"codeVoice"},{"text":", which in turn inherits all of the properties and methods from ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"Tandem","type":"codeVoice"},{"type":"text","text":" subclass also adds a new stored property called "},{"code":"currentNumberOfPassengers","type":"codeVoice"},{"type":"text","text":", with a default value of "},{"code":"0","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you create an instance of "},{"type":"codeVoice","code":"Tandem"},{"type":"text","text":", you can work with any of its new and inherited properties, and query the read-only "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property it inherits from "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["let tandem = Tandem()","tandem.hasBasket = true","tandem.currentNumberOfPassengers = 2","tandem.currentSpeed = 22.0","print(\"Tandem: \\(tandem.description)\")","\/\/ Tandem: traveling at 22.0 miles per hour"],"type":"codeListing"},{"level":2,"anchor":"Overriding","type":"heading","text":"Overriding"},{"inlineContent":[{"type":"text","text":"A subclass can provide its own custom implementation of an instance method, type method, instance property, type property, or subscript that it would otherwise inherit from a superclass. This is known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"overriding"}]},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"To override a characteristic that would otherwise be inherited, you prefix your overriding definition with the "},{"code":"override","type":"codeVoice"},{"type":"text","text":" keyword. Doing so clarifies that you intend to provide an override and haven’t provided a matching definition by mistake. Overriding by accident can cause unexpected behavior, and any overrides without the "},{"code":"override","type":"codeVoice"},{"type":"text","text":" keyword are diagnosed as an error when your code is compiled."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"override","type":"codeVoice"},{"type":"text","text":" keyword also prompts the Swift compiler to check that your overriding class’s superclass (or one of its parents) has a declaration that matches the one you provided for the override. This check ensures that your overriding definition is correct."}],"type":"paragraph"},{"level":3,"anchor":"Accessing-Superclass-Methods-Properties-and-Subscripts","text":"Accessing Superclass Methods, Properties, and Subscripts","type":"heading"},{"inlineContent":[{"type":"text","text":"When you provide a method, property, or subscript override for a subclass, it’s sometimes useful to use the existing superclass implementation as part of your override. For example, you can refine the behavior of that existing implementation, or store a modified value in an existing inherited variable."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Where this is appropriate, you access the superclass version of a method, property, or subscript by using the "},{"type":"codeVoice","code":"super"},{"type":"text","text":" prefix:"}],"type":"paragraph"},{"items":[{"content":[{"inlineContent":[{"type":"text","text":"An overridden method named "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" can call the superclass version of "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" by calling "},{"type":"codeVoice","code":"super.someMethod()"},{"type":"text","text":" within the overriding method implementation."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden property called "},{"code":"someProperty","type":"codeVoice"},{"type":"text","text":" can access the superclass version of "},{"code":"someProperty","type":"codeVoice"},{"text":" as ","type":"text"},{"code":"super.someProperty","type":"codeVoice"},{"text":" within the overriding getter or setter implementation.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"An overridden subscript for "},{"type":"codeVoice","code":"someIndex"},{"type":"text","text":" can access the superclass version of the same subscript as "},{"type":"codeVoice","code":"super[someIndex]"},{"type":"text","text":" from within the overriding subscript implementation."}]}]}],"type":"unorderedList"},{"level":3,"anchor":"Overriding-Methods","text":"Overriding Methods","type":"heading"},{"inlineContent":[{"text":"You can override an inherited instance or type method to provide a tailored or alternative implementation of the method within your subclass.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"The following example defines a new subclass of ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":" called ","type":"text"},{"type":"codeVoice","code":"Train"},{"text":", which overrides the ","type":"text"},{"type":"codeVoice","code":"makeNoise()"},{"text":" method that ","type":"text"},{"type":"codeVoice","code":"Train"},{"text":" inherits from ","type":"text"},{"type":"codeVoice","code":"Vehicle"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class Train: Vehicle {","    override func makeNoise() {","        print(\"Choo Choo\")","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"If you create a new instance of ","type":"text"},{"code":"Train","type":"codeVoice"},{"text":" and call its ","type":"text"},{"code":"makeNoise()","type":"codeVoice"},{"text":" method, you can see that the ","type":"text"},{"code":"Train","type":"codeVoice"},{"text":" subclass version of the method is called:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["let train = Train()","train.makeNoise()","\/\/ Prints \"Choo Choo\""],"type":"codeListing"},{"level":3,"anchor":"Overriding-Properties","text":"Overriding Properties","type":"heading"},{"inlineContent":[{"type":"text","text":"You can override an inherited instance or type property to provide your own custom getter and setter for that property, or to add property observers to enable the overriding property to observe when the underlying property value changes."}],"type":"paragraph"},{"level":4,"anchor":"Overriding-Property-Getters-and-Setters","text":"Overriding Property Getters and Setters","type":"heading"},{"inlineContent":[{"type":"text","text":"You can provide a custom getter (and setter, if appropriate) to override "},{"type":"emphasis","inlineContent":[{"type":"text","text":"any"}]},{"type":"text","text":" inherited property, regardless of whether the inherited property is implemented as a stored or computed property at source. The stored or computed nature of an inherited property isn’t known by a subclass—it only knows that the inherited property has a certain name and type. You must always state both the name and the type of the property you are overriding, to enable the compiler to check that your override matches a superclass property with the same name and type."}],"type":"paragraph"},{"inlineContent":[{"text":"You can present an inherited read-only property as a read-write property by providing both a getter and a setter in your subclass property override. You can’t, however, present an inherited read-write property as a read-only property.","type":"text"}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"text":"If you provide a setter as part of a property override, you must also provide a getter for that override. If you don’t want to modify the inherited property’s value within the overriding getter, you can simply pass through the inherited value by returning ","type":"text"},{"type":"codeVoice","code":"super.someProperty"},{"text":" from the getter, where ","type":"text"},{"type":"codeVoice","code":"someProperty"},{"text":" is the name of the property you are overriding.","type":"text"}]}],"style":"note","name":"Note","type":"aside"},{"inlineContent":[{"text":"The following example defines a new class called ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":", which is a subclass of ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":" class introduces a new stored property called ","type":"text"},{"code":"gear","type":"codeVoice"},{"text":", with a default integer value of ","type":"text"},{"code":"1","type":"codeVoice"},{"text":". The ","type":"text"},{"code":"Car","type":"codeVoice"},{"text":" class also overrides the ","type":"text"},{"code":"description","type":"codeVoice"},{"text":" property it inherits from ","type":"text"},{"code":"Vehicle","type":"codeVoice"},{"text":", to provide a custom description that includes the current gear:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class Car: Vehicle {","    var gear = 1","    override var description: String {","        return super.description + \" in gear \\(gear)\"","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The override of the "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property starts by calling "},{"type":"codeVoice","code":"super.description"},{"type":"text","text":", which returns the "},{"type":"codeVoice","code":"Vehicle"},{"type":"text","text":" class’s "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property. The "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class’s version of "},{"type":"codeVoice","code":"description"},{"type":"text","text":" then adds some extra text onto the end of this description to provide information about the current gear."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you create an instance of the "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class and set its "},{"type":"codeVoice","code":"gear"},{"type":"text","text":" and "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" properties, you can see that its "},{"type":"codeVoice","code":"description"},{"type":"text","text":" property returns the tailored description defined within the "},{"type":"codeVoice","code":"Car"},{"type":"text","text":" class:"}],"type":"paragraph"},{"syntax":"swift","code":["let car = Car()","car.currentSpeed = 25.0","car.gear = 3","print(\"Car: \\(car.description)\")","\/\/ Car: traveling at 25.0 miles per hour in gear 3"],"type":"codeListing"},{"level":4,"anchor":"Overriding-Property-Observers","text":"Overriding Property Observers","type":"heading"},{"inlineContent":[{"type":"text","text":"You can use property overriding to add property observers to an inherited property. This enables you to be notified when the value of an inherited property changes, regardless of how that property was originally implemented. For more information on property observers, see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Property-Observers"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t add property observers to inherited constant stored properties or inherited read-only computed properties. The value of these properties can’t be set, and so it isn’t appropriate to provide a "},{"type":"codeVoice","code":"willSet"},{"type":"text","text":" or "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" implementation as part of an override."}]},{"type":"paragraph","inlineContent":[{"text":"Note also that you can’t provide both an overriding setter and an overriding property observer for the same property. If you want to observe changes to a property’s value, and you are already providing a custom setter for that property, you can simply observe any value changes from within the custom setter.","type":"text"}]}],"style":"note","name":"Note","type":"aside"},{"inlineContent":[{"type":"text","text":"The following example defines a new class called "},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":", which is a subclass of "},{"type":"codeVoice","code":"Car"},{"type":"text","text":". The "},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":" class represents a car with an automatic gearbox, which automatically selects an appropriate gear to use based on the current speed:"}],"type":"paragraph"},{"syntax":"swift","code":["class AutomaticCar: Car {","    override var currentSpeed: Double {","        didSet {","            gear = Int(currentSpeed \/ 10.0) + 1","        }","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Whenever you set the "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" property of an "},{"type":"codeVoice","code":"AutomaticCar"},{"type":"text","text":" instance, the property’s "},{"type":"codeVoice","code":"didSet"},{"type":"text","text":" observer sets the instance’s "},{"type":"codeVoice","code":"gear"},{"type":"text","text":" property to an appropriate choice of gear for the new speed. Specifically, the property observer chooses a gear that’s the new "},{"type":"codeVoice","code":"currentSpeed"},{"type":"text","text":" value divided by "},{"type":"codeVoice","code":"10"},{"type":"text","text":", rounded down to the nearest integer, plus "},{"type":"codeVoice","code":"1"},{"type":"text","text":". A speed of "},{"type":"codeVoice","code":"35.0"},{"type":"text","text":" produces a gear of "},{"type":"codeVoice","code":"4"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["let automatic = AutomaticCar()","automatic.currentSpeed = 35.0","print(\"AutomaticCar: \\(automatic.description)\")","\/\/ AutomaticCar: traveling at 35.0 miles per hour in gear 4"],"type":"codeListing"},{"level":2,"anchor":"Preventing-Overrides","text":"Preventing Overrides","type":"heading"},{"inlineContent":[{"type":"text","text":"You can prevent a method, property, or subscript from being overridden by marking it as "},{"type":"emphasis","inlineContent":[{"text":"final","type":"text"}]},{"type":"text","text":". Do this by writing the "},{"type":"codeVoice","code":"final"},{"type":"text","text":" modifier before the method, property, or subscript’s introducer keyword (such as "},{"type":"codeVoice","code":"final var"},{"type":"text","text":", "},{"type":"codeVoice","code":"final func"},{"type":"text","text":", "},{"type":"codeVoice","code":"final class func"},{"type":"text","text":", and "},{"type":"codeVoice","code":"final subscript"},{"type":"text","text":")."}],"type":"paragraph"},{"inlineContent":[{"text":"Any attempt to override a final method, property, or subscript in a subclass is reported as a compile-time error. Methods, properties, or subscripts that you add to a class in an extension can also be marked as final within the extension’s definition.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You can mark an entire class as final by writing the ","type":"text"},{"code":"final","type":"codeVoice"},{"text":" modifier before the ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" keyword in its class definition (","type":"text"},{"code":"final class","type":"codeVoice"},{"text":"). Any attempt to subclass a final class is reported as a compile-time error.","type":"text"}]}],"kind":"content"}],"metadata":{"roleHeading":"Article","title":"Inheritance","role":"article","modules":[{"name":"Swift"}]},"abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"text":"inherit","type":"text"}]},{"type":"text","text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"text":"subclass","type":"text"}]},{"type":"text","text":", and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"type":"text","text":"superclass"}]},{"type":"text","text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift."}],"kind":"article","schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance"},"sections":[],"references":{"doc://com.apple.Swift/documentation/Swift/Generics":{"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner.","type":"text"}],"url":"\/documentation\/swift\/generics","role":"article","title":"Generics","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Concurrency":{"title":"Concurrency","url":"\/documentation\/swift\/concurrency","abstract":[{"text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Parallel code","type":"text"}]},{"type":"text","text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"title":"Initialization","url":"\/documentation\/swift\/initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Properties":{"url":"\/documentation\/swift\/properties","role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"text":"Properties","type":"text"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"role":"article","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"deinitializer","type":"text"}]},{"text":" is called immediately before a class instance is deallocated. You write deinitializers with the ","type":"text"},{"code":"deinit","type":"codeVoice"},{"text":" keyword, similar to how initializers are written with the ","type":"text"},{"code":"init","type":"codeVoice"},{"type":"text","text":" keyword. Deinitializers are only available on class types."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","kind":"article","url":"\/documentation\/swift\/deinitialization","title":"Deinitialization"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","abstract":[{"text":"An ","type":"text"},{"inlineContent":[{"text":"operator","type":"text"}],"type":"emphasis"},{"text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (","type":"text"},{"code":"+","type":"codeVoice"},{"text":") adds two numbers, as in ","type":"text"},{"code":"let i = 1 + 2","type":"codeVoice"},{"text":", and the logical AND operator (","type":"text"},{"code":"&&","type":"codeVoice"},{"text":") combines two Boolean values, as in ","type":"text"},{"code":"if enteredDoorCode && passedRetinaScan","type":"codeVoice"},{"text":".","type":"text"}],"kind":"article","url":"\/documentation\/swift\/basicoperators","title":"Basic Operators","type":"topic","role":"article"},"doc://com.apple.Swift/documentation/Swift/Extensions":{"role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"retroactive modeling","type":"text"}]},{"type":"text","text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","kind":"article","url":"\/documentation\/swift\/extensions","title":"Extensions"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"url":"\/documentation\/swift\/advancedoperators","role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","isActive":true},{"type":"text","text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Protocols":{"role":"article","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"protocol","type":"text"}]},{"text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be ","type":"text"},{"inlineContent":[{"text":"adopted","type":"text"}],"type":"emphasis"},{"text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to ","type":"text"},{"inlineContent":[{"text":"conform","type":"text"}],"type":"emphasis"},{"type":"text","text":" to that protocol."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","kind":"article","url":"\/documentation\/swift\/protocols","title":"Protocols"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/swift\/optionalchaining","role":"article","title":"Optional Chaining","abstract":[{"inlineContent":[{"text":"Optional chaining","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", the property, method, or subscript call returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"text":" and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"classes","type":"text"}]},{"type":"text","text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","kind":"article","url":"\/documentation\/swift\/classesandstructures","title":"Structures and Classes"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting":{"title":"Automatic Reference Counting","url":"\/documentation\/swift\/automaticreferencecounting","abstract":[{"text":"Swift uses ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift":{"title":"Swift","url":"\/documentation\/swift","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","role":"collection","type":"topic"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes":{"url":"\/documentation\/swift\/collectiontypes","role":"article","title":"Collection Types","abstract":[{"type":"text","text":"Swift provides three primary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection types"}]},{"type":"text","text":", known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Subscripts":{"title":"Subscripts","url":"\/documentation\/swift\/subscripts","abstract":[{"text":"Classes, structures, and enumerations can define ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"subscripts","type":"text"}]},{"text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" instance as "},{"code":"someArray[index]","type":"codeVoice"},{"type":"text","text":" and elements in a "},{"code":"Dictionary","type":"codeVoice"},{"text":" instance as ","type":"text"},{"type":"codeVoice","code":"someDictionary[key]"},{"text":".","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/TypeCasting":{"url":"\/documentation\/swift\/typecasting","role":"article","title":"Type Casting","abstract":[{"inlineContent":[{"type":"text","text":"Type casting"}],"type":"emphasis"},{"type":"text","text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","type":"topic"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"url":"\/documentation\/swift\/thebasics","role":"article","title":"The Basics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","type":"topic"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"url":"\/documentation\/swift\/stringsandcharacters","role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"text":"string","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a series of characters, such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":". Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"text":" type. The contents of a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" can be accessed in various ways, including as a collection of ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" values.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","type":"topic"},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"title":"Control Flow","url":"\/documentation\/swift\/controlflow","abstract":[{"text":"Swift provides a variety of control flow statements. These include ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" loops to perform a task multiple times; ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"continue"},{"text":" to transfer the flow of execution to another point in your code.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/NestedTypes":{"title":"Nested Types","url":"\/documentation\/swift\/nestedtypes","abstract":[{"text":"Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"nested types","type":"text"}]},{"text":", whereby you nest supporting enumerations, classes, and structures within the definition of the type they support.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"url":"\/documentation\/swift\/errorhandling","role":"article","title":"Error Handling","abstract":[{"inlineContent":[{"type":"text","text":"Error handling"}],"type":"emphasis"},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","type":"topic"},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"title":"Memory Safety","url":"\/documentation\/swift\/memorysafety","abstract":[{"text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Closures":{"url":"\/documentation\/swift\/closures","role":"article","title":"Closures","abstract":[{"inlineContent":[{"type":"text","text":"Closures"}],"type":"emphasis"},{"type":"text","text":" are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Functions":{"title":"Functions","url":"\/documentation\/swift\/functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Enumerations":{"role":"article","abstract":[{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"enumeration","type":"text"}]},{"text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","kind":"article","url":"\/documentation\/swift\/enumerations","title":"Enumerations"},"doc://com.apple.Swift/documentation/Swift/Properties#Property-Observers":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Property-Observers","abstract":[],"title":"Property Observers","kind":"section","type":"topic","url":"\/documentation\/swift\/properties#Property-Observers"},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"title":"Access Control","url":"\/documentation\/swift\/accesscontrol","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Access control"}]},{"text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Methods":{"url":"\/documentation\/swift\/methods","role":"article","title":"Methods","abstract":[{"inlineContent":[{"type":"text","text":"Methods"}],"type":"emphasis"},{"type":"text","text":" are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","type":"topic"},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"title":"Opaque Types","role":"article","kind":"article","url":"\/documentation\/swift\/opaquetypes","type":"topic","abstract":[{"text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t.","type":"text"}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes"}}}