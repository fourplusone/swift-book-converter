{"kind":"article","hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"sections":[],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl"},"schemaVersion":{"major":0,"minor":3,"patch":0},"variants":[{"paths":["\/documentation\/swift\/accesscontrol"],"traits":[{"interfaceLanguage":"swift"}]}],"seeAlsoSections":[{"generated":true,"title":"Language Guide","identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"]}],"abstract":[{"inlineContent":[{"text":"Access control","type":"text"}],"type":"emphasis"},{"text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used.","type":"text"}],"metadata":{"title":"Access Control","modules":[{"name":"Swift"}],"role":"article","roleHeading":"Article"},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You can assign specific access levels to individual types (classes, structures, and enumerations), as well as to properties, methods, initializers, and subscripts belonging to those types. Protocols can be restricted to a certain context, as can global constants, variables, and functions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In addition to offering various levels of access control, Swift reduces the need to specify explicit access control levels by providing default access levels for typical scenarios. Indeed, if you are writing a single-target app, you may not need to specify explicit access control levels at all.","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The various aspects of your code that can have access control applied to them (properties, types, functions, and so on) are referred to as “entities” in the sections below, for brevity."}]}],"style":"note","type":"aside"},{"text":"Modules and Source Files","level":2,"anchor":"Modules-and-Source-Files","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s access control model is based on the concept of modules and source files."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"module"}],"type":"emphasis"},{"type":"text","text":" is a single unit of code distribution—a framework or application that’s built and shipped as a single unit and that can be imported by another module with Swift’s "},{"type":"codeVoice","code":"import"},{"text":" keyword.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Each build target (such as an app bundle or framework) in Xcode is treated as a separate module in Swift. If you group together aspects of your app’s code as a stand-alone framework—perhaps to encapsulate and reuse that code across multiple applications—then everything you define within that framework will be part of a separate module when it’s imported and used within an app, or when it’s used within another framework."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"source file","type":"text"}]},{"type":"text","text":" is a single Swift source code file within a module (in effect, a single file within an app or framework). Although it’s common to define individual types in separate source files, a single source file can contain definitions for multiple types, functions, and so on."}]},{"anchor":"Access-Levels","type":"heading","level":2,"text":"Access Levels"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides five different "},{"type":"emphasis","inlineContent":[{"text":"access levels","type":"text"}]},{"type":"text","text":" for entities within your code. These access levels are relative to the source file in which an entity is defined, and also relative to the module that source file belongs to."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Open access"}],"type":"emphasis"},{"text":" and ","type":"text"},{"inlineContent":[{"text":"public access","type":"text"}],"type":"emphasis"},{"text":" enable entities to be used within any source file from their defining module, and also in a source file from another module that imports the defining module. You typically use open or public access when specifying the public interface to a framework. The difference between open and public access is described below.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"inlineContent":[{"type":"text","text":"Internal access"}],"type":"emphasis"},{"type":"text","text":" enables entities to be used within any source file from their defining module, but not in any source file outside of that module. You typically use internal access when defining an app’s or a framework’s internal structure."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"File-private access"}]},{"type":"text","text":" restricts the use of an entity to its own defining source file. Use file-private access to hide the implementation details of a specific piece of functionality when those details are used within an entire file."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Private access"}]},{"type":"text","text":" restricts the use of an entity to the enclosing declaration, and to extensions of that declaration that are in the same file. Use private access to hide the implementation details of a specific piece of functionality when those details are used only within a single declaration."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Open access is the highest (least restrictive) access level and private access is the lowest (most restrictive) access level."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Open access applies only to classes and class members, and it differs from public access by allowing code outside the module to subclass and override, as discussed below in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Subclassing"},{"type":"text","text":". Marking a class as open explicitly indicates that you’ve considered the impact of code from other modules using that class as a superclass, and that you’ve designed your class’s code accordingly."}]},{"anchor":"Guiding-Principle-of-Access-Levels","type":"heading","level":3,"text":"Guiding Principle of Access Levels"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Access levels in Swift follow an overall guiding principle: "},{"inlineContent":[{"text":"No entity can be defined in terms of another entity that has a lower (more restrictive) access level.","type":"text"}],"type":"emphasis"}]},{"type":"paragraph","inlineContent":[{"text":"For example:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"A public variable can’t be defined as having an internal, file-private, or private type, because the type might not be available everywhere that the public variable is used."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"A function can’t have a higher access level than its parameter types and return type, because the function could be used in situations where its constituent types are unavailable to the surrounding code.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"The specific implications of this guiding principle for different aspects of the language are covered in detail below.","type":"text"}]},{"anchor":"Default-Access-Levels","type":"heading","level":3,"text":"Default Access Levels"},{"type":"paragraph","inlineContent":[{"text":"All entities in your code (with a few specific exceptions, as described later in this chapter) have a default access level of internal if you don’t specify an explicit access level yourself. As a result, in many cases you don’t need to specify an explicit access level in your code.","type":"text"}]},{"anchor":"Access-Levels-for-Single-Target-Apps","type":"heading","level":3,"text":"Access Levels for Single-Target Apps"},{"type":"paragraph","inlineContent":[{"text":"When you write a simple single-target app, the code in your app is typically self-contained within the app and doesn’t need to be made available outside of the app’s module. The default access level of internal already matches this requirement. Therefore, you don’t need to specify a custom access level. You may, however, want to mark some parts of your code as file private or private in order to hide their implementation details from other code within the app’s module.","type":"text"}]},{"anchor":"Access-Levels-for-Frameworks","type":"heading","level":3,"text":"Access Levels for Frameworks"},{"type":"paragraph","inlineContent":[{"text":"When you develop a framework, mark the public-facing interface to that framework as open or public so that it can be viewed and accessed by other modules, such as an app that imports the framework. This public-facing interface is the application programming interface (or API) for the framework.","type":"text"}]},{"style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"Any internal implementation details of your framework can still use the default access level of internal, or can be marked as private or file private if you want to hide them from other parts of the framework’s internal code. You need to mark an entity as open or public only if you want it to become part of your framework’s API.","type":"text"}]}],"name":"Note"},{"anchor":"Access-Levels-for-Unit-Test-Targets","type":"heading","level":3,"text":"Access Levels for Unit Test Targets"},{"type":"paragraph","inlineContent":[{"text":"When you write an app with a unit test target, the code in your app needs to be made available to that module in order to be tested. By default, only entities marked as open or public are accessible to other modules. However, a unit test target can access any internal entity, if you mark the import declaration for a product module with the ","type":"text"},{"code":"@testable","type":"codeVoice"},{"text":" attribute and compile that product module with testing enabled.","type":"text"}]},{"anchor":"Access-Control-Syntax","type":"heading","level":2,"text":"Access Control Syntax"},{"type":"paragraph","inlineContent":[{"text":"Define the access level for an entity by placing one of the ","type":"text"},{"type":"codeVoice","code":"open"},{"type":"text","text":", "},{"code":"public","type":"codeVoice"},{"type":"text","text":", "},{"code":"internal","type":"codeVoice"},{"type":"text","text":", "},{"code":"fileprivate","type":"codeVoice"},{"type":"text","text":", or "},{"code":"private","type":"codeVoice"},{"type":"text","text":" modifiers at the beginning of the entity’s declaration."}]},{"syntax":"swift","type":"codeListing","code":["public class SomePublicClass {}","internal class SomeInternalClass {}","fileprivate class SomeFilePrivateClass {}","private class SomePrivateClass {}","","public var somePublicVariable = 0","internal let someInternalConstant = 0","fileprivate func someFilePrivateFunction() {}","private func somePrivateFunction() {}"]},{"type":"paragraph","inlineContent":[{"text":"Unless otherwise specified, the default access level is internal, as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Default-Access-Levels"},{"text":". This means that ","type":"text"},{"type":"codeVoice","code":"SomeInternalClass"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"someInternalConstant"},{"text":" can be written without an explicit access-level modifier, and will still have an access level of internal:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["class SomeInternalClass {}              \/\/ implicitly internal","let someInternalConstant = 0            \/\/ implicitly internal"]},{"anchor":"Custom-Types","type":"heading","level":2,"text":"Custom Types"},{"type":"paragraph","inlineContent":[{"text":"If you want to specify an explicit access level for a custom type, do so at the point that you define the type. The new type can then be used wherever its access level permits. For example, if you define a file-private class, that class can only be used as the type of a property, or as a function parameter or return type, in the source file in which the file-private class is defined.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The access control level of a type also affects the default access level of that type’s "},{"inlineContent":[{"type":"text","text":"members"}],"type":"emphasis"},{"type":"text","text":" (its properties, methods, initializers, and subscripts). If you define a type’s access level as private or file private, the default access level of its members will also be private or file private. If you define a type’s access level as internal or public (or use the default access level of internal without specifying an access level explicitly), the default access level of the type’s members will be internal."}]},{"name":"Important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A public type defaults to having internal members, not public members. If you want a type member to be public, you must explicitly mark it as such. This requirement ensures that the public-facing API for a type is something you opt in to publishing, and avoids presenting the internal workings of a type as public API by mistake."}]}],"type":"aside","style":"important"},{"syntax":"swift","code":["public class SomePublicClass {                  \/\/ explicitly public class","    public var somePublicProperty = 0            \/\/ explicitly public class member","    var someInternalProperty = 0                 \/\/ implicitly internal class member","    fileprivate func someFilePrivateMethod() {}  \/\/ explicitly file-private class member","    private func somePrivateMethod() {}          \/\/ explicitly private class member","}","","class SomeInternalClass {                       \/\/ implicitly internal class","    var someInternalProperty = 0                 \/\/ implicitly internal class member","    fileprivate func someFilePrivateMethod() {}  \/\/ explicitly file-private class member","    private func somePrivateMethod() {}          \/\/ explicitly private class member","}","","fileprivate class SomeFilePrivateClass {        \/\/ explicitly file-private class","    func someFilePrivateMethod() {}              \/\/ implicitly file-private class member","    private func somePrivateMethod() {}          \/\/ explicitly private class member","}","","private class SomePrivateClass {                \/\/ explicitly private class","    func somePrivateMethod() {}                  \/\/ implicitly private class member","}"],"type":"codeListing"},{"anchor":"Tuple-Types","type":"heading","text":"Tuple Types","level":3},{"inlineContent":[{"type":"text","text":"The access level for a tuple type is the most restrictive access level of all types used in that tuple. For example, if you compose a tuple from two different types, one with internal access and one with private access, the access level for that compound tuple type will be private."}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"Tuple types don’t have a standalone definition in the way that classes, structures, enumerations, and functions do. A tuple type’s access level is determined automatically from the types that make up the tuple type, and can’t be specified explicitly.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"anchor":"Function-Types","type":"heading","text":"Function Types","level":3},{"inlineContent":[{"text":"The access level for a function type is calculated as the most restrictive access level of the function’s parameter types and return type. You must specify the access level explicitly as part of the function’s definition if the function’s calculated access level doesn’t match the contextual default.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example below defines a global function called "},{"type":"codeVoice","code":"someFunction()"},{"type":"text","text":", without providing a specific access-level modifier for the function itself. You might expect this function to have the default access level of “internal”, but this isn’t the case. In fact, "},{"type":"codeVoice","code":"someFunction()"},{"type":"text","text":" won’t compile as written below:"}],"type":"paragraph"},{"syntax":"swift","code":["func someFunction() -> (SomeInternalClass, SomePrivateClass) {","    \/\/ function implementation goes here","}"],"type":"codeListing"},{"inlineContent":[{"text":"The function’s return type is a tuple type composed from two of the custom classes defined above in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Custom-Types","isActive":true,"type":"reference"},{"text":". One of these classes is defined as internal, and the other is defined as private. Therefore, the overall access level of the compound tuple type is private (the minimum access level of the tuple’s constituent types).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Because the function’s return type is private, you must mark the function’s overall access level with the ","type":"text"},{"code":"private","type":"codeVoice"},{"text":" modifier for the function declaration to be valid:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["private func someFunction() -> (SomeInternalClass, SomePrivateClass) {","    \/\/ function implementation goes here","}"],"type":"codeListing"},{"inlineContent":[{"text":"It’s not valid to mark the definition of ","type":"text"},{"code":"someFunction()","type":"codeVoice"},{"text":" with the ","type":"text"},{"code":"public","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"internal","type":"codeVoice"},{"text":" modifiers, or to use the default setting of internal, because public or internal users of the function might not have appropriate access to the private class used in the function’s return type.","type":"text"}],"type":"paragraph"},{"anchor":"Enumeration-Types","type":"heading","text":"Enumeration Types","level":3},{"inlineContent":[{"text":"The individual cases of an enumeration automatically receive the same access level as the enumeration they belong to. You can’t specify a different access level for individual enumeration cases.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"In the example below, the ","type":"text"},{"type":"codeVoice","code":"CompassPoint"},{"text":" enumeration has an explicit access level of public. The enumeration cases ","type":"text"},{"type":"codeVoice","code":"north"},{"text":", ","type":"text"},{"type":"codeVoice","code":"south"},{"text":", ","type":"text"},{"type":"codeVoice","code":"east"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"west"},{"text":" therefore also have an access level of public:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["public enum CompassPoint {","    case north","    case south","    case east","    case west","}"],"type":"codeListing"},{"anchor":"Raw-Values-and-Associated-Values","type":"heading","text":"Raw Values and Associated Values","level":4},{"type":"paragraph","inlineContent":[{"type":"text","text":"The types used for any raw values or associated values in an enumeration definition must have an access level at least as high as the enumeration’s access level. For example, you can’t use a private type as the raw-value type of an enumeration with an internal access level."}]},{"type":"heading","level":3,"anchor":"Nested-Types","text":"Nested Types"},{"type":"paragraph","inlineContent":[{"text":"The access level of a nested type is the same as its containing type, unless the containing type is public. Nested types defined within a public type have an automatic access level of internal. If you want a nested type within a public type to be publicly available, you must explicitly declare the nested type as public.","type":"text"}]},{"type":"heading","level":2,"anchor":"Subclassing","text":"Subclassing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can subclass any class that can be accessed in the current access context and that’s defined in the same module as the subclass. You can also subclass any open class that’s defined in a different module. A subclass can’t have a higher access level than its superclass—for example, you can’t write a public subclass of an internal superclass."}]},{"type":"paragraph","inlineContent":[{"text":"In addition, for classes that are defined in the same module, you can override any class member (method, property, initializer, or subscript) that’s visible in a certain access context. For classes that are defined in another module, you can override any open class member.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An override can make an inherited class member more accessible than its superclass version. In the example below, class "},{"type":"codeVoice","code":"A"},{"type":"text","text":" is a public class with a file-private method called "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":". Class "},{"type":"codeVoice","code":"B"},{"type":"text","text":" is a subclass of "},{"type":"codeVoice","code":"A"},{"type":"text","text":", with a reduced access level of “internal”. Nonetheless, class "},{"type":"codeVoice","code":"B"},{"type":"text","text":" provides an override of "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":" with an access level of “internal”, which is "},{"type":"emphasis","inlineContent":[{"type":"text","text":"higher"}]},{"type":"text","text":" than the original implementation of "},{"type":"codeVoice","code":"someMethod()"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["public class A {","    fileprivate func someMethod() {}","}","","internal class B: A {","    override internal func someMethod() {}","}"]},{"type":"paragraph","inlineContent":[{"text":"It’s even valid for a subclass member to call a superclass member that has lower access permissions than the subclass member, as long as the call to the superclass’s member takes place within an allowed access level context (that is, within the same source file as the superclass for a file-private member call, or within the same module as the superclass for an internal member call):","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["public class A {","    fileprivate func someMethod() {}","}","","internal class B: A {","    override internal func someMethod() {","        super.someMethod()","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"Because superclass ","type":"text"},{"code":"A","type":"codeVoice"},{"text":" and subclass ","type":"text"},{"code":"B","type":"codeVoice"},{"text":" are defined in the same source file, it’s valid for the ","type":"text"},{"code":"B","type":"codeVoice"},{"text":" implementation of ","type":"text"},{"code":"someMethod()","type":"codeVoice"},{"text":" to call ","type":"text"},{"code":"super.someMethod()","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"heading","level":2,"anchor":"Constants-Variables-Properties-and-Subscripts","text":"Constants, Variables, Properties, and Subscripts"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A constant, variable, or property can’t be more public than its type. It’s not valid to write a public property with a private type, for example. Similarly, a subscript can’t be more public than either its index type or return type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If a constant, variable, property, or subscript makes use of a private type, the constant, variable, property, or subscript must also be marked as "},{"type":"codeVoice","code":"private"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["private var privateInstance = SomePrivateClass()"]},{"type":"heading","level":3,"anchor":"Getters-and-Setters","text":"Getters and Setters"},{"type":"paragraph","inlineContent":[{"text":"Getters and setters for constants, variables, properties, and subscripts automatically receive the same access level as the constant, variable, property, or subscript they belong to.","type":"text"}]},{"inlineContent":[{"type":"text","text":"You can give a setter a "},{"type":"emphasis","inlineContent":[{"text":"lower","type":"text"}]},{"type":"text","text":" access level than its corresponding getter, to restrict the read-write scope of that variable, property, or subscript. You assign a lower access level by writing "},{"type":"codeVoice","code":"fileprivate(set)"},{"type":"text","text":", "},{"type":"codeVoice","code":"private(set)"},{"type":"text","text":", or "},{"type":"codeVoice","code":"internal(set)"},{"type":"text","text":" before the "},{"type":"codeVoice","code":"var"},{"type":"text","text":" or "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":" introducer."}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"This rule applies to stored properties as well as computed properties. Even though you don’t write an explicit getter and setter for a stored property, Swift still synthesizes an implicit getter and setter for you to provide access to the stored property’s backing storage. Use ","type":"text"},{"type":"codeVoice","code":"fileprivate(set)"},{"text":", ","type":"text"},{"type":"codeVoice","code":"private(set)"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"internal(set)"},{"text":" to change the access level of this synthesized setter in exactly the same way as for an explicit setter in a computed property.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"The example below defines a structure called "},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":", which keeps track of the number of times a string property is modified:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct TrackedString {","    private(set) var numberOfEdits = 0","    var value: String = \"\" {","        didSet {","            numberOfEdits += 1","        }","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"TrackedString","type":"codeVoice"},{"text":" structure defines a stored string property called ","type":"text"},{"code":"value","type":"codeVoice"},{"text":", with an initial value of ","type":"text"},{"code":"\"\"","type":"codeVoice"},{"text":" (an empty string). The structure also defines a stored integer property called ","type":"text"},{"code":"numberOfEdits","type":"codeVoice"},{"text":", which is used to track the number of times that ","type":"text"},{"code":"value","type":"codeVoice"},{"text":" is modified. This modification tracking is implemented with a ","type":"text"},{"code":"didSet","type":"codeVoice"},{"text":" property observer on the ","type":"text"},{"code":"value","type":"codeVoice"},{"text":" property, which increments ","type":"text"},{"code":"numberOfEdits","type":"codeVoice"},{"text":" every time the ","type":"text"},{"code":"value","type":"codeVoice"},{"text":" property is set to a new value.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The "},{"code":"TrackedString","type":"codeVoice"},{"type":"text","text":" structure and the "},{"code":"value","type":"codeVoice"},{"type":"text","text":" property don’t provide an explicit access-level modifier, and so they both receive the default access level of internal. However, the access level for the "},{"code":"numberOfEdits","type":"codeVoice"},{"type":"text","text":" property is marked with a "},{"code":"private(set)","type":"codeVoice"},{"type":"text","text":" modifier to indicate that the property’s getter still has the default access level of internal, but the property is settable only from within code that’s part of the "},{"code":"TrackedString","type":"codeVoice"},{"type":"text","text":" structure. This enables "},{"code":"TrackedString","type":"codeVoice"},{"type":"text","text":" to modify the "},{"code":"numberOfEdits","type":"codeVoice"},{"type":"text","text":" property internally, but to present the property as a read-only property when it’s used outside the structure’s definition."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you create a "},{"type":"codeVoice","code":"TrackedString"},{"type":"text","text":" instance and modify its string value a few times, you can see the "},{"type":"codeVoice","code":"numberOfEdits"},{"type":"text","text":" property value update to match the number of modifications:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var stringToEdit = TrackedString()","stringToEdit.value = \"This string will be tracked.\"","stringToEdit.value += \" This edit will increment numberOfEdits.\"","stringToEdit.value += \" So will this one.\"","print(\"The number of edits is \\(stringToEdit.numberOfEdits)\")","\/\/ Prints \"The number of edits is 3\""]},{"inlineContent":[{"text":"Although you can query the current value of the ","type":"text"},{"code":"numberOfEdits","type":"codeVoice"},{"text":" property from within another source file, you can’t ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"modify"}]},{"text":" the property from another source file. This restriction protects the implementation details of the ","type":"text"},{"code":"TrackedString","type":"codeVoice"},{"text":" edit-tracking functionality, while still providing convenient access to an aspect of that functionality.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Note that you can assign an explicit access level for both a getter and a setter if required. The example below shows a version of the "},{"code":"TrackedString","type":"codeVoice"},{"type":"text","text":" structure in which the structure is defined with an explicit access level of public. The structure’s members (including the "},{"code":"numberOfEdits","type":"codeVoice"},{"type":"text","text":" property) therefore have an internal access level by default. You can make the structure’s "},{"code":"numberOfEdits","type":"codeVoice"},{"type":"text","text":" property getter public, and its property setter private, by combining the "},{"code":"public","type":"codeVoice"},{"type":"text","text":" and "},{"code":"private(set)","type":"codeVoice"},{"type":"text","text":" access-level modifiers:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["public struct TrackedString {","    public private(set) var numberOfEdits = 0","    public var value: String = \"\" {","        didSet {","            numberOfEdits += 1","        }","    }","    public init() {}","}"]},{"anchor":"Initializers","text":"Initializers","type":"heading","level":2},{"inlineContent":[{"text":"Custom initializers can be assigned an access level less than or equal to the type that they initialize. The only exception is for required initializers (as defined in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Required-Initializers"},{"text":"). A required initializer must have the same access level as the class it belongs to.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As with function and method parameters, the types of an initializer’s parameters can’t be more private than the initializer’s own access level."}],"type":"paragraph"},{"anchor":"Default-Initializers","text":"Default Initializers","type":"heading","level":3},{"inlineContent":[{"text":"As described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Default-Initializers","type":"reference","isActive":true},{"text":", Swift automatically provides a ","type":"text"},{"inlineContent":[{"type":"text","text":"default initializer"}],"type":"emphasis"},{"text":" without any arguments for any structure or base class that provides default values for all of its properties and doesn’t provide at least one initializer itself.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"A default initializer has the same access level as the type it initializes, unless that type is defined as ","type":"text"},{"code":"public","type":"codeVoice"},{"text":". For a type that’s defined as ","type":"text"},{"code":"public","type":"codeVoice"},{"text":", the default initializer is considered internal. If you want a public type to be initializable with a no-argument initializer when used in another module, you must explicitly provide a public no-argument initializer yourself as part of the type’s definition.","type":"text"}],"type":"paragraph"},{"anchor":"Default-Memberwise-Initializers-for-Structure-Types","text":"Default Memberwise Initializers for Structure Types","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"The default memberwise initializer for a structure type is considered private if any of the structure’s stored properties are private. Likewise, if any of the structure’s stored properties are file private, the initializer is file private. Otherwise, the initializer has an access level of internal."}],"type":"paragraph"},{"inlineContent":[{"text":"As with the default initializer above, if you want a public structure type to be initializable with a memberwise initializer when used in another module, you must provide a public memberwise initializer yourself as part of the type’s definition.","type":"text"}],"type":"paragraph"},{"anchor":"Protocols","text":"Protocols","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"If you want to assign an explicit access level to a protocol type, do so at the point that you define the protocol. This enables you to create protocols that can only be adopted within a certain access context."}],"type":"paragraph"},{"inlineContent":[{"text":"The access level of each requirement within a protocol definition is automatically set to the same access level as the protocol. You can’t set a protocol requirement to a different access level than the protocol it supports. This ensures that all of the protocol’s requirements will be visible on any type that adopts the protocol.","type":"text"}],"type":"paragraph"},{"name":"Note","content":[{"inlineContent":[{"text":"If you define a public protocol, the protocol’s requirements require a public access level for those requirements when they’re implemented. This behavior is different from other types, where a public type definition implies an access level of internal for the type’s members.","type":"text"}],"type":"paragraph"}],"type":"aside","style":"note"},{"anchor":"Protocol-Inheritance","text":"Protocol Inheritance","type":"heading","level":3},{"inlineContent":[{"text":"If you define a new protocol that inherits from an existing protocol, the new protocol can have at most the same access level as the protocol it inherits from. For example, you can’t write a public protocol that inherits from an internal protocol.","type":"text"}],"type":"paragraph"},{"anchor":"Protocol-Conformance","text":"Protocol Conformance","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"A type can conform to a protocol with a lower access level than the type itself. For example, you can define a public type that can be used in other modules, but whose conformance to an internal protocol can only be used within the internal protocol’s defining module."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The context in which a type conforms to a particular protocol is the minimum of the type’s access level and the protocol’s access level. For example, if a type is public, but a protocol it conforms to is internal, the type’s conformance to that protocol is also internal."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"When you write or extend a type to conform to a protocol, you must ensure that the type’s implementation of each protocol requirement has at least the same access level as the type’s conformance to that protocol. For example, if a public type conforms to an internal protocol, the type’s implementation of each protocol requirement must be at least internal."}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"In Swift, as in Objective-C, protocol conformance is global—it isn’t possible for a type to conform to a protocol in two different ways within the same program."}]}],"type":"aside","style":"note"},{"anchor":"Extensions","text":"Extensions","type":"heading","level":2},{"inlineContent":[{"text":"You can extend a class, structure, or enumeration in any access context in which the class, structure, or enumeration is available. Any type members added in an extension have the same default access level as type members declared in the original type being extended. If you extend a public or internal type, any new type members you add have a default access level of internal. If you extend a file-private type, any new type members you add have a default access level of file private. If you extend a private type, any new type members you add have a default access level of private.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Alternatively, you can mark an extension with an explicit access-level modifier (for example, ","type":"text"},{"type":"codeVoice","code":"private"},{"text":") to set a new default access level for all members defined within the extension. This new default can still be overridden within the extension for individual type members.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can’t provide an explicit access-level modifier for an extension if you’re using that extension to add protocol conformance. Instead, the protocol’s own access level is used to provide the default access level for each protocol requirement implementation within the extension.","type":"text"}],"type":"paragraph"},{"anchor":"Private-Members-in-Extensions","text":"Private Members in Extensions","type":"heading","level":3},{"inlineContent":[{"type":"text","text":"Extensions that are in the same file as the class, structure, or enumeration that they extend behave as if the code in the extension had been written as part of the original type’s declaration. As a result, you can:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Declare a private member in the original declaration, and access that member from extensions in the same file.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Declare a private member in one extension, and access that member from another extension in the same file."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Declare a private member in an extension, and access that member from the original declaration in the same file."}],"type":"paragraph"}]}]},{"inlineContent":[{"type":"text","text":"This behavior means you can use extensions in the same way to organize your code, whether or not your types have private entities. For example, given the following simple protocol:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["protocol SomeProtocol {","    func doSomething()","}"]},{"inlineContent":[{"type":"text","text":"You can use an extension to add protocol conformance, like this:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct SomeStruct {","    private var privateVariable = 12","}","","extension SomeStruct: SomeProtocol {","    func doSomething() {","        print(privateVariable)","    }","}"]},{"anchor":"Generics","text":"Generics","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"The access level for a generic type or generic function is the minimum of the access level of the generic type or function itself and the access level of any type constraints on its type parameters."}],"type":"paragraph"},{"anchor":"Type-Aliases","text":"Type Aliases","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"Any type aliases you define are treated as distinct types for the purposes of access control. A type alias can have an access level less than or equal to the access level of the type it aliases. For example, a private type alias can alias a private, file-private, internal, public, or open type, but a public type alias can’t alias an internal, file-private, or private type."}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"This rule also applies to type aliases for associated types used to satisfy protocol conformances.","type":"text"}]}],"type":"aside","style":"note"}],"kind":"content"}],"references":{"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"url":"\/documentation\/swift\/stringsandcharacters","role":"article","title":"Strings and Characters","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"text":"string","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a series of characters, such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":". Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"text":" type. The contents of a ","type":"text"},{"type":"codeVoice","code":"String"},{"text":" can be accessed in various ways, including as a collection of ","type":"text"},{"type":"codeVoice","code":"Character"},{"text":" values.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Extensions":{"role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"retroactive modeling","type":"text"}]},{"type":"text","text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","kind":"article","url":"\/documentation\/swift\/extensions","title":"Extensions"},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"title":"Control Flow","url":"\/documentation\/swift\/controlflow","abstract":[{"text":"Swift provides a variety of control flow statements. These include ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" loops to perform a task multiple times; ","type":"text"},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"continue"},{"text":" to transfer the flow of execution to another point in your code.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"title":"Initialization","url":"\/documentation\/swift\/initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Inheritance":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","abstract":[{"text":"A class can ","type":"text"},{"inlineContent":[{"text":"inherit","type":"text"}],"type":"emphasis"},{"text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a ","type":"text"},{"inlineContent":[{"text":"subclass","type":"text"}],"type":"emphasis"},{"text":", and the class it inherits from is known as its ","type":"text"},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/inheritance","title":"Inheritance","type":"topic","role":"article"},"doc://com.apple.Swift/documentation/Swift/Closures":{"url":"\/documentation\/swift\/closures","role":"article","title":"Closures","abstract":[{"inlineContent":[{"type":"text","text":"Closures"}],"type":"emphasis"},{"type":"text","text":" are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","type":"topic"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes":{"url":"\/documentation\/swift\/collectiontypes","role":"article","title":"Collection Types","abstract":[{"type":"text","text":"Swift provides three primary "},{"type":"emphasis","inlineContent":[{"type":"text","text":"collection types"}]},{"type":"text","text":", known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Concurrency":{"title":"Concurrency","url":"\/documentation\/swift\/concurrency","abstract":[{"text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"Parallel code","type":"text"}]},{"type":"text","text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Generics":{"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner.","type":"text"}],"url":"\/documentation\/swift\/generics","role":"article","title":"Generics","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/AccessControl#Custom-Types":{"url":"\/documentation\/swift\/accesscontrol#Custom-Types","title":"Custom Types","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Custom-Types","abstract":[],"type":"topic"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"url":"\/documentation\/swift\/advancedoperators","role":"article","title":"Advanced Operators","abstract":[{"type":"text","text":"In addition to the operators described in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","isActive":true},{"type":"text","text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","type":"topic"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting":{"title":"Automatic Reference Counting","url":"\/documentation\/swift\/automaticreferencecounting","abstract":[{"text":"Swift uses ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Protocols":{"role":"article","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"protocol","type":"text"}]},{"text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be ","type":"text"},{"inlineContent":[{"text":"adopted","type":"text"}],"type":"emphasis"},{"text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to ","type":"text"},{"inlineContent":[{"text":"conform","type":"text"}],"type":"emphasis"},{"type":"text","text":" to that protocol."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","kind":"article","url":"\/documentation\/swift\/protocols","title":"Protocols"},"doc://com.apple.Swift/documentation/Swift/NestedTypes":{"title":"Nested Types","url":"\/documentation\/swift\/nestedtypes","abstract":[{"text":"Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"nested types","type":"text"}]},{"text":", whereby you nest supporting enumerations, classes, and structures within the definition of the type they support.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Enumerations":{"role":"article","abstract":[{"text":"An ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"enumeration","type":"text"}]},{"text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","kind":"article","url":"\/documentation\/swift\/enumerations","title":"Enumerations"},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"role":"article","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"deinitializer","type":"text"}]},{"text":" is called immediately before a class instance is deallocated. You write deinitializers with the ","type":"text"},{"code":"deinit","type":"codeVoice"},{"text":" keyword, similar to how initializers are written with the ","type":"text"},{"code":"init","type":"codeVoice"},{"type":"text","text":" keyword. Deinitializers are only available on class types."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","kind":"article","url":"\/documentation\/swift\/deinitialization","title":"Deinitialization"},"doc://com.apple.Swift/documentation/Swift/Functions":{"title":"Functions","url":"\/documentation\/swift\/functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Properties":{"url":"\/documentation\/swift\/properties","role":"article","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"text":"Properties","type":"text"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","type":"topic"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","abstract":[{"text":"An ","type":"text"},{"inlineContent":[{"text":"operator","type":"text"}],"type":"emphasis"},{"text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (","type":"text"},{"code":"+","type":"codeVoice"},{"text":") adds two numbers, as in ","type":"text"},{"code":"let i = 1 + 2","type":"codeVoice"},{"text":", and the logical AND operator (","type":"text"},{"code":"&&","type":"codeVoice"},{"text":") combines two Boolean values, as in ","type":"text"},{"code":"if enteredDoorCode && passedRetinaScan","type":"codeVoice"},{"text":".","type":"text"}],"kind":"article","url":"\/documentation\/swift\/basicoperators","title":"Basic Operators","type":"topic","role":"article"},"doc://com.apple.Swift/documentation/Swift":{"title":"Swift","url":"\/documentation\/swift","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","role":"collection","type":"topic"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","kind":"article","type":"topic","url":"\/documentation\/swift\/optionalchaining","role":"article","title":"Optional Chaining","abstract":[{"inlineContent":[{"text":"Optional chaining","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be "},{"code":"nil","type":"codeVoice"},{"type":"text","text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":", the property, method, or subscript call returns "},{"code":"nil","type":"codeVoice"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},"doc://com.apple.Swift/documentation/Swift/Subscripts":{"title":"Subscripts","url":"\/documentation\/swift\/subscripts","abstract":[{"text":"Classes, structures, and enumerations can define ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"subscripts","type":"text"}]},{"text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an ","type":"text"},{"code":"Array","type":"codeVoice"},{"type":"text","text":" instance as "},{"code":"someArray[index]","type":"codeVoice"},{"type":"text","text":" and elements in a "},{"code":"Dictionary","type":"codeVoice"},{"text":" instance as ","type":"text"},{"type":"codeVoice","code":"someDictionary[key]"},{"text":".","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/AccessControl#Default-Access-Levels":{"url":"\/documentation\/swift\/accesscontrol#Default-Access-Levels","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Default-Access-Levels","type":"topic","abstract":[],"kind":"section","title":"Default Access Levels"},"doc://com.apple.Swift/documentation/Swift/Initialization#Required-Initializers":{"url":"\/documentation\/swift\/initialization#Required-Initializers","abstract":[],"title":"Required Initializers","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Required-Initializers","kind":"section","type":"topic"},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"title":"Opaque Types","role":"article","kind":"article","url":"\/documentation\/swift\/opaquetypes","type":"topic","abstract":[{"text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t.","type":"text"}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Structures"}]},{"text":" and ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"classes","type":"text"}]},{"type":"text","text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","kind":"article","url":"\/documentation\/swift\/classesandstructures","title":"Structures and Classes"},"doc://com.apple.Swift/documentation/Swift/TypeCasting":{"url":"\/documentation\/swift\/typecasting","role":"article","title":"Type Casting","abstract":[{"inlineContent":[{"type":"text","text":"Type casting"}],"type":"emphasis"},{"type":"text","text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","type":"topic"},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"title":"Memory Safety","url":"\/documentation\/swift\/memorysafety","abstract":[{"text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors.","type":"text"}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","role":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/AccessControl#Subclassing":{"type":"topic","abstract":[],"kind":"section","url":"\/documentation\/swift\/accesscontrol#Subclassing","title":"Subclassing","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl#Subclassing"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"url":"\/documentation\/swift\/errorhandling","role":"article","title":"Error Handling","abstract":[{"inlineContent":[{"type":"text","text":"Error handling"}],"type":"emphasis"},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Initialization#Default-Initializers":{"type":"topic","title":"Default Initializers","url":"\/documentation\/swift\/initialization#Default-Initializers","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Default-Initializers","kind":"section"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"url":"\/documentation\/swift\/thebasics","role":"article","title":"The Basics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Methods":{"url":"\/documentation\/swift\/methods","role":"article","title":"Methods","abstract":[{"inlineContent":[{"type":"text","text":"Methods"}],"type":"emphasis"},{"type":"text","text":" are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","type":"topic"}}}