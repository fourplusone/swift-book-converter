{"sections":[],"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"kind":"article","abstract":[{"inlineContent":[{"text":"Extensions","type":"text"}],"type":"emphasis"},{"text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as ","type":"text"},{"inlineContent":[{"text":"retroactive modeling","type":"text"}],"type":"emphasis"},{"text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)","type":"text"}],"identifier":{"url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","interfaceLanguage":"swift"},"seeAlsoSections":[{"generated":true,"title":"Language Guide","identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"]}],"variants":[{"paths":["\/documentation\/swift\/extensions"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"primaryContentSections":[{"content":[{"text":"Overview","level":2,"type":"heading","anchor":"overview"},{"inlineContent":[{"type":"text","text":"Extensions in Swift can:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add computed instance properties and computed type properties"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Define instance methods and type methods"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Provide new initializers","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Define subscripts"}]}]},{"content":[{"inlineContent":[{"text":"Define and use new nested types","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Make an existing type conform to a protocol","type":"text"}]}]}]},{"inlineContent":[{"type":"text","text":"In Swift, you can even extend a protocol to provide implementations of its requirements or add additional functionality that conforming types can take advantage of. For more details, see "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocol-Extensions","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Extensions can add new functionality to a type, but they can’t override existing functionality.","type":"text"}]}]},{"text":"Extension Syntax","level":2,"type":"heading","anchor":"Extension-Syntax"},{"inlineContent":[{"type":"text","text":"Declare extensions with the "},{"type":"codeVoice","code":"extension"},{"type":"text","text":" keyword:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension SomeType {","    \/\/ new functionality to add to SomeType goes here","}"]},{"inlineContent":[{"text":"An extension can extend an existing type to make it adopt one or more protocols. To add protocol conformance, you write the protocol names the same way as you write them for a class or structure:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension SomeType: SomeProtocol, AnotherProtocol {","    \/\/ implementation of protocol requirements goes here","}"]},{"inlineContent":[{"text":"Adding protocol conformance in this way is described in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Adding-Protocol-Conformance-with-an-Extension"},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"An extension can be used to extend an existing generic type, as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Extending-a-Generic-Type"},{"type":"text","text":". You can also extend a generic type to conditionally add functionality, as described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Extensions-with-a-Generic-Where-Clause"},{"type":"text","text":"."}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"If you define an extension to add new functionality to an existing type, the new functionality will be available on all existing instances of that type, even if they were created before the extension was defined.","type":"text"}]}]},{"text":"Computed Properties","level":2,"type":"heading","anchor":"Computed-Properties"},{"inlineContent":[{"type":"text","text":"Extensions can add computed instance properties and computed type properties to existing types. This example adds five computed instance properties to Swift’s built-in "},{"type":"codeVoice","code":"Double"},{"text":" type, to provide basic support for working with distance units:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Double {","    var km: Double { return self * 1_000.0 }","    var m: Double { return self }","    var cm: Double { return self \/ 100.0 }","    var mm: Double { return self \/ 1_000.0 }","    var ft: Double { return self \/ 3.28084 }","}","let oneInch = 25.4.mm","print(\"One inch is \\(oneInch) meters\")","\/\/ Prints \"One inch is 0.0254 meters\"","let threeFeet = 3.ft","print(\"Three feet is \\(threeFeet) meters\")","\/\/ Prints \"Three feet is 0.914399970739201 meters\""]},{"inlineContent":[{"type":"text","text":"These computed properties express that a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" value should be considered as a certain unit of length. Although they’re implemented as computed properties, the names of these properties can be appended to a floating-point literal value with dot syntax, as a way to use that literal value to perform distance conversions."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this example, a "},{"code":"Double","type":"codeVoice"},{"type":"text","text":" value of "},{"code":"1.0","type":"codeVoice"},{"type":"text","text":" is considered to represent “one meter”. This is why the "},{"code":"m","type":"codeVoice"},{"type":"text","text":" computed property returns "},{"code":"self","type":"codeVoice"},{"type":"text","text":"—the expression "},{"code":"1.m","type":"codeVoice"},{"type":"text","text":" is considered to calculate a "},{"code":"Double","type":"codeVoice"},{"type":"text","text":" value of "},{"code":"1.0","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"Other units require some conversion to be expressed as a value measured in meters. One kilometer is the same as 1,000 meters, so the ","type":"text"},{"code":"km","type":"codeVoice"},{"text":" computed property multiplies the value by ","type":"text"},{"code":"1_000.00","type":"codeVoice"},{"text":" to convert into a number expressed in meters. Similarly, there are 3.28084 feet in a meter, and so the ","type":"text"},{"code":"ft","type":"codeVoice"},{"text":" computed property divides the underlying ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" value by ","type":"text"},{"code":"3.28084","type":"codeVoice"},{"text":", to convert it from feet to meters.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"These properties are read-only computed properties, and so they’re expressed without the "},{"type":"codeVoice","code":"get"},{"type":"text","text":" keyword, for brevity. Their return value is of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":", and can be used within mathematical calculations wherever a "},{"type":"codeVoice","code":"Double"},{"type":"text","text":" is accepted:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let aMarathon = 42.km + 195.m","print(\"A marathon is \\(aMarathon) meters long\")","\/\/ Prints \"A marathon is 42195.0 meters long\""]},{"style":"note","type":"aside","name":"Note","content":[{"inlineContent":[{"type":"text","text":"Extensions can add new computed properties, but they can’t add stored properties, or add property observers to existing properties."}],"type":"paragraph"}]},{"text":"Initializers","level":2,"type":"heading","anchor":"Initializers"},{"inlineContent":[{"text":"Extensions can add new initializers to existing types. This enables you to extend other types to accept your own custom types as initializer parameters, or to provide additional initialization options that were not included as part of the type’s original implementation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Extensions can add new convenience initializers to a class, but they can’t add new designated initializers or deinitializers to a class. Designated initializers and deinitializers must always be provided by the original class implementation.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"If you use an extension to add an initializer to a value type that provides default values for all of its stored properties and doesn’t define any custom initializers, you can call the default initializer and memberwise initializer for that value type from within your extension’s initializer. This wouldn’t be the case if you had written the initializer as part of the value type’s original implementation, as described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Initializer-Delegation-for-Value-Types","isActive":true},{"text":".","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If you use an extension to add an initializer to a structure that was declared in another module, the new initializer can’t access "},{"type":"codeVoice","code":"self"},{"type":"text","text":" until it calls an initializer from the defining module."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example below defines a custom "},{"type":"codeVoice","code":"Rect"},{"type":"text","text":" structure to represent a geometric rectangle. The example also defines two supporting structures called "},{"type":"codeVoice","code":"Size"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Point"},{"type":"text","text":", both of which provide default values of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":" for all of their properties:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct Size {","    var width = 0.0, height = 0.0","}","struct Point {","    var x = 0.0, y = 0.0","}","struct Rect {","    var origin = Point()","    var size = Size()","}"]},{"inlineContent":[{"text":"Because the ","type":"text"},{"code":"Rect","type":"codeVoice"},{"text":" structure provides default values for all of its properties, it receives a default initializer and a memberwise initializer automatically, as described in ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Default-Initializers"},{"text":". These initializers can be used to create new ","type":"text"},{"code":"Rect","type":"codeVoice"},{"text":" instances:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let defaultRect = Rect()","let memberwiseRect = Rect(origin: Point(x: 2.0, y: 2.0),","   size: Size(width: 5.0, height: 5.0))"]},{"inlineContent":[{"text":"You can extend the ","type":"text"},{"type":"codeVoice","code":"Rect"},{"text":" structure to provide an additional initializer that takes a specific center point and size:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Rect {","    init(center: Point, size: Size) {","        let originX = center.x - (size.width \/ 2)","        let originY = center.y - (size.height \/ 2)","        self.init(origin: Point(x: originX, y: originY), size: size)","    }","}"]},{"inlineContent":[{"text":"This new initializer starts by calculating an appropriate origin point based on the provided ","type":"text"},{"type":"codeVoice","code":"center"},{"text":" point and ","type":"text"},{"type":"codeVoice","code":"size"},{"text":" value. The initializer then calls the structure’s automatic memberwise initializer ","type":"text"},{"type":"codeVoice","code":"init(origin:size:)"},{"text":", which stores the new origin and size values in the appropriate properties:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["let centerRect = Rect(center: Point(x: 4.0, y: 4.0),","                      size: Size(width: 3.0, height: 3.0))","\/\/ centerRect's origin is (2.5, 2.5) and its size is (3.0, 3.0)"]},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you provide a new initializer with an extension, you are still responsible for making sure that each instance is fully initialized once the initializer completes."}]}]},{"text":"Methods","level":2,"type":"heading","anchor":"Methods"},{"inlineContent":[{"text":"Extensions can add new instance methods and type methods to existing types. The following example adds a new instance method called ","type":"text"},{"code":"repetitions","type":"codeVoice"},{"text":" to the ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" type:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Int {","    func repetitions(task: () -> Void) {","        for _ in 0..<self {","            task()","        }","    }","}"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"repetitions(task:)"},{"type":"text","text":" method takes a single argument of type "},{"type":"codeVoice","code":"() -> Void"},{"type":"text","text":", which indicates a function that has no parameters and doesn’t return a value."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"After defining this extension, you can call the "},{"type":"codeVoice","code":"repetitions(task:)"},{"type":"text","text":" method on any integer to perform a task that many number of times:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["3.repetitions {","    print(\"Hello!\")","}","\/\/ Hello!","\/\/ Hello!","\/\/ Hello!"]},{"text":"Mutating Instance Methods","level":3,"type":"heading","anchor":"Mutating-Instance-Methods"},{"inlineContent":[{"type":"text","text":"Instance methods added with an extension can also modify (or "},{"type":"emphasis","inlineContent":[{"text":"mutate","type":"text"}]},{"type":"text","text":") the instance itself. Structure and enumeration methods that modify "},{"code":"self","type":"codeVoice"},{"type":"text","text":" or its properties must mark the instance method as "},{"code":"mutating","type":"codeVoice"},{"type":"text","text":", just like mutating methods from an original implementation."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example below adds a new mutating method called "},{"type":"codeVoice","code":"square"},{"type":"text","text":" to Swift’s "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type, which squares the original value:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Int {","    mutating func square() {","        self = self * self","    }","}","var someInt = 3","someInt.square()","\/\/ someInt is now 9"]},{"text":"Subscripts","level":2,"type":"heading","anchor":"Subscripts"},{"inlineContent":[{"type":"text","text":"Extensions can add new subscripts to an existing type. This example adds an integer subscript to Swift’s built-in "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" type. This subscript "},{"type":"codeVoice","code":"[n]"},{"type":"text","text":" returns the decimal digit "},{"type":"codeVoice","code":"n"},{"type":"text","text":" places in from the right of the number:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"123456789[0]","type":"codeVoice"},{"type":"text","text":" returns "},{"code":"9","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"123456789[1]"},{"text":" returns ","type":"text"},{"type":"codeVoice","code":"8"}]}]}]},{"inlineContent":[{"text":"…and so on:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Int {","    subscript(digitIndex: Int) -> Int {","        var decimalBase = 1","        for _ in 0..<digitIndex {","            decimalBase *= 10","        }","        return (self \/ decimalBase) % 10","    }","}","746381295[0]","\/\/ returns 5","746381295[1]","\/\/ returns 9","746381295[2]","\/\/ returns 2","746381295[8]","\/\/ returns 7"]},{"inlineContent":[{"text":"If the ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" value doesn’t have enough digits for the requested index, the subscript implementation returns ","type":"text"},{"type":"codeVoice","code":"0"},{"text":", as if the number had been padded with zeros to the left:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["746381295[9]","\/\/ returns 0, as if you had requested:","0746381295[9]"]},{"text":"Nested Types","level":2,"type":"heading","anchor":"Nested-Types"},{"inlineContent":[{"text":"Extensions can add new nested types to existing classes, structures, and enumerations:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["extension Int {","    enum Kind {","        case negative, zero, positive","    }","    var kind: Kind {","        switch self {","        case 0:","            return .zero","        case let x where x > 0:","            return .positive","        default:","            return .negative","        }","    }","}"]},{"inlineContent":[{"text":"This example adds a new nested enumeration to ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":". This enumeration, called ","type":"text"},{"type":"codeVoice","code":"Kind"},{"text":", expresses the kind of number that a particular integer represents. Specifically, it expresses whether the number is negative, zero, or positive.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This example also adds a new computed instance property to "},{"type":"codeVoice","code":"Int"},{"type":"text","text":", called "},{"type":"codeVoice","code":"kind"},{"type":"text","text":", which returns the appropriate "},{"type":"codeVoice","code":"Kind"},{"type":"text","text":" enumeration case for that integer."}],"type":"paragraph"},{"inlineContent":[{"text":"The nested enumeration can now be used with any ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" value:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["func printIntegerKinds(_ numbers: [Int]) {","    for number in numbers {","        switch number.kind {","        case .negative:","            print(\"- \", terminator: \"\")","        case .zero:","            print(\"0 \", terminator: \"\")","        case .positive:","            print(\"+ \", terminator: \"\")","        }","    }","    print(\"\")","}","printIntegerKinds([3, 19, -27, 0, -6, 0, 7])","\/\/ Prints \"+ + - 0 - 0 + \""]},{"inlineContent":[{"text":"This function, ","type":"text"},{"type":"codeVoice","code":"printIntegerKinds(_:)"},{"text":", takes an input array of ","type":"text"},{"type":"codeVoice","code":"Int"},{"text":" values and iterates over those values in turn. For each integer in the array, the function considers the ","type":"text"},{"type":"codeVoice","code":"kind"},{"text":" computed property for that integer, and prints an appropriate description.","type":"text"}],"type":"paragraph"},{"style":"note","type":"aside","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":""}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"number.kind"},{"type":"text","text":" is already known to be of type "},{"type":"codeVoice","code":"Int.Kind"},{"type":"text","text":". Because of this, all of the "},{"type":"codeVoice","code":"Int.Kind"},{"type":"text","text":" case values can be written in shorthand form inside the "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statement, such as "},{"type":"codeVoice","code":".negative"},{"type":"text","text":" rather than "},{"type":"codeVoice","code":"Int.Kind.negative"},{"type":"text","text":"."}]}]}],"kind":"content"}],"metadata":{"role":"article","roleHeading":"Article","title":"Extensions","modules":[{"name":"Swift"}]},"references":{"doc://com.apple.Swift/documentation/Swift/Protocols":{"url":"\/documentation\/swift\/protocols","title":"Protocols","abstract":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"protocol","type":"text"}],"type":"emphasis"},{"text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be ","type":"text"},{"inlineContent":[{"type":"text","text":"adopted"}],"type":"emphasis"},{"text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"conform","type":"text"}]},{"text":" to that protocol.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/Generics":{"role":"article","type":"topic","title":"Generics","kind":"article","abstract":[{"inlineContent":[{"type":"text","text":"Generic code"}],"type":"emphasis"},{"text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner.","type":"text"}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","url":"\/documentation\/swift\/generics"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","abstract":[{"inlineContent":[{"text":"Structures","type":"text"}],"type":"emphasis"},{"text":" and ","type":"text"},{"inlineContent":[{"text":"classes","type":"text"}],"type":"emphasis"},{"text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions.","type":"text"}],"title":"Structures and Classes","url":"\/documentation\/swift\/classesandstructures","role":"article"},"doc://com.apple.Swift/documentation/Swift/Protocols#Adding-Protocol-Conformance-with-an-Extension":{"url":"\/documentation\/swift\/protocols#Adding-Protocol-Conformance-with-an-Extension","title":"Adding Protocol Conformance with an Extension","abstract":[],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Adding-Protocol-Conformance-with-an-Extension","kind":"section"},"doc://com.apple.Swift/documentation/Swift":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","abstract":[],"title":"Swift","url":"\/documentation\/swift","role":"collection"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"abstract":[{"type":"text","text":"An "},{"inlineContent":[{"text":"operator","type":"text"}],"type":"emphasis"},{"text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (","type":"text"},{"type":"codeVoice","code":"+"},{"text":") adds two numbers, as in ","type":"text"},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":", and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values, as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"type":"topic","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","url":"\/documentation\/swift\/basicoperators","kind":"article","title":"Basic Operators"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"url":"\/documentation\/swift\/thebasics","title":"The Basics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"kind":"article","role":"article","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","title":"Memory Safety","type":"topic","url":"\/documentation\/swift\/memorysafety"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"title":"Optional Chaining","kind":"article","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/optionalchaining","type":"topic"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"type":"topic","role":"article","kind":"article","abstract":[{"type":"emphasis","inlineContent":[{"text":"Error handling","type":"text"}]},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"title":"Error Handling","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","url":"\/documentation\/swift\/errorhandling"},"doc://com.apple.Swift/documentation/Swift/Enumerations":{"title":"Enumerations","kind":"article","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code."}],"url":"\/documentation\/swift\/enumerations","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Subscripts":{"abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"text":"subscripts","type":"text"}]},{"type":"text","text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","title":"Subscripts","url":"\/documentation\/swift\/subscripts","role":"article","kind":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Initialization#Default-Initializers":{"url":"\/documentation\/swift\/initialization#Default-Initializers","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Default-Initializers","type":"topic","title":"Default Initializers","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Initialization#Initializer-Delegation-for-Value-Types":{"type":"topic","title":"Initializer Delegation for Value Types","abstract":[],"url":"\/documentation\/swift\/initialization#Initializer-Delegation-for-Value-Types","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization#Initializer-Delegation-for-Value-Types"},"doc://com.apple.Swift/documentation/Swift/TypeCasting":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","role":"article","abstract":[{"inlineContent":[{"text":"Type casting","type":"text"}],"type":"emphasis"},{"text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy.","type":"text"}],"title":"Type Casting","url":"\/documentation\/swift\/typecasting","type":"topic"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting":{"url":"\/documentation\/swift\/automaticreferencecounting","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"text":"Automatic Reference Counting","type":"text"}]},{"type":"text","text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/Generics#Extending-a-Generic-Type":{"url":"\/documentation\/swift\/generics#Extending-a-Generic-Type","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Extending-a-Generic-Type","title":"Extending a Generic Type","abstract":[],"type":"topic","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Generics#Extensions-with-a-Generic-Where-Clause":{"type":"topic","title":"Extensions with a Generic Where Clause","abstract":[],"kind":"section","url":"\/documentation\/swift\/generics#Extensions-with-a-Generic-Where-Clause","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Extensions-with-a-Generic-Where-Clause"},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"deinitializer","type":"text"}]},{"type":"text","text":" is called immediately before a class instance is deallocated. You write deinitializers with the "},{"code":"deinit","type":"codeVoice"},{"text":" keyword, similar to how initializers are written with the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" keyword. Deinitializers are only available on class types.","type":"text"}],"kind":"article","role":"article","type":"topic","url":"\/documentation\/swift\/deinitialization","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization"},"doc://com.apple.Swift/documentation/Swift/NestedTypes":{"role":"article","type":"topic","title":"Nested Types","abstract":[{"text":"Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define ","type":"text"},{"inlineContent":[{"text":"nested types","type":"text"}],"type":"emphasis"},{"text":", whereby you nest supporting enumerations, classes, and structures within the definition of the type they support.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/nestedtypes","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes"},"doc://com.apple.Swift/documentation/Swift/Inheritance":{"kind":"article","role":"article","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"text":"inherit","type":"text"}]},{"type":"text","text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":", and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"text":"superclass","type":"text"}]},{"type":"text","text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","title":"Inheritance","type":"topic","url":"\/documentation\/swift\/inheritance"},"doc://com.apple.Swift/documentation/Swift/Functions":{"role":"article","type":"topic","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed."}],"kind":"article","url":"\/documentation\/swift\/functions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"url":"\/documentation\/swift\/initialization","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","type":"topic","title":"Initialization","kind":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use.","type":"text"}]},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"url":"\/documentation\/swift\/opaquetypes","title":"Opaque Types","abstract":[{"text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/Properties":{"url":"\/documentation\/swift\/properties","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"text":"Properties","type":"text"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/Protocols#Protocol-Extensions":{"kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Protocol-Extensions","abstract":[],"type":"topic","title":"Protocol Extensions","url":"\/documentation\/swift\/protocols#Protocol-Extensions"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","role":"article","url":"\/documentation\/swift\/advancedoperators","abstract":[{"text":"In addition to the operators described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","isActive":true},{"text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C.","type":"text"}],"title":"Advanced Operators","kind":"article"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes":{"role":"article","type":"topic","title":"Collection Types","abstract":[{"text":"Swift provides three primary ","type":"text"},{"inlineContent":[{"text":"collection types","type":"text"}],"type":"emphasis"},{"text":", known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/collectiontypes","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes"},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"title":"Access Control","abstract":[{"inlineContent":[{"text":"Access control","type":"text"}],"type":"emphasis"},{"text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used.","type":"text"}],"kind":"article","role":"article","type":"topic","url":"\/documentation\/swift\/accesscontrol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl"},"doc://com.apple.Swift/documentation/Swift/Methods":{"url":"\/documentation\/swift\/methods","title":"Methods","abstract":[{"inlineContent":[{"type":"text","text":"Methods"}],"type":"emphasis"},{"text":" are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/Closures":{"role":"article","type":"topic","title":"Closures","abstract":[{"inlineContent":[{"type":"text","text":"Closures"}],"type":"emphasis"},{"text":" are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/closures","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"title":"Strings and Characters","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"string","type":"text"}]},{"type":"text","text":" is a series of characters, such as "},{"code":"\"hello, world\"","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"\"albatross\"","type":"codeVoice"},{"text":". Swift strings are represented by the ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type. The contents of a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" can be accessed in various ways, including as a collection of ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" values.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","role":"article","url":"\/documentation\/swift\/stringsandcharacters"},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"role":"article","type":"topic","title":"Control Flow","abstract":[{"text":"Swift provides a variety of control flow statements. These include ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" loops to perform a task multiple times; ","type":"text"},{"code":"if","type":"codeVoice"},{"text":", ","type":"text"},{"code":"guard","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" to transfer the flow of execution to another point in your code."}],"kind":"article","url":"\/documentation\/swift\/controlflow","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow"},"doc://com.apple.Swift/documentation/Swift/Concurrency":{"type":"topic","role":"article","kind":"article","abstract":[{"text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. ","type":"text"},{"inlineContent":[{"type":"text","text":"Asynchronous code"}],"type":"emphasis"},{"text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. ","type":"text"},{"inlineContent":[{"type":"text","text":"Parallel code"}],"type":"emphasis"},{"text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way.","type":"text"}],"title":"Concurrency","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","url":"\/documentation\/swift\/concurrency"}}}