{"sections":[],"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"kind":"article","abstract":[{"type":"text","text":"There are two kinds of attributes in Swift—those that apply to declarations and those that apply to types. An attribute provides additional information about the declaration or type. For example, the "},{"type":"codeVoice","code":"discardableResult"},{"type":"text","text":" attribute on a function declaration indicates that, although the function returns a value, the compiler shouldn’t generate a warning if the return value is unused."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes"},"seeAlsoSections":[{"title":"Language Reference","generated":true,"identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/AboutTheLanguageReference","doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar"]}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swift\/attributes"]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"primaryContentSections":[{"content":[{"anchor":"overview","level":2,"text":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You specify an attribute by writing the ","type":"text"},{"type":"codeVoice","code":"@"},{"type":"text","text":" symbol followed by the attribute’s name and any arguments that the attribute accepts:"}]},{"code":["@attribute name","@attribute name(attribute arguments)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some declaration attributes accept arguments that specify more information about the attribute and how it applies to a particular declaration. These "},{"inlineContent":[{"type":"text","text":"attribute arguments"}],"type":"emphasis"},{"type":"text","text":" are enclosed in parentheses, and their format is defined by the attribute they belong to."}]},{"level":2,"anchor":"Declaration-Attributes","type":"heading","text":"Declaration Attributes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply a declaration attribute to declarations only."}]},{"level":3,"anchor":"available","type":"heading","text":"available"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to indicate a declaration’s life cycle relative to certain Swift language versions or certain platforms and operating system versions.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute always appears with a list of two or more comma-separated attribute arguments. These arguments begin with one of the following platform or language names:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"iOS","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"iOSApplicationExtension","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"macOS","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"macOSApplicationExtension","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"macCatalyst","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"macCatalystApplicationExtension","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"watchOS"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"watchOSApplicationExtension","type":"codeVoice"}]}]},{"content":[{"inlineContent":[{"code":"tvOS","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"tvOSApplicationExtension","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"code":"swift","type":"codeVoice"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"You can also use an asterisk (","type":"text"},{"code":"*","type":"codeVoice"},{"text":") to indicate the availability of the declaration on all of the platform names listed above. An ","type":"text"},{"code":"available","type":"codeVoice"},{"text":" attribute that specifies availability using a Swift version number can’t use the asterisk.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The remaining arguments can appear in any order and specify additional information about the declaration’s life cycle, including important milestones.","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"unavailable"},{"type":"text","text":" argument indicates that the declaration isn’t available on the specified platform. This argument can’t be used when specifying Swift version availability."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"introduced"},{"type":"text","text":" argument indicates the first version of the specified platform or language in which the declaration was introduced. It has the following form:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["introduced: version number"]},{"inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"text":"version number","type":"text"}]},{"type":"text","text":" consists of one to three positive integers, separated by periods."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"deprecated"},{"type":"text","text":" argument indicates the first version of the specified platform or language in which the declaration was deprecated. It has the following form:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["deprecated: version number"]},{"inlineContent":[{"text":"The optional ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"version number","type":"text"}]},{"text":" consists of one to three positive integers, separated by periods. Omitting the version number indicates that the declaration is currently deprecated, without giving any information about when the deprecation occurred. If you omit the version number, omit the colon (","type":"text"},{"type":"codeVoice","code":":"},{"text":") as well.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"obsoleted","type":"codeVoice"},{"type":"text","text":" argument indicates the first version of the specified platform or language in which the declaration was obsoleted. When a declaration is obsoleted, it’s removed from the specified platform or language and can no longer be used. It has the following form:"}]},{"syntax":"swift","type":"codeListing","code":["obsoleted: version number"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"text":"version number","type":"text"}],"type":"emphasis"},{"type":"text","text":" consists of one to three positive integers, separated by periods."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"message","type":"codeVoice"},{"text":" argument provides a textual message that the compiler displays when emitting a warning or error about the use of a deprecated or obsoleted declaration. It has the following form:","type":"text"}]},{"type":"codeListing","code":["message: message"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"message"}]},{"text":" consists of a string literal.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"renamed"},{"type":"text","text":" argument provides a textual message that indicates the new name for a declaration that’s been renamed. The compiler displays the new name when emitting an error about the use of a renamed declaration. It has the following form:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["renamed: new name"]},{"inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"new name","type":"text"}],"type":"emphasis"},{"text":" consists of a string literal.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"You can apply the ","type":"text"},{"code":"available","type":"codeVoice"},{"text":" attribute with the ","type":"text"},{"code":"renamed","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"unavailable","type":"codeVoice"},{"text":" arguments to a type alias declaration, as shown below, to indicate that the name of a declaration changed between releases of a framework or library. This combination results in a compile-time error that the declaration has been renamed.","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["\/\/ First release","protocol MyProtocol {","    \/\/ protocol definition","}"]},{"syntax":"swift","type":"codeListing","code":["\/\/ Subsequent release renames MyProtocol","protocol MyRenamedProtocol {","    \/\/ protocol definition","}","","@available(*, unavailable, renamed: \"MyRenamedProtocol\")","typealias MyProtocol = MyRenamedProtocol"]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply multiple "},{"code":"available","type":"codeVoice"},{"type":"text","text":" attributes on a single declaration to specify the declaration’s availability on different platforms and different versions of Swift. The declaration that the "},{"code":"available","type":"codeVoice"},{"type":"text","text":" attribute applies to is ignored if the attribute specifies a platform or language version that doesn’t match the current target. If you use multiple "},{"code":"available","type":"codeVoice"},{"type":"text","text":" attributes, the effective availability is the combination of the platform and Swift availabilities."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If an "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attribute only specifies an "},{"type":"codeVoice","code":"introduced"},{"type":"text","text":" argument in addition to a platform or language name argument, you can use the following shorthand syntax instead:"}]},{"code":["@available(platform name version number, *)","@available(swift version number)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The shorthand syntax for "},{"type":"codeVoice","code":"available"},{"type":"text","text":" attributes concisely expresses availability for multiple platforms. Although the two forms are functionally equivalent, the shorthand form is preferred whenever possible."}]},{"code":["@available(iOS 10.0, macOS 10.12, *)","class MyClass {","    \/\/ class definition","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"An ","type":"text"},{"code":"available","type":"codeVoice"},{"text":" attribute that specifies availability using a Swift version number can’t additionally specify a declaration’s platform availability. Instead, use separate ","type":"text"},{"code":"available","type":"codeVoice"},{"text":" attributes to specify a Swift version availability and one or more platform availabilities.","type":"text"}]},{"code":["@available(swift 3.0.2)","@available(macOS 10.12, *)","struct MyStruct {","    \/\/ struct definition","}"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"discardableResult","type":"heading","text":"discardableResult"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a function or method declaration to suppress the compiler warning when the function or method that returns a value is called without using its result.","type":"text"}]},{"level":3,"anchor":"dynamicCallable","type":"heading","text":"dynamicCallable"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a class, structure, enumeration, or protocol to treat instances of the type as callable functions. The type must implement either a ","type":"text"},{"code":"dynamicallyCall(withArguments:)","type":"codeVoice"},{"text":" method, a ","type":"text"},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"text":" method, or both.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can call an instance of a dynamically callable type as if it’s a function that takes any number of arguments."}]},{"code":["@dynamicCallable","struct TelephoneExchange {","    func dynamicallyCall(withArguments phoneNumber: [Int]) {","        if phoneNumber == [4, 1, 1] {","            print(\"Get Swift help on forums.swift.org\")","        } else {","            print(\"Unrecognized number\")","        }","    }","}","","let dial = TelephoneExchange()","","\/\/ Use a dynamic method call.","dial(4, 1, 1)","\/\/ Prints \"Get Swift help on forums.swift.org\"","","dial(8, 6, 7, 5, 3, 0, 9)","\/\/ Prints \"Unrecognized number\"","","\/\/ Call the underlying method directly.","dial.dynamicallyCall(withArguments: [4, 1, 1])"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration of the "},{"code":"dynamicallyCall(withArguments:)","type":"codeVoice"},{"type":"text","text":" method must have a single parameter that conforms to the "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","isActive":true},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral]"},{"type":"text","text":" protocol—like "},{"code":"[Int]","type":"codeVoice"},{"type":"text","text":" in the example above. The return type can be any type."}]},{"type":"paragraph","inlineContent":[{"text":"You can include labels in a dynamic method call if you implement the ","type":"text"},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"text":" method.","type":"text"}]},{"code":["@dynamicCallable","struct Repeater {","    func dynamicallyCall(withKeywordArguments pairs: KeyValuePairs<String, Int>) -> String {","        return pairs","            .map { label, count in","                repeatElement(label, count: count).joined(separator: \" \")","            }","            .joined(separator: \"\\n\")","    }","}","","let repeatLabels = Repeater()","print(repeatLabels(a: 1, b: 2, c: 3, b: 2, a: 1))","\/\/ a","\/\/ b b","\/\/ c c c","\/\/ b b","\/\/ a"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration of the "},{"type":"codeVoice","code":"dynamicallyCall(withKeywordArguments:)"},{"type":"text","text":" method must have a single parameter that conforms to the "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral"},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral]"},{"type":"text","text":" protocol, and the return type can be any type. The parameter’s "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key"},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key]"},{"type":"text","text":" must be "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral"},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral]"},{"type":"text","text":". The previous example uses "},{"type":"reference","isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs"},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs]"},{"type":"text","text":" as the parameter type so that callers can include duplicate parameter labels—"},{"type":"codeVoice","code":"a"},{"type":"text","text":" and "},{"type":"codeVoice","code":"b"},{"type":"text","text":" appear multiple times in the call to "},{"type":"codeVoice","code":"repeat"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you implement both "},{"code":"dynamicallyCall","type":"codeVoice"},{"type":"text","text":" methods, "},{"code":"dynamicallyCall(withKeywordArguments:)","type":"codeVoice"},{"type":"text","text":" is called when the method call includes keyword arguments. In all other cases, "},{"code":"dynamicallyCall(withArguments:)","type":"codeVoice"},{"type":"text","text":" is called."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can only call a dynamically callable instance with arguments and a return value that match the types you specify in one of your "},{"type":"codeVoice","code":"dynamicallyCall"},{"type":"text","text":" method implementations. The call in the following example doesn’t compile because there isn’t an implementation of "},{"type":"codeVoice","code":"dynamicallyCall(withArguments:)"},{"type":"text","text":" that takes "},{"type":"codeVoice","code":"KeyValuePairs<String, String>"},{"type":"text","text":"."}]},{"code":["repeatLabels(a: \"four\") \/\/ Error"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"dynamicMemberLookup","type":"heading","text":"dynamicMemberLookup"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a class, structure, enumeration, or protocol to enable members to be looked up by name at runtime. The type must implement a ","type":"text"},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"text":" subscript.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"In an explicit member expression, if there isn’t a corresponding declaration for the named member, the expression is understood as a call to the type’s ","type":"text"},{"code":"subscript(dynamicMember:)","type":"codeVoice"},{"text":" subscript, passing information about the member as the argument. The subscript can accept a parameter that’s either a key path or a member name; if you implement both subscripts, the subscript that takes key path argument is used.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"An implementation of "},{"type":"codeVoice","code":"subscript(dynamicMember:)"},{"type":"text","text":" can accept key paths using an argument of type "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","isActive":true},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/keypath]"},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath"},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath]"},{"type":"text","text":", or "},{"isActive":true,"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath"},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath]"},{"type":"text","text":". It can accept member names using an argument of a type that conforms to the "},{"overridingTitleInlineContent":[{"type":"text","text":"ExpressibleByStringLiteral"}],"isActive":true,"overridingTitle":"ExpressibleByStringLiteral","type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral"},{"type":"text","text":" [https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral]"},{"type":"text","text":" protocol—in most cases, "},{"code":"String","type":"codeVoice"},{"type":"text","text":". The subscript’s return type can be any type."}]},{"type":"paragraph","inlineContent":[{"text":"Dynamic member lookup by member name can be used to create a wrapper type around data that can’t be type checked at compile time, such as when bridging data from other languages into Swift. For example:","type":"text"}]},{"code":["@dynamicMemberLookup","struct DynamicStruct {","    let dictionary = [\"someDynamicMember\": 325,","                      \"someOtherMember\": 787]","    subscript(dynamicMember member: String) -> Int {","        return dictionary[member] ?? 1054","    }","}","let s = DynamicStruct()","","\/\/ Use dynamic member lookup.","let dynamic = s.someDynamicMember","print(dynamic)","\/\/ Prints \"325\"","","\/\/ Call the underlying subscript directly.","let equivalent = s[dynamicMember: \"someDynamicMember\"]","print(dynamic == equivalent)","\/\/ Prints \"true\""],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Dynamic member lookup by key path can be used to implement a wrapper type in a way that supports compile-time type checking. For example:","type":"text"}]},{"code":["struct Point { var x, y: Int }","","@dynamicMemberLookup","struct PassthroughWrapper<Value> {","    var value: Value","    subscript<T>(dynamicMember member: KeyPath<Value, T>) -> T {","        get { return value[keyPath: member] }","    }","}","","let point = Point(x: 381, y: 431)","let wrapper = PassthroughWrapper(value: point)","print(wrapper.x)"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"frozen","type":"heading","text":"frozen"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a structure or enumeration declaration to restrict the kinds of changes you can make to the type. This attribute is allowed only when compiling in library evolution mode. Future versions of the library can’t change the declaration by adding, removing, or reordering an enumeration’s cases or a structure’s stored instance properties. These changes are allowed on nonfrozen types, but they break ABI compatibility for frozen types."}]},{"content":[{"inlineContent":[{"text":"When the compiler isn’t in library evolution mode, all structures and enumerations are implicitly frozen, and this attribute is ignored.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"type":"paragraph","inlineContent":[{"text":"In library evolution mode, code that interacts with members of nonfrozen structures and enumerations is compiled in a way that allows it to continue working without recompiling even if a future version of the library adds, removes, or reorders some of that type’s members. The compiler makes this possible using techniques like looking up information at runtime and adding a layer of indirection. Marking a structure or enumeration as frozen gives up this flexibility to gain performance: Future versions of the library can make only limited changes to the type, but the compiler can make additional optimizations in code that interacts with the type’s members.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Frozen types, the types of the stored properties of frozen structures, and the associated values of frozen enumeration cases must be public or marked with the "},{"type":"codeVoice","code":"usableFromInline"},{"type":"text","text":" attribute. The properties of a frozen structure can’t have property observers, and expressions that provide the initial value for stored instance properties must follow the same restrictions as inlinable functions, as discussed in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#inlinable"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To enable library evolution mode on the command line, pass the "},{"type":"codeVoice","code":"-enable-library-evolution"},{"type":"text","text":" option to the Swift compiler. To enable it in Xcode, set the “Build Libraries for Distribution” build setting ("},{"type":"codeVoice","code":"BUILD_LIBRARY_FOR_DISTRIBUTION"},{"type":"text","text":") to Yes, as described in "},{"type":"reference","identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba","isActive":true},{"type":"text","text":" [https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba]"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"A switch statement over a frozen enumeration doesn’t require a ","type":"text"},{"type":"codeVoice","code":"default"},{"text":" case, as discussed in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","isActive":true,"type":"reference"},{"text":". Including a ","type":"text"},{"type":"codeVoice","code":"default"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"@unknown default"},{"text":" case when switching over a frozen enumeration produces a warning because that code is never executed.","type":"text"}]},{"level":3,"anchor":"GKInspectable","type":"heading","text":"GKInspectable"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to expose a custom GameplayKit component property to the SpriteKit editor UI. Applying this attribute also implies the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute.","type":"text"}]},{"level":3,"anchor":"inlinable","type":"heading","text":"inlinable"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a function, method, computed property, subscript, convenience initializer, or deinitializer declaration to expose that declaration’s implementation as part of the module’s public interface. The compiler is allowed to replace calls to an inlinable symbol with a copy of the symbol’s implementation at the call site."}]},{"type":"paragraph","inlineContent":[{"text":"Inlinable code can interact with ","type":"text"},{"code":"public","type":"codeVoice"},{"text":" symbols declared in any module, and it can interact with ","type":"text"},{"code":"internal","type":"codeVoice"},{"text":" symbols declared in the same module that are marked with the ","type":"text"},{"code":"usableFromInline","type":"codeVoice"},{"text":" attribute. Inlinable code can’t interact with ","type":"text"},{"code":"private","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"fileprivate","type":"codeVoice"},{"text":" symbols.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This attribute can’t be applied to declarations that are nested inside functions or to "},{"type":"codeVoice","code":"fileprivate"},{"type":"text","text":" or "},{"type":"codeVoice","code":"private"},{"type":"text","text":" declarations. Functions and closures that are defined inside an inlinable function are implicitly inlinable, even though they can’t be marked with this attribute."}]},{"level":3,"anchor":"main","type":"heading","text":"main"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a structure, class, or enumeration declaration to indicate that it contains the top-level entry point for program flow. The type must provide a "},{"type":"codeVoice","code":"main"},{"type":"text","text":" type function that doesn’t take any arguments and returns "},{"type":"codeVoice","code":"Void"},{"type":"text","text":". For example:"}]},{"code":["@main","struct MyTopLevel {","    static func main() {","        \/\/ Top-level code goes here","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Another way to describe the requirements of the ","type":"text"},{"code":"main","type":"codeVoice"},{"text":" attribute is that the type you write this attribute on must satisfy the same requirements as types that conform to the following hypothetical protocol:","type":"text"}]},{"code":["protocol ProvidesMain {","    static func main() throws","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The Swift code you compile to make an executable can contain at most one top-level entry point, as discussed in ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Top-Level-Code","isActive":true},{"text":".","type":"text"}]},{"level":3,"anchor":"nonobjc","type":"heading","text":"nonobjc"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a method, property, subscript, or initializer declaration to suppress an implicit ","type":"text"},{"type":"codeVoice","code":"objc"},{"text":" attribute. The ","type":"text"},{"type":"codeVoice","code":"nonobjc"},{"text":" attribute tells the compiler to make the declaration unavailable in Objective-C code, even though it’s possible to represent it in Objective-C.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying this attribute to an extension has the same effect as applying it to every member of that extension that isn’t explicitly marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"type":"paragraph","inlineContent":[{"text":"You use the ","type":"text"},{"code":"nonobjc","type":"codeVoice"},{"text":" attribute to resolve circularity for bridging methods in a class marked with the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute, and to allow overloading of methods and initializers in a class marked with the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A method marked with the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute can’t override a method marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute. However, a method marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute can override a method marked with the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute. Similarly, a method marked with the "},{"type":"codeVoice","code":"nonobjc"},{"type":"text","text":" attribute can’t satisfy a protocol requirement for a method marked with the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"level":3,"anchor":"NSApplicationMain","type":"heading","text":"NSApplicationMain"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class to indicate that it’s the application delegate. Using this attribute is equivalent to calling the "},{"type":"codeVoice","code":"NSApplicationMain(_:_:)"},{"type":"text","text":" function."}]},{"type":"paragraph","inlineContent":[{"text":"If you don’t use this attribute, supply a ","type":"text"},{"code":"main.swift","type":"codeVoice"},{"text":" file with code at the top level that calls the ","type":"text"},{"code":"NSApplicationMain(_:_:)","type":"codeVoice"},{"text":" function as follows:","type":"text"}]},{"code":["import AppKit","NSApplicationMain(CommandLine.argc, CommandLine.unsafeArgv)"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift code you compile to make an executable can contain at most one top-level entry point, as discussed in "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Top-Level-Code","type":"reference","isActive":true},{"type":"text","text":"."}]},{"level":3,"anchor":"NSCopying","type":"heading","text":"NSCopying"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a stored variable property of a class. This attribute causes the property’s setter to be synthesized with a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"copy"}]},{"text":" of the property’s value—returned by the ","type":"text"},{"code":"copyWithZone(_:)","type":"codeVoice"},{"text":" method—instead of the value of the property itself. The type of the property must conform to the ","type":"text"},{"code":"NSCopying","type":"codeVoice"},{"text":" protocol.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"NSCopying"},{"type":"text","text":" attribute behaves in a way similar to the Objective-C "},{"type":"codeVoice","code":"copy"},{"type":"text","text":" property attribute."}]},{"level":3,"anchor":"NSManaged","type":"heading","text":"NSManaged"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to an instance method or stored variable property of a class that inherits from "},{"type":"codeVoice","code":"NSManagedObject"},{"type":"text","text":" to indicate that Core Data dynamically provides its implementation at runtime, based on the associated entity description. For a property marked with the "},{"type":"codeVoice","code":"NSManaged"},{"type":"text","text":" attribute, Core Data also provides the storage at runtime. Applying this attribute also implies the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"level":3,"anchor":"objc","type":"heading","text":"objc"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to any declaration that can be represented in Objective-C—for example, nonnested classes, protocols, nongeneric enumerations (constrained to integer raw-value types), properties and methods (including getters and setters) of classes, protocols and optional members of a protocol, initializers, and subscripts. The "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute tells the compiler that a declaration is available to use in Objective-C code."}]},{"type":"paragraph","inlineContent":[{"text":"Applying this attribute to an extension has the same effect as applying it to every member of that extension that isn’t explicitly marked with the ","type":"text"},{"code":"nonobjc","type":"codeVoice"},{"text":" attribute.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The compiler implicitly adds the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute to subclasses of any class defined in Objective-C. However, the subclass must not be generic, and must not inherit from any generic classes. You can explicitly add the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute to a subclass that meets these criteria, to specify its Objective-C name as discussed below. Protocols that are marked with the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute can’t inherit from protocols that aren’t marked with this attribute.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute is also implicitly added in the following cases:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The declaration is an override in a subclass, and the superclass’s declaration has the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The declaration satisfies a requirement from a protocol that has the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"The declaration has the ","type":"text"},{"code":"IBAction","type":"codeVoice"},{"text":", ","type":"text"},{"code":"IBSegueAction","type":"codeVoice"},{"text":", ","type":"text"},{"code":"IBOutlet","type":"codeVoice"},{"text":", ","type":"text"},{"code":"IBDesignable","type":"codeVoice"},{"text":", ","type":"text"},{"code":"IBInspectable","type":"codeVoice"},{"text":", ","type":"text"},{"code":"NSManaged","type":"codeVoice"},{"text":", or ","type":"text"},{"code":"GKInspectable","type":"codeVoice"},{"text":" attribute.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you apply the "},{"code":"objc","type":"codeVoice"},{"type":"text","text":" attribute to an enumeration, each enumeration case is exposed to Objective-C code as the concatenation of the enumeration name and the case name. The first letter of the case name is capitalized. For example, a case named "},{"code":"venus","type":"codeVoice"},{"type":"text","text":" in a Swift "},{"code":"Planet","type":"codeVoice"},{"type":"text","text":" enumeration is exposed to Objective-C code as a case named "},{"code":"PlanetVenus","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute optionally accepts a single attribute argument, which consists of an identifier. The identifier specifies the name to be exposed to Objective-C for the entity that the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute applies to. You can use this argument to name classes, enumerations, enumeration cases, protocols, methods, getters, setters, and initializers. If you specify the Objective-C name for a class, protocol, or enumeration, include a three-letter prefix on the name, as described in "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1","isActive":true},{"type":"text","text":" [https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1]"},{"type":"text","text":" in "},{"type":"reference","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210","isActive":true},{"type":"text","text":" [https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210]"},{"type":"text","text":". The example below exposes the getter for the "},{"type":"codeVoice","code":"enabled"},{"type":"text","text":" property of the "},{"type":"codeVoice","code":"ExampleClass"},{"type":"text","text":" to Objective-C code as "},{"type":"codeVoice","code":"isEnabled"},{"type":"text","text":" rather than just as the name of the property itself."}]},{"code":["class ExampleClass: NSObject {","    @objc var enabled: Bool {","        @objc(isEnabled) get {","            \/\/ Return the appropriate value","        }","    }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"For more information, see ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c","isActive":true},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c]","type":"text"},{"text":".","type":"text"}]},{"content":[{"inlineContent":[{"text":"The argument to the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute can also change the runtime name for that declaration. You use the runtime name when calling functions that interact with the Objective-C runtime, like ","type":"text"},{"isActive":true,"identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring","type":"reference"},{"text":" [https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring]","type":"text"},{"text":", and when specifying class names in an app’s Info.plist file. If you specify a name by passing an argument, that name is used as the name in Objective-C code and as the runtime name. If you omit the argument, the name used in Objective-C code matches the name in Swift code, and the runtime name follows the normal Swift compiler convention of name mangling.","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Note","style":"note"},{"level":3,"anchor":"objcMembers","type":"heading","text":"objcMembers"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a class declaration, to implicitly apply the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute to all Objective-C compatible members of the class, its extensions, its subclasses, and all of the extensions of its subclasses.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Most code should use the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute instead, to expose only the declarations that are needed. If you need to expose many declarations, you can group them in an extension that has the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute. The ","type":"text"},{"code":"objcMembers","type":"codeVoice"},{"text":" attribute is a convenience for libraries that make heavy use of the introspection facilities of the Objective-C runtime. Applying the ","type":"text"},{"code":"objc","type":"codeVoice"},{"text":" attribute when it isn’t needed can increase your binary size and adversely affect performance.","type":"text"}]},{"level":3,"anchor":"propertyWrapper","type":"heading","text":"propertyWrapper"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, or enumeration declaration to use that type as a property wrapper. When you apply this attribute to a type, you create a custom attribute with the same name as the type. Apply that new attribute to a property of a class, structure, or enumeration to wrap access to the property through an instance of the wrapper type; apply the attribute to a local stored variable declaration to wrap access to the variable the same way. Computed variables, global variables, and constants can’t use property wrappers."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The wrapper must define a "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" instance property. The "},{"type":"emphasis","inlineContent":[{"text":"wrapped value","type":"text"}]},{"type":"text","text":" of the property is the value that the getter and setter for this property expose. In most cases, "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" is a computed value, but it can be a stored value instead. The wrapper defines and manages any underlying storage needed by its wrapped value. The compiler synthesizes storage for the instance of the wrapper type by prefixing the name of the wrapped property with an underscore ("},{"type":"codeVoice","code":"_"},{"type":"text","text":")—for example, the wrapper for "},{"type":"codeVoice","code":"someProperty"},{"type":"text","text":" is stored as "},{"type":"codeVoice","code":"_someProperty"},{"type":"text","text":". The synthesized storage for the wrapper has an access control level of "},{"type":"codeVoice","code":"private"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A property that has a property wrapper can include "},{"code":"willSet","type":"codeVoice"},{"type":"text","text":" and "},{"code":"didSet","type":"codeVoice"},{"type":"text","text":" blocks, but it can’t override the compiler-synthesized "},{"code":"get","type":"codeVoice"},{"type":"text","text":" or "},{"code":"set","type":"codeVoice"},{"type":"text","text":" blocks."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift provides two forms of syntactic sugar for initialization of a property wrapper. You can use assignment syntax in the definition of a wrapped value to pass the expression on the right-hand side of the assignment as the argument to the "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" parameter of the property wrapper’s initializer. You can also provide arguments to the attribute when you apply it to a property, and those arguments are passed to the property wrapper’s initializer. For example, in the code below, "},{"type":"codeVoice","code":"SomeStruct"},{"type":"text","text":" calls each of the initializers that "},{"type":"codeVoice","code":"SomeWrapper"},{"type":"text","text":" defines."}]},{"code":["@propertyWrapper","struct SomeWrapper {","    var wrappedValue: Int","    var someValue: Double","    init() {","        self.wrappedValue = 100","        self.someValue = 12.3","    }","    init(wrappedValue: Int) {","        self.wrappedValue = wrappedValue","        self.someValue = 45.6","    }","    init(wrappedValue value: Int, custom: Double) {","        self.wrappedValue = value","        self.someValue = custom","    }","}","","struct SomeStruct {","    \/\/ Uses init()","    @SomeWrapper var a: Int","","    \/\/ Uses init(wrappedValue:)","    @SomeWrapper var b = 10","","    \/\/ Both use init(wrappedValue:custom:)","    @SomeWrapper(custom: 98.7) var c = 30","    @SomeWrapper(wrappedValue: 30, custom: 98.7) var d","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"projected value","type":"text"}],"type":"emphasis"},{"text":" for a wrapped property is a second value that a property wrapper can use to expose additional functionality. The author of a property wrapper type is responsible for determining the meaning of its projected value and defining the interface that the projected value exposes. To project a value from a property wrapper, define a ","type":"text"},{"code":"projectedValue","type":"codeVoice"},{"text":" instance property on the wrapper type. The compiler synthesizes an identifier for the projected value by prefixing the name of the wrapped property with a dollar sign (","type":"text"},{"code":"$","type":"codeVoice"},{"text":")—for example, the projected value for ","type":"text"},{"code":"someProperty","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"$someProperty","type":"codeVoice"},{"text":". The projected value has the same access control level as the original wrapped property.","type":"text"}]},{"code":["@propertyWrapper","struct WrapperWithProjection {","    var wrappedValue: Int","    var projectedValue: SomeProjection {","        return SomeProjection(wrapper: self)","    }","}","struct SomeProjection {","    var wrapper: WrapperWithProjection","}","","struct SomeStruct {","    @WrapperWithProjection var x = 123","}","let s = SomeStruct()","s.x           \/\/ Int value","s.$x          \/\/ SomeProjection value","s.$x.wrapper  \/\/ WrapperWithProjection value"],"type":"codeListing","syntax":"swift"},{"level":3,"anchor":"resultBuilder","type":"heading","text":"resultBuilder"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class, structure, enumeration to use that type as a result builder. A "},{"type":"emphasis","inlineContent":[{"text":"result builder","type":"text"}]},{"type":"text","text":" is a type that builds a nested data structure step by step. You use result builders to implement a domain-specific language (DSL) for creating nested data structures in a natural, declarative way. For an example of how to use the "},{"type":"codeVoice","code":"resultBuilder"},{"type":"text","text":" attribute, see "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Result-Builders"},{"type":"text","text":"."}]},{"level":4,"anchor":"Result-Building-Methods","type":"heading","text":"Result-Building Methods"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A result builder implements static methods described below. Because all of the result builder’s functionality is exposed through static methods, you don’t ever initialize an instance of that type. The "},{"type":"codeVoice","code":"buildBlock(_:)"},{"type":"text","text":" method is required; the other methods—which enable additional functionality in the DSL—are optional. The declaration of a result builder type doesn’t actually have to include any protocol conformance."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The description of the static methods uses three types as placeholders. The type "},{"code":"Expression","type":"codeVoice"},{"type":"text","text":" is a placeholder for the type of the result builder’s input, "},{"code":"Component","type":"codeVoice"},{"type":"text","text":" is a placeholder for the type of a partial result, and "},{"code":"FinalResult","type":"codeVoice"},{"type":"text","text":" is a placeholder for the type of the result that the result builder produces. You replace these types with the actual types that your result builder uses. If your result-building methods don’t specify a type for "},{"code":"Expression","type":"codeVoice"},{"type":"text","text":" or "},{"code":"FinalResult","type":"codeVoice"},{"type":"text","text":", they default to being the same as "},{"code":"Component","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"text":"The result-building methods are as follows:","type":"text"}]},{"type":"termList","items":[{"term":{"inlineContent":[{"code":"static func buildBlock(_ components: Component...) -> Component","type":"codeVoice"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"text":"Combines an array of partial results into a single partial result. A result builder must implement this method.","type":"text"}]}]}},{"term":{"inlineContent":[{"code":"static func buildOptional(_ component: Component?) -> Component","type":"codeVoice"}]},"definition":{"content":[{"inlineContent":[{"text":"Builds a partial result from a partial result that can be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". Implement this method to support ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statements that don’t include an ","type":"text"},{"code":"else","type":"codeVoice"},{"text":" clause.","type":"text"}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"code":"static func buildEither(first: Component) -> Component","type":"codeVoice"}]},"definition":{"content":[{"inlineContent":[{"text":"Builds a partial result whose value varies depending on some condition. Implement both this method and ","type":"text"},{"code":"buildEither(second:)","type":"codeVoice"},{"text":" to support ","type":"text"},{"code":"switch","type":"codeVoice"},{"text":" statements and ","type":"text"},{"code":"if","type":"codeVoice"},{"text":" statements that include an ","type":"text"},{"code":"else","type":"codeVoice"},{"text":" clause.","type":"text"}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"code":"static func buildEither(second: Component) -> Component","type":"codeVoice"}]},"definition":{"content":[{"inlineContent":[{"text":"Builds a partial result whose value varies depending on some condition. Implement both this method and ","type":"text"},{"type":"codeVoice","code":"buildEither(first:)"},{"text":" to support ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statements and ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statements that include an ","type":"text"},{"type":"codeVoice","code":"else"},{"text":" clause.","type":"text"}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"code":"static func buildArray(_ components: [Component]) -> Component","type":"codeVoice"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"Builds a partial result from an array of partial results. Implement this method to support "},{"type":"codeVoice","code":"for"},{"type":"text","text":" loops."}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"type":"codeVoice","code":"static func buildExpression(_ expression: Expression) -> Component"}]},"definition":{"content":[{"inlineContent":[{"type":"text","text":"Builds a partial result from an expression. You can implement this method to perform preprocessing—for example, converting expressions to an internal type—or to provide additional information for type inference at use sites."}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"code":"static func buildFinalResult(_ component: Component) -> FinalResult","type":"codeVoice"}]},"definition":{"content":[{"inlineContent":[{"text":"Builds a final result from a partial result. You can implement this method as part of a result builder that uses a different type for partial and final results, or to perform other postprocessing on a result before returning it.","type":"text"}],"type":"paragraph"}]}},{"term":{"inlineContent":[{"code":"static func buildLimitedAvailability(_ component: Component) -> Component","type":"codeVoice"}]},"definition":{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Builds a partial result that propagates or erases type information outside a compiler-control statement that performs an availability check. You can use this to erase type information that varies between the conditional branches."}]}]}}]},{"type":"paragraph","inlineContent":[{"text":"For example, the code below defines a simple result builder that builds an array of integers. This code defines ","type":"text"},{"code":"Compontent","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Expression","type":"codeVoice"},{"text":" as type aliases, to make it easier to match the examples below to the list of methods above.","type":"text"}]},{"code":["@resultBuilder","struct ArrayBuilder {","    typealias Component = [Int]","    typealias Expression = Int","    static func buildExpression(_ element: Expression) -> Component {","        return [element]","    }","    static func buildOptional(_ component: Component?) -> Component {","        guard let component = component else { return [] }","        return component","    }","    static func buildEither(first component: Component) -> Component {","        return component","    }","    static func buildEither(second component: Component) -> Component {","        return component","    }","    static func buildArray(_ components: [Component]) -> Component {","        return Array(components.joined())","    }","    static func buildBlock(_ components: Component...) -> Component {","        return Array(components.joined())","    }","}"],"type":"codeListing","syntax":"swift"},{"level":4,"anchor":"Result-Transformations","type":"heading","text":"Result Transformations"},{"type":"paragraph","inlineContent":[{"text":"The following syntactic transformations are applied recursively to turn code that uses result-builder syntax into code that calls the static methods of the result builder type:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"If the result builder has a ","type":"text"},{"code":"buildExpression(_:)","type":"codeVoice"},{"text":" method, each expression becomes a call to that method. This transformation is always first. For example, the following declarations are equivalent:","type":"text"}],"type":"paragraph"},{"code":["@ArrayBuilder var builderNumber: [Int] { 10 }","var manualNumber = ArrayBuilder.buildExpression(10)"],"type":"codeListing","syntax":"swift"}]},{"content":[{"inlineContent":[{"text":"An assignment statement is transformed like an expression, but is understood to evaluate to ","type":"text"},{"type":"codeVoice","code":"()"},{"text":". You can define an overload of ","type":"text"},{"type":"codeVoice","code":"buildExpression(_:)"},{"text":" that takes an argument of type ","type":"text"},{"type":"codeVoice","code":"()"},{"text":" to handle assignments specifically.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"A branch statement that checks an availability condition becomes a call to the "},{"type":"codeVoice","code":"buildLimitedAvailability(_:)"},{"type":"text","text":" method. This transformation happens before the transformation into a call to "},{"type":"codeVoice","code":"buildEither(first:)"},{"type":"text","text":", "},{"type":"codeVoice","code":"buildEither(second:)"},{"type":"text","text":", or "},{"type":"codeVoice","code":"buildOptional(_:)"},{"type":"text","text":". You use the "},{"type":"codeVoice","code":"buildLimitedAvailability(_:)"},{"type":"text","text":" method to erase type information that changes depending on which branch is taken. For example, the "},{"type":"codeVoice","code":"buildEither(first:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"buildEither(second:)"},{"type":"text","text":" methods below use a generic type that captures type information about both branches."}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["protocol Drawable {","    func draw() -> String","}","struct Text: Drawable {","    var content: String","    init(_ content: String) { self.content = content }","    func draw() -> String { return content }","}","struct Line<D: Drawable>: Drawable {","    var elements: [D]","    func draw() -> String {","        return elements.map { $0.draw() }.joined(separator: \"\")","    }","}","struct DrawEither<First: Drawable, Second: Drawable>: Drawable {","    var content: Drawable","    func draw() -> String { return content.draw() }","}","","@resultBuilder","struct DrawingBuilder {","    static func buildBlock<D: Drawable>(_ components: D...) -> Line<D> {","        return Line(elements: components)","    }","    static func buildEither<First, Second>(first: First)","        -> DrawEither<First, Second> {","            return DrawEither(content: first)","    }","    static func buildEither<First, Second>(second: Second)","        -> DrawEither<First, Second> {","            return DrawEither(content: second)","    }","}"]},{"inlineContent":[{"text":"However, this approach causes a problem in code that has availability checks:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["@available(macOS 99, *)","struct FutureText: Drawable {","    var content: String","    init(_ content: String) { self.content = content }","    func draw() -> String { return content }","}","@DrawingBuilder var brokenDrawing: Drawable {","    if #available(macOS 99, *) {","        FutureText(\"Inside.future\")  \/\/ Problem","    } else {","        Text(\"Inside.present\")","    }","}","\/\/ The type of brokenDrawing is Line<DrawEither<Line<FutureText>, Line<Text>>>"],"syntax":"swift"},{"inlineContent":[{"text":"In the code above, ","type":"text"},{"code":"FutureText","type":"codeVoice"},{"text":" appears as part of the type of ","type":"text"},{"code":"brokenDrawing","type":"codeVoice"},{"text":" because it’s one of the types in the ","type":"text"},{"code":"DrawEither","type":"codeVoice"},{"text":" generic type. This could cause your program to crash if ","type":"text"},{"code":"FutureText","type":"codeVoice"},{"text":" isn’t available at runtime, even in the case where that type is explicitly not being used.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"To solve this problem, implement a ","type":"text"},{"code":"buildLimitedAvailability(_:)","type":"codeVoice"},{"text":" method to erase type information. For example, the code below builds an ","type":"text"},{"code":"AnyDrawable","type":"codeVoice"},{"text":" value from its availability check.","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct AnyDrawable: Drawable {","    var content: Drawable","    func draw() -> String { return content.draw() }","}","extension DrawingBuilder {","    static func buildLimitedAvailability(_ content: Drawable) -> AnyDrawable {","        return AnyDrawable(content: content)","    }","}","","@DrawingBuilder var typeErasedDrawing: Drawable {","    if #available(macOS 99, *) {","        FutureText(\"Inside.future\")","    } else {","        Text(\"Inside.present\")","    }","}","\/\/ The type of typeErasedDrawing is Line<DrawEither<AnyDrawable, Line<Text>>>"],"syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A branch statement becomes a series of nested calls to the ","type":"text"},{"code":"buildEither(first:)","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"buildEither(second:)","type":"codeVoice"},{"text":" methods. The statements’ conditions and cases are mapped onto the leaf nodes of a binary tree, and the statement becomes a nested call to the ","type":"text"},{"code":"buildEither","type":"codeVoice"},{"text":" methods following the path to that leaf node from the root node.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, if you write a switch statement that has three cases, the compiler uses a binary tree with three leaf nodes. Likewise, because the path from the root node to the second case is “second child” and then “first child”, that case becomes a nested call like ","type":"text"},{"code":"buildEither(first: buildEither(second: ... ))","type":"codeVoice"},{"text":". The following declarations are equivalent:","type":"text"}]},{"type":"codeListing","code":["let someNumber = 19","@ArrayBuilder var builderConditional: [Int] {","    if someNumber < 12 {","        31","    } else if someNumber == 19 {","        32","    } else {","        33","    }","}","","var manualConditional: [Int]","if someNumber < 12 {","    let partialResult = ArrayBuilder.buildExpression(31)","    let outerPartialResult = ArrayBuilder.buildEither(first: partialResult)","    manualConditional = ArrayBuilder.buildEither(first: outerPartialResult)","} else if someNumber == 19 {","    let partialResult = ArrayBuilder.buildExpression(32)","    let outerPartialResult = ArrayBuilder.buildEither(second: partialResult)","    manualConditional = ArrayBuilder.buildEither(first: outerPartialResult)","} else {","    let partialResult = ArrayBuilder.buildExpression(33)","    manualConditional = ArrayBuilder.buildEither(second: partialResult)","}"],"syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A branch statement that might not produce a value, like an ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement without an ","type":"text"},{"type":"codeVoice","code":"else"},{"text":" clause, becomes a call to ","type":"text"},{"type":"codeVoice","code":"buildOptional(_:)"},{"text":". If the ","type":"text"},{"type":"codeVoice","code":"if"},{"text":" statement’s condition is satisfied, its code block is transformed and passed as the argument; otherwise, ","type":"text"},{"type":"codeVoice","code":"buildOptional(_:)"},{"text":" is called with ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" as its argument. For example, the following declarations are equivalent:","type":"text"}]},{"type":"codeListing","code":["@ArrayBuilder var builderOptional: [Int] {","    if (someNumber % 2) == 1 { 20 }","}","","var partialResult: [Int]? = nil","if (someNumber % 2) == 1 {","    partialResult = ArrayBuilder.buildExpression(20)","}","var manualOptional = ArrayBuilder.buildOptional(partialResult)"],"syntax":"swift"}]},{"content":[{"inlineContent":[{"text":"A code block or ","type":"text"},{"code":"do","type":"codeVoice"},{"text":" statement becomes a call to the ","type":"text"},{"code":"buildBlock(_:)","type":"codeVoice"},{"text":" method. Each of the statements inside of the block is transformed, one at a time, and they become the arguments to the ","type":"text"},{"code":"buildBlock(_:)","type":"codeVoice"},{"text":" method. For example, the following declarations are equivalent:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@ArrayBuilder var builderBlock: [Int] {","    100","    200","    300","}","","var manualBlock = ArrayBuilder.buildBlock(","    ArrayBuilder.buildExpression(100),","    ArrayBuilder.buildExpression(200),","    ArrayBuilder.buildExpression(300)",")"]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"code":"for","type":"codeVoice"},{"text":" loop becomes a temporary variable, a ","type":"text"},{"code":"for","type":"codeVoice"},{"text":" loop, and call to the ","type":"text"},{"code":"buildArray(_:)","type":"codeVoice"},{"text":" method. The new ","type":"text"},{"code":"for","type":"codeVoice"},{"text":" loop iterates over the sequence and appends each partial result to that array. The temporary array is passed as the argument in the ","type":"text"},{"code":"buildArray(_:)","type":"codeVoice"},{"text":" call. For example, the following declarations are equivalent:","type":"text"}]},{"code":["@ArrayBuilder var builderArray: [Int] {","    for i in 5...7 {","        100 + i","    }","}","","var temporary: [[Int]] = []","for i in 5...7 {","    let partialResult = ArrayBuilder.buildExpression(100 + i)","    temporary.append(partialResult)","}","let manualArray = ArrayBuilder.buildArray(temporary)"],"type":"codeListing","syntax":"swift"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If the result builder has a "},{"type":"codeVoice","code":"buildFinalResult(_:)"},{"type":"text","text":" method, the final result becomes a call to that method. This transformation is always last."}]}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Although the transformation behavior is described in terms of temporary variables, using a result builder doesn’t actually create any new declarations that are visible from the rest of your code."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can’t use "},{"code":"break","type":"codeVoice"},{"type":"text","text":", "},{"code":"continue","type":"codeVoice"},{"type":"text","text":", "},{"code":"defer","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", or "},{"code":"return","type":"codeVoice"},{"type":"text","text":" statements, "},{"code":"while","type":"codeVoice"},{"type":"text","text":" statements, or "},{"code":"do","type":"codeVoice"},{"type":"text","text":"-"},{"code":"catch","type":"codeVoice"},{"type":"text","text":" statements in the code that a result builder transforms."}]},{"type":"paragraph","inlineContent":[{"text":"The transformation process doesn’t change declarations in the code, which lets you use temporary constants and variables to build up expressions piece by piece. It also doesn’t change ","type":"text"},{"code":"throw","type":"codeVoice"},{"text":" statements, compile-time diagnostic statements, or closures that contain a ","type":"text"},{"code":"return","type":"codeVoice"},{"text":" statement.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Whenever possible, transformations are coalesced. For example, the expression ","type":"text"},{"code":"4 + 5 * 6","type":"codeVoice"},{"text":" becomes ","type":"text"},{"code":"buildExpression(4 + 5 * 6)","type":"codeVoice"},{"text":" rather multiple calls to that function. Likewise, nested branch statements become a single binary tree of calls to the ","type":"text"},{"code":"buildEither","type":"codeVoice"},{"text":" methods.","type":"text"}]},{"level":4,"anchor":"Custom-Result-Builder-Attributes","type":"heading","text":"Custom Result-Builder Attributes"},{"type":"paragraph","inlineContent":[{"text":"Creating a result builder type creates a custom attribute with the same name. You can apply that attribute in the following places:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"On a function declaration, the result builder builds the body of the function."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a variable or subscript declaration that includes a getter, the result builder builds the body of the getter."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"On a parameter in a function declaration, the result builder builds the body of a closure that’s passed as the corresponding argument."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Applying a result builder attribute doesn’t impact ABI compatibility. Applying a result builder attribute to a parameter makes that attribute part of the function’s interface, which can effect source compatibility.","type":"text"}]},{"level":3,"anchor":"requiresstoredpropertyinits","type":"heading","text":"requires_stored_property_inits"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a class declaration to require all stored properties within the class to provide default values as part of their definitions. This attribute is inferred for any class that inherits from "},{"type":"codeVoice","code":"NSManagedObject"},{"type":"text","text":"."}]},{"level":3,"anchor":"testable","type":"heading","text":"testable"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to an ","type":"text"},{"type":"codeVoice","code":"import"},{"text":" declaration to import that module with changes to its access control that simplify testing the module’s code. Entities in the imported module that are marked with the ","type":"text"},{"type":"codeVoice","code":"internal"},{"text":" access-level modifier are imported as if they were declared with the ","type":"text"},{"type":"codeVoice","code":"public"},{"text":" access-level modifier. Classes and class members that are marked with the ","type":"text"},{"type":"codeVoice","code":"internal"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"public"},{"text":" access-level modifier are imported as if they were declared with the ","type":"text"},{"type":"codeVoice","code":"open"},{"text":" access-level modifier. The imported module must be compiled with testing enabled.","type":"text"}]},{"level":3,"anchor":"UIApplicationMain","type":"heading","text":"UIApplicationMain"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a class to indicate that it’s the application delegate. Using this attribute is equivalent to calling the ","type":"text"},{"code":"UIApplicationMain","type":"codeVoice"},{"text":" function and passing this class’s name as the name of the delegate class.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you don’t use this attribute, supply a ","type":"text"},{"code":"main.swift","type":"codeVoice"},{"text":" file with code at the top level that calls the ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain","isActive":true,"type":"reference"},{"text":" [https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain]","type":"text"},{"text":" function. For example, if your app uses a custom subclass of ","type":"text"},{"code":"UIApplication","type":"codeVoice"},{"text":" as its principal class, call the ","type":"text"},{"code":"UIApplicationMain(_:_:_:_:)","type":"codeVoice"},{"text":" function instead of using this attribute.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Swift code you compile to make an executable can contain at most one top-level entry point, as discussed in "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Top-Level-Code","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"level":3,"anchor":"unchecked","type":"heading","text":"unchecked"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a protocol type as part of a type declaration’s list of adopted protocols to turn off enforcement of that protocol’s requirements.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The only supported protocol is ","type":"text"},{"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","isActive":true,"type":"reference"},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/sendable]","type":"text"},{"text":".","type":"text"}]},{"level":3,"anchor":"usableFromInline","type":"heading","text":"usableFromInline"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a function, method, computed property, subscript, initializer, or deinitializer declaration to allow that symbol to be used in inlinable code that’s defined in the same module as the declaration. The declaration must have the ","type":"text"},{"code":"internal","type":"codeVoice"},{"text":" access-level modifier. A structure or class marked ","type":"text"},{"code":"usableFromInline","type":"codeVoice"},{"text":" can use only types that are public or ","type":"text"},{"code":"usableFromInline","type":"codeVoice"},{"text":" for its properties. An enumeration marked ","type":"text"},{"code":"usableFromInline","type":"codeVoice"},{"text":" can use only types that are public or ","type":"text"},{"code":"usableFromInline","type":"codeVoice"},{"text":" for the raw values and associated values of its cases.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Like the "},{"code":"public","type":"codeVoice"},{"type":"text","text":" access-level modifier, this attribute exposes the declaration as part of the module’s public interface. Unlike "},{"code":"public","type":"codeVoice"},{"type":"text","text":", the compiler doesn’t allow declarations marked with "},{"code":"usableFromInline","type":"codeVoice"},{"type":"text","text":" to be referenced by name in code outside the module, even though the declaration’s symbol is exported. However, code outside the module might still be able to interact with the declaration’s symbol by using runtime behavior."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Declarations marked with the "},{"code":"inlinable","type":"codeVoice"},{"type":"text","text":" attribute are implicitly usable from inlinable code. Although either "},{"code":"inlinable","type":"codeVoice"},{"type":"text","text":" or "},{"code":"usableFromInline","type":"codeVoice"},{"type":"text","text":" can be applied to "},{"code":"internal","type":"codeVoice"},{"type":"text","text":" declarations, applying both attributes is an error."}]},{"level":3,"anchor":"warnunqualifiedaccess","type":"heading","text":"warn_unqualified_access"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a top-level function, instance method, or class or static method to trigger warnings when that function or method is used without a preceding qualifier, such as a module name, type name, or instance variable or constant. Use this attribute to help discourage ambiguity between functions with the same name that are accessible from the same scope.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, the Swift standard library includes both a top-level ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","isActive":true},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/]","type":"text"},{"text":" function and a ","type":"text"},{"type":"reference","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min","isActive":true},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min]","type":"text"},{"text":" method for sequences with comparable elements. The sequence method is declared with the ","type":"text"},{"code":"warn_unqualified_access","type":"codeVoice"},{"text":" attribute to help reduce confusion when attempting to use one or the other from within a ","type":"text"},{"code":"Sequence","type":"codeVoice"},{"text":" extension.","type":"text"}]},{"level":3,"anchor":"Declaration-Attributes-Used-by-Interface-Builder","type":"heading","text":"Declaration Attributes Used by Interface Builder"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Interface Builder attributes are declaration attributes used by Interface Builder to synchronize with Xcode. Swift provides the following Interface Builder attributes: "},{"code":"IBAction","type":"codeVoice"},{"type":"text","text":", "},{"code":"IBSegueAction","type":"codeVoice"},{"type":"text","text":", "},{"code":"IBOutlet","type":"codeVoice"},{"type":"text","text":", "},{"code":"IBDesignable","type":"codeVoice"},{"type":"text","text":", and "},{"code":"IBInspectable","type":"codeVoice"},{"type":"text","text":". These attributes are conceptually the same as their Objective-C counterparts."}]},{"type":"paragraph","inlineContent":[{"text":"You apply the ","type":"text"},{"code":"IBOutlet","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"IBInspectable","type":"codeVoice"},{"text":" attributes to property declarations of a class. You apply the ","type":"text"},{"code":"IBAction","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"IBSegueAction","type":"codeVoice"},{"text":" attribute to method declarations of a class and the ","type":"text"},{"code":"IBDesignable","type":"codeVoice"},{"text":" attribute to class declarations.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Applying the "},{"type":"codeVoice","code":"IBAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBSegueAction"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBOutlet"},{"type":"text","text":", "},{"type":"codeVoice","code":"IBDesignable"},{"type":"text","text":", or "},{"type":"codeVoice","code":"IBInspectable"},{"type":"text","text":" attribute also implies the "},{"type":"codeVoice","code":"objc"},{"type":"text","text":" attribute."}]},{"level":2,"anchor":"Type-Attributes","type":"heading","text":"Type Attributes"},{"type":"paragraph","inlineContent":[{"text":"You can apply type attributes to types only.","type":"text"}]},{"level":3,"anchor":"autoclosure","type":"heading","text":"autoclosure"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to delay the evaluation of an expression by automatically wrapping that expression in a closure with no arguments. You apply it to a parameter’s type in a function or method declaration, for a parameter whose type is a function type that takes no arguments and that returns a value of the type of the expression. For an example of how to use the "},{"code":"autoclosure","type":"codeVoice"},{"type":"text","text":" attribute, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Autoclosures","type":"reference","isActive":true},{"type":"text","text":" and "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Function-Type","type":"reference","isActive":true},{"type":"text","text":"."}]},{"level":3,"anchor":"convention","type":"heading","text":"convention"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to the type of a function to indicate its calling conventions."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"convention","type":"codeVoice"},{"type":"text","text":" attribute always appears with one of the following arguments:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"swift","type":"codeVoice"},{"type":"text","text":" argument indicates a Swift function reference. This is the standard calling convention for function values in Swift."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"block"},{"type":"text","text":" argument indicates an Objective-C compatible block reference. The function value is represented as a reference to the block object, which is an "},{"type":"codeVoice","code":"id"},{"type":"text","text":"-compatible Objective-C object that embeds its invocation function within the object. The invocation function uses the C calling convention."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"c"},{"type":"text","text":" argument indicates a C function reference. The function value carries no context and uses the C calling convention."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"With a few exceptions, a function of any calling convention can be used when a function any other calling convention is needed. A nongeneric global function, a local function that doesn’t capture any local variables, or a closure that doesn’t capture any local variables can be converted to the C calling convention. Other Swift functions can’t be converted to the C calling convention. A function with the Objective-C block calling convention can’t be converted to the C calling convention.","type":"text"}]},{"level":3,"anchor":"escaping","type":"heading","text":"escaping"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Apply this attribute to a parameter’s type in a function or method declaration to indicate that the parameter’s value can be stored for later execution. This means that the value is allowed to outlive the lifetime of the call. Function type parameters with the "},{"type":"codeVoice","code":"escaping"},{"type":"text","text":" type attribute require explicit use of "},{"type":"codeVoice","code":"self."},{"type":"text","text":" for properties or methods. For an example of how to use the "},{"type":"codeVoice","code":"escaping"},{"type":"text","text":" attribute, see "},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Escaping-Closures","isActive":true,"type":"reference"},{"type":"text","text":"."}]},{"level":3,"anchor":"Sendable","type":"heading","text":"Sendable"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to the type of a function to indicate that the function or closure is sendable. Applying this attribute to a function type has the same meaning as conforming a non–function type to the ","type":"text"},{"overridingTitle":"Sendable","overridingTitleInlineContent":[{"text":"Sendable","type":"text"}],"identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","isActive":true,"type":"reference"},{"text":" [https:\/\/developer.apple.com\/documentation\/swift\/sendable]","type":"text"},{"text":" protocol.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This attribute is inferred on functions and closures if the function or closure is used in a context that expects a sendable value, and the function or closure satisfies the requirements to be sendable.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"A sendable function type is a subtype of the corresponding nonsendable function type.","type":"text"}]},{"level":2,"anchor":"Switch-Case-Attributes","type":"heading","text":"Switch Case Attributes"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can apply switch case attributes to switch cases only."}]},{"level":3,"anchor":"unknown","type":"heading","text":"unknown"},{"type":"paragraph","inlineContent":[{"text":"Apply this attribute to a switch case to indicate that it isn’t expected to be matched by any case of the enumeration that’s known at the time the code is compiled. For an example of how to use the ","type":"text"},{"code":"unknown","type":"codeVoice"},{"text":" attribute, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}],"type":"aside","name":"Grammar of an attribute","style":"note"}],"kind":"content"}],"metadata":{"roleHeading":"Article","title":"Attributes","role":"article","modules":[{"name":"Swift"}]},"references":{"doc://com.apple.Swift/documentation/Swift/Types":{"kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","abstract":[{"text":"In Swift, there are two kinds of types: named types and compound types. A ","type":"text"},{"inlineContent":[{"text":"named type","type":"text"}],"type":"emphasis"},{"text":" is a type that can be given a particular name when it’s defined. Named types include classes, structures, enumerations, and protocols. For example, instances of a user-defined class named ","type":"text"},{"code":"MyClass","type":"codeVoice"},{"text":" have the type ","type":"text"},{"code":"MyClass","type":"codeVoice"},{"text":". In addition to user-defined named types, the Swift standard library defines many commonly used named types, including those that represent arrays, dictionaries, and optional values.","type":"text"}],"title":"Types","url":"\/documentation\/swift\/types","role":"article"},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Introduction/Introduction.html#//apple_ref/doc/uid/TP40011210":{"url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210","type":"link","titleInlineContent":[{"text":"Programming with Objective-C","type":"text"}],"identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Introduction\/Introduction.html#\/\/apple_ref\/doc\/uid\/TP40011210","title":"Programming with Objective-C"},"https://developer.apple.com/documentation/swift/expressiblebystringliteral":{"title":"ExpressibleByStringLiteral","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebystringliteral","titleInlineContent":[{"text":"ExpressibleByStringLiteral","type":"text"}]},"https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/ProgrammingWithObjectiveC/Conventions/Conventions.html#//apple_ref/doc/uid/TP40011210-CH10-SW1":{"title":"Conventions","type":"link","identifier":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1","url":"https:\/\/developer.apple.com\/library\/content\/documentation\/Cocoa\/Conceptual\/ProgrammingWithObjectiveC\/Conventions\/Conventions.html#\/\/apple_ref\/doc\/uid\/TP40011210-CH10-SW1","titleInlineContent":[{"text":"Conventions","type":"text"}]},"https://developer.apple.com/documentation/swift/keypath":{"title":"KeyPath","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","url":"https:\/\/developer.apple.com\/documentation\/swift\/keypath","titleInlineContent":[{"text":"KeyPath","type":"text"}]},"doc://com.apple.Swift/documentation/Swift/Patterns":{"kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","abstract":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"pattern","type":"text"}],"type":"emphasis"},{"text":" represents the structure of a single value or a composite value. For example, the structure of a tuple ","type":"text"},{"code":"(1, 2)","type":"codeVoice"},{"text":" is a comma-separated list of two elements. Because patterns represent the structure of a value rather than any one particular value, you can match them with a variety of values. For instance, the pattern ","type":"text"},{"code":"(x, y)","type":"codeVoice"},{"text":" matches the tuple ","type":"text"},{"code":"(1, 2)","type":"codeVoice"},{"text":" and any other two-element tuple. In addition to matching a pattern with a value, you can extract part or all of a composite value and bind each part to a constant or variable name.","type":"text"}],"title":"Patterns","url":"\/documentation\/swift\/patterns","role":"article"},"https://developer.apple.com/documentation/foundation/1395135-nsclassfromstring":{"title":"NSClassFromString","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring","url":"https:\/\/developer.apple.com\/documentation\/foundation\/1395135-nsclassfromstring","titleInlineContent":[{"text":"NSClassFromString","type":"text"}]},"https://help.apple.com/xcode/mac/current/#/dev04b3a04ba":{"title":"Xcode Help","type":"link","identifier":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba","url":"https:\/\/help.apple.com\/xcode\/mac\/current\/#\/dev04b3a04ba","titleInlineContent":[{"text":"Xcode Help","type":"text"}]},"https://developer.apple.com/documentation/swift/expressiblebyarrayliteral":{"title":"ExpressibleByArrayLiteral","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebyarrayliteral","titleInlineContent":[{"text":"ExpressibleByArrayLiteral","type":"text"}]},"doc://com.apple.Swift/documentation/Swift/Closures#Escaping-Closures":{"title":"Escaping Closures","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Escaping-Closures","kind":"section","url":"\/documentation\/swift\/closures#Escaping-Closures"},"https://developer.apple.com/documentation/swift/sendable":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","titleInlineContent":[{"type":"text","text":"Sendable"}],"title":"Sendable","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sendable","type":"link"},"doc://com.apple.Swift/documentation/Swift/zzSummaryOfTheGrammar":{"title":"Summary of the Grammar","abstract":[],"kind":"article","role":"article","type":"topic","url":"\/documentation\/swift\/zzsummaryofthegrammar","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar"},"doc://com.apple.Swift/documentation/Swift/Expressions":{"kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","abstract":[{"text":"In Swift, there are four kinds of expressions: prefix expressions, infix expressions, primary expressions, and postfix expressions. Evaluating an expression returns a value, causes a side effect, or both.","type":"text"}],"title":"Expressions","url":"\/documentation\/swift\/expressions","role":"article"},"https://developer.apple.com/documentation/swift/writablekeypath":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath","titleInlineContent":[{"text":"WritableKeyPath","type":"text"}],"title":"WritableKeyPath","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/writablekeypath","type":"link"},"https://developer.apple.com/documentation/swift/referencewritablekeypath":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath","titleInlineContent":[{"type":"text","text":"ReferenceWritableKeyPath"}],"title":"ReferenceWritableKeyPath","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/referencewritablekeypath","type":"link"},"https://developer.apple.com/documentation/uikit/1622933-uiapplicationmain":{"url":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain","titleInlineContent":[{"text":"UIApplicationMain(","type":"text"},{"inlineContent":[{"text":":","type":"text"}],"type":"emphasis"},{"text":":","type":"text"},{"inlineContent":[{"type":"text","text":":"}],"type":"emphasis"},{"text":":)","type":"text"}],"title":"UIApplicationMain(::::)","identifier":"https:\/\/developer.apple.com\/documentation\/uikit\/1622933-uiapplicationmain","type":"link"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators#Result-Builders":{"url":"\/documentation\/swift\/advancedoperators#Result-Builders","abstract":[],"title":"Result Builders","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators#Result-Builders","type":"topic","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Declarations":{"title":"Declarations","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","url":"\/documentation\/swift\/declarations","type":"topic","role":"article","abstract":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"declaration","type":"text"}],"type":"emphasis"},{"text":" introduces a new name or construct into your program. For example, you use declarations to introduce functions and methods, to introduce variables and constants, and to define enumeration, structure, class, and protocol types. You can also use a declaration to extend the behavior of an existing named type and to import symbols into your program that are declared elsewhere.","type":"text"}],"kind":"article"},"https://developer.apple.com/documentation/swift/1538339-min/":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","title":"min(::)","url":"https:\/\/developer.apple.com\/documentation\/swift\/1538339-min\/","titleInlineContent":[{"text":"min(","type":"text"},{"inlineContent":[{"text":":","type":"text"}],"type":"emphasis"},{"text":":)","type":"text"}]},"doc://com.apple.Swift/documentation/Swift/GenericParametersAndArguments":{"kind":"article","role":"article","abstract":[{"type":"text","text":"This chapter describes parameters and arguments for generic types, functions, and initializers. When you declare a generic type, function, subscript, or initializer, you specify the type parameters that the generic type, function, or initializer can work with. These type parameters act as placeholders that are replaced by actual concrete type arguments when an instance of a generic type is created or a generic function or initializer is called."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","title":"Generic Parameters and Arguments","type":"topic","url":"\/documentation\/swift\/genericparametersandarguments"},"doc://com.apple.Swift/documentation/Swift/Statements":{"url":"\/documentation\/swift\/statements","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","type":"topic","title":"Statements","kind":"article","abstract":[{"text":"In Swift, there are three kinds of statements: simple statements, compiler control statements, and control flow statements. Simple statements are the most common and consist of either an expression or a declaration. Compiler control statements allow the program to change aspects of the compiler’s behavior and include a conditional compilation block and a line control statement.","type":"text"}]},"https://developer.apple.com/documentation/swift/sequence/1641174-min":{"type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min","title":"min()","url":"https:\/\/developer.apple.com\/documentation\/swift\/sequence\/1641174-min","titleInlineContent":[{"text":"min()","type":"text"}]},"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral/2294108-key":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key","titleInlineContent":[{"text":"Key","type":"text"}],"title":"Key","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral\/2294108-key","type":"link"},"doc://com.apple.Swift/documentation/Swift/Attributes#inlinable":{"title":"inlinable","type":"topic","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes#inlinable","kind":"section","url":"\/documentation\/swift\/attributes#inlinable"},"https://developer.apple.com/documentation/swift/expressiblebydictionaryliteral":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral","titleInlineContent":[{"text":"ExpressibleByDictionaryLiteral","type":"text"}],"title":"ExpressibleByDictionaryLiteral","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/expressiblebydictionaryliteral","type":"link"},"https://developer.apple.com/documentation/swift/keyvaluepairs":{"title":"KeyValuePairs","type":"link","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs","url":"https:\/\/developer.apple.com\/documentation\/swift\/keyvaluepairs","titleInlineContent":[{"text":"KeyValuePairs","type":"text"}]},"https://developer.apple.com/documentation/swift/imported_c_and_objective-c_apis/importing_swift_into_objective-c":{"url":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c","identifier":"https:\/\/developer.apple.com\/documentation\/swift\/imported_c_and_objective-c_apis\/importing_swift_into_objective-c","titleInlineContent":[{"text":"Importing Swift into Objective-C","type":"text"}],"title":"Importing Swift into Objective-C","type":"link"},"doc://com.apple.Swift/documentation/Swift/Declarations#Top-Level-Code":{"url":"\/documentation\/swift\/declarations#Top-Level-Code","title":"Top-Level Code","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations#Top-Level-Code","abstract":[],"type":"topic"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure":{"url":"\/documentation\/swift\/lexicalstructure","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","type":"topic","title":"Lexical Structure","kind":"article","abstract":[{"text":"The ","type":"text"},{"inlineContent":[{"text":"lexical structure","type":"text"}],"type":"emphasis"},{"text":" of Swift describes what sequence of characters form valid tokens of the language. These valid tokens form the lowest-level building blocks of the language and are used to describe the rest of the language in subsequent chapters. A token consists of an identifier, keyword, punctuation, literal, or operator.","type":"text"}]},"doc://com.apple.Swift/documentation/Swift":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","abstract":[],"title":"Swift","url":"\/documentation\/swift","role":"collection"},"doc://com.apple.Swift/documentation/Swift/AboutTheLanguageReference":{"title":"About the Language Reference","abstract":[{"type":"text","text":"This part of the book describes the formal grammar of the Swift programming language. The grammar described here is intended to help you understand the language in more detail, rather than to allow you to directly implement a parser or compiler."}],"kind":"article","role":"article","type":"topic","url":"\/documentation\/swift\/aboutthelanguagereference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AboutTheLanguageReference"},"doc://com.apple.Swift/documentation/Swift/Closures#Autoclosures":{"url":"\/documentation\/swift\/closures#Autoclosures","abstract":[],"title":"Autoclosures","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures#Autoclosures","type":"topic","kind":"section"},"doc://com.apple.Swift/documentation/Swift/Types#Function-Type":{"abstract":[],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types#Function-Type","kind":"section","title":"Function Type","url":"\/documentation\/swift\/types#Function-Type"}}}