{"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"For an overview of generics in Swift, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"heading","level":2,"anchor":"Generic-Parameter-Clause","text":"Generic Parameter Clause"},{"type":"paragraph","inlineContent":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic parameter clause"}]},{"text":" specifies the type parameters of a generic type or function, along with any associated constraints and requirements on those parameters. A generic parameter clause is enclosed in angle brackets (<>) and has the following form:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["<generic parameter list>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic parameter list"}]},{"type":"text","text":" is a comma-separated list of generic parameters, each of which has the following form:"}]},{"type":"codeListing","syntax":"swift","code":["type parameter: constraint"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A generic parameter consists of a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type parameter"}]},{"type":"text","text":" followed by an optional "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constraint"}]},{"type":"text","text":". A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type parameter"}]},{"type":"text","text":" is simply the name of a placeholder type (for example, "},{"type":"codeVoice","code":"T"},{"type":"text","text":", "},{"type":"codeVoice","code":"U"},{"type":"text","text":", "},{"code":"V","type":"codeVoice"},{"type":"text","text":", "},{"code":"Key","type":"codeVoice"},{"type":"text","text":", "},{"code":"Value","type":"codeVoice"},{"type":"text","text":", and so on). You have access to the type parameters (and any of their associated types) in the rest of the type, function, or initializer declaration, including in the signature of the function or initializer."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"type":"text","text":"constraint"}]},{"type":"text","text":" specifies that a type parameter inherits from a specific class or conforms to a protocol or protocol composition. For example, in the generic function below, the generic parameter "},{"code":"T: Comparable","type":"codeVoice"},{"text":" indicates that any type argument substituted for the type parameter ","type":"text"},{"code":"T","type":"codeVoice"},{"text":" must conform to the ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" protocol.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["func simpleMax<T: Comparable>(_ x: T, _ y: T) -> T {","    if x < y {","        return y","    }","    return x","}"]},{"type":"paragraph","inlineContent":[{"text":"Because ","type":"text"},{"code":"Int","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":", for example, both conform to the ","type":"text"},{"code":"Comparable","type":"codeVoice"},{"text":" protocol, this function accepts arguments of either type. In contrast with generic types, you don’t specify a generic argument clause when you use a generic function or initializer. The type arguments are instead inferred from the type of the arguments passed to the function or initializer.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["simpleMax(17, 42) \/\/ T is inferred to be Int","simpleMax(3.14159, 2.71828) \/\/ T is inferred to be Double"]},{"type":"heading","level":3,"anchor":"Generic-Where-Clauses","text":"Generic Where Clauses"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can specify additional requirements on type parameters and their associated types by including a generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause right before the opening curly brace of a type or function’s body. A generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause consists of the "},{"type":"codeVoice","code":"where"},{"type":"text","text":" keyword, followed by a comma-separated list of one or more "},{"type":"emphasis","inlineContent":[{"text":"requirements","type":"text"}]},{"type":"text","text":"."}]},{"type":"codeListing","syntax":"swift","code":["where requirements"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"inlineContent":[{"type":"text","text":"requirements"}],"type":"emphasis"},{"type":"text","text":" in a generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause specify that a type parameter inherits from a class or conforms to a protocol or protocol composition. Although the generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause provides syntactic sugar for expressing simple constraints on type parameters (for example, "},{"code":"<T: Comparable>","type":"codeVoice"},{"type":"text","text":" is equivalent to "},{"code":"<T> where T: Comparable","type":"codeVoice"},{"type":"text","text":" and so on), you can use it to provide more complex constraints on type parameters and their associated types. For example, you can constrain the associated types of type parameters to conform to protocols. For example, "},{"code":"<S: Sequence> where S.Iterator.Element: Equatable","type":"codeVoice"},{"type":"text","text":" specifies that "},{"code":"S","type":"codeVoice"},{"type":"text","text":" conforms to the "},{"code":"Sequence","type":"codeVoice"},{"type":"text","text":" protocol and that the associated type "},{"code":"S.Iterator.Element","type":"codeVoice"},{"type":"text","text":" conforms to the "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" protocol. This constraint ensures that each element of the sequence is equatable."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also specify the requirement that two types be identical, using the "},{"type":"codeVoice","code":"=="},{"type":"text","text":" operator. For example, "},{"type":"codeVoice","code":"<S1: Sequence, S2: Sequence> where S1.Iterator.Element == S2.Iterator.Element"},{"type":"text","text":" expresses the constraints that "},{"type":"codeVoice","code":"S1"},{"type":"text","text":" and "},{"type":"codeVoice","code":"S2"},{"type":"text","text":" conform to the "},{"type":"codeVoice","code":"Sequence"},{"type":"text","text":" protocol and that the elements of both sequences must be of the same type."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Any type argument substituted for a type parameter must meet all the constraints and requirements placed on the type parameter."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause can appear as part of a declaration that includes type parameters, or as part of a declaration that’s nested inside of a declaration that includes type parameters. The generic "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause for a nested declaration can still refer to the type parameters of the enclosing declaration; however, the requirements from that "},{"type":"codeVoice","code":"where"},{"type":"text","text":" clause apply only to the declaration where it’s written."}]},{"type":"paragraph","inlineContent":[{"text":"If the enclosing declaration also has a ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clause, the requirements from both clauses are combined. In the example below, ","type":"text"},{"code":"startsWithZero()","type":"codeVoice"},{"text":" is available only if ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" conforms to both ","type":"text"},{"code":"SomeProtocol","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Numeric","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension Collection where Element: SomeProtocol {","    func startsWithZero() -> Bool where Element: Numeric {","        return first == .zero","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"You can overload a generic function or initializer by providing different constraints, requirements, or both on the type parameters. When you call an overloaded generic function or initializer, the compiler uses these constraints to resolve which overloaded function or initializer to invoke.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For more information about generic ","type":"text"},{"code":"where","type":"codeVoice"},{"text":" clauses and to see an example of one in a generic function declaration, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Generic-Where-Clauses","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"name":"Grammar of a generic parameter clause"},{"type":"heading","level":2,"anchor":"Generic-Argument-Clause","text":"Generic Argument Clause"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"generic argument clause"}]},{"type":"text","text":" specifies the type arguments of a generic type. A generic argument clause is enclosed in angle brackets (<>) and has the following form:"}]},{"type":"codeListing","syntax":"swift","code":["<generic argument list>"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"text":"generic argument list","type":"text"}]},{"type":"text","text":" is a comma-separated list of type arguments. A "},{"type":"emphasis","inlineContent":[{"type":"text","text":"type argument"}]},{"type":"text","text":" is the name of an actual concrete type that replaces a corresponding type parameter in the generic parameter clause of a generic type. The result is a specialized version of that generic type. The example below shows a simplified version of the Swift standard library’s generic dictionary type."}]},{"type":"codeListing","syntax":"swift","code":["struct Dictionary<Key: Hashable, Value>: Collection, ExpressibleByDictionaryLiteral {","    \/* ... *\/","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The specialized version of the generic "},{"code":"Dictionary","type":"codeVoice"},{"type":"text","text":" type, "},{"code":"Dictionary<String, Int>","type":"codeVoice"},{"type":"text","text":" is formed by replacing the generic parameters "},{"code":"Key: Hashable","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Value","type":"codeVoice"},{"type":"text","text":" with the concrete type arguments "},{"code":"String","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Int","type":"codeVoice"},{"type":"text","text":". Each type argument must satisfy all the constraints of the generic parameter it replaces, including any additional requirements specified in a generic "},{"code":"where","type":"codeVoice"},{"type":"text","text":" clause. In the example above, the "},{"code":"Key","type":"codeVoice"},{"type":"text","text":" type parameter is constrained to conform to the "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" protocol and therefore "},{"code":"String","type":"codeVoice"},{"type":"text","text":" must also conform to the "},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"text":"You can also replace a type parameter with a type argument that’s itself a specialized version of a generic type (provided it satisfies the appropriate constraints and requirements). For example, you can replace the type parameter ","type":"text"},{"code":"Element","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"Array<Element>","type":"codeVoice"},{"text":" with a specialized version of an array, ","type":"text"},{"code":"Array<Int>","type":"codeVoice"},{"text":", to form an array whose elements are themselves arrays of integers.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let arrayOfArrays: Array<Array<Int>> = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"As mentioned in "},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments#Generic-Parameter-Clause","type":"reference"},{"text":", you don’t use a generic argument clause to specify the type arguments of a generic function or initializer.","type":"text"}]},{"type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"","type":"text"}]}],"name":"Grammar of a generic argument clause"}],"kind":"content"}],"sections":[],"seeAlsoSections":[{"generated":true,"title":"Language Reference","identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/AboutTheLanguageReference","doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar"]}],"kind":"article","hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"variants":[{"paths":["\/documentation\/swift\/genericparametersandarguments"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments"},"abstract":[{"text":"This chapter describes parameters and arguments for generic types, functions, and initializers. When you declare a generic type, function, subscript, or initializer, you specify the type parameters that the generic type, function, or initializer can work with. These type parameters act as placeholders that are replaced by actual concrete type arguments when an instance of a generic type is created or a generic function or initializer is called.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"roleHeading":"Article","title":"Generic Parameters and Arguments","role":"article","modules":[{"name":"Swift"}]},"references":{"doc://com.apple.Swift/documentation/Swift/Expressions":{"abstract":[{"text":"In Swift, there are four kinds of expressions: prefix expressions, infix expressions, primary expressions, and postfix expressions. Evaluating an expression returns a value, causes a side effect, or both.","type":"text"}],"url":"\/documentation\/swift\/expressions","role":"article","title":"Expressions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift":{"title":"Swift","url":"\/documentation\/swift","abstract":[],"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","role":"collection","type":"topic"},"doc://com.apple.Swift/documentation/Swift/zzSummaryOfTheGrammar":{"abstract":[],"url":"\/documentation\/swift\/zzsummaryofthegrammar","role":"article","title":"Summary of the Grammar","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Statements":{"abstract":[{"text":"In Swift, there are three kinds of statements: simple statements, compiler control statements, and control flow statements. Simple statements are the most common and consist of either an expression or a declaration. Compiler control statements allow the program to change aspects of the compiler’s behavior and include a conditional compilation block and a line control statement.","type":"text"}],"url":"\/documentation\/swift\/statements","role":"article","title":"Statements","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Patterns":{"abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"pattern","type":"text"}]},{"text":" represents the structure of a single value or a composite value. For example, the structure of a tuple ","type":"text"},{"type":"codeVoice","code":"(1, 2)"},{"text":" is a comma-separated list of two elements. Because patterns represent the structure of a value rather than any one particular value, you can match them with a variety of values. For instance, the pattern ","type":"text"},{"type":"codeVoice","code":"(x, y)"},{"text":" matches the tuple ","type":"text"},{"type":"codeVoice","code":"(1, 2)"},{"text":" and any other two-element tuple. In addition to matching a pattern with a value, you can extract part or all of a composite value and bind each part to a constant or variable name.","type":"text"}],"url":"\/documentation\/swift\/patterns","role":"article","title":"Patterns","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Generics":{"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner.","type":"text"}],"url":"\/documentation\/swift\/generics","role":"article","title":"Generics","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure":{"abstract":[{"text":"The ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"lexical structure","type":"text"}]},{"text":" of Swift describes what sequence of characters form valid tokens of the language. These valid tokens form the lowest-level building blocks of the language and are used to describe the rest of the language in subsequent chapters. A token consists of an identifier, keyword, punctuation, literal, or operator.","type":"text"}],"url":"\/documentation\/swift\/lexicalstructure","role":"article","title":"Lexical Structure","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/AboutTheLanguageReference":{"abstract":[{"text":"This part of the book describes the formal grammar of the Swift programming language. The grammar described here is intended to help you understand the language in more detail, rather than to allow you to directly implement a parser or compiler.","type":"text"}],"url":"\/documentation\/swift\/aboutthelanguagereference","role":"article","title":"About the Language Reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AboutTheLanguageReference","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Types":{"abstract":[{"text":"In Swift, there are two kinds of types: named types and compound types. A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"named type","type":"text"}]},{"text":" is a type that can be given a particular name when it’s defined. Named types include classes, structures, enumerations, and protocols. For example, instances of a user-defined class named ","type":"text"},{"type":"codeVoice","code":"MyClass"},{"text":" have the type ","type":"text"},{"type":"codeVoice","code":"MyClass"},{"text":". In addition to user-defined named types, the Swift standard library defines many commonly used named types, including those that represent arrays, dictionaries, and optional values.","type":"text"}],"url":"\/documentation\/swift\/types","role":"article","title":"Types","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Declarations":{"abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"declaration","type":"text"}]},{"text":" introduces a new name or construct into your program. For example, you use declarations to introduce functions and methods, to introduce variables and constants, and to define enumeration, structure, class, and protocol types. You can also use a declaration to extend the behavior of an existing named type and to import symbols into your program that are declared elsewhere.","type":"text"}],"url":"\/documentation\/swift\/declarations","role":"article","title":"Declarations","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Attributes":{"abstract":[{"text":"There are two kinds of attributes in Swift—those that apply to declarations and those that apply to types. An attribute provides additional information about the declaration or type. For example, the ","type":"text"},{"type":"codeVoice","code":"discardableResult"},{"text":" attribute on a function declaration indicates that, although the function returns a value, the compiler shouldn’t generate a warning if the return value is unused.","type":"text"}],"url":"\/documentation\/swift\/attributes","role":"article","title":"Attributes","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","type":"topic","kind":"article"},"doc://com.apple.Swift/documentation/Swift/GenericParametersAndArguments#Generic-Parameter-Clause":{"type":"topic","url":"\/documentation\/swift\/genericparametersandarguments#Generic-Parameter-Clause","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments#Generic-Parameter-Clause","kind":"section","title":"Generic Parameter Clause"},"doc://com.apple.Swift/documentation/Swift/Generics#Generic-Where-Clauses":{"url":"\/documentation\/swift\/generics#Generic-Where-Clauses","title":"Generic Where Clauses","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics#Generic-Where-Clauses","abstract":[],"type":"topic"}}}