{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting"},"kind":"article","metadata":{"modules":[{"name":"Swift"}],"roleHeading":"Article","role":"article","title":"Type Casting"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swift\/typecasting"]}],"seeAlsoSections":[{"title":"Language Guide","generated":true,"identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"sections":[],"primaryContentSections":[{"content":[{"type":"heading","anchor":"overview","level":2,"text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Type casting in Swift is implemented with the ","type":"text"},{"code":"is","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"as","type":"codeVoice"},{"type":"text","text":" operators. These two operators provide a simple and expressive way to check the type of a value or cast a value to a different type."}]},{"type":"paragraph","inlineContent":[{"text":"You can also use type casting to check whether a type conforms to a protocol, as described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Checking-for-Protocol-Conformance","type":"reference","isActive":true},{"text":".","type":"text"}]},{"text":"Defining a Class Hierarchy for Type Casting","type":"heading","anchor":"Defining-a-Class-Hierarchy-for-Type-Casting","level":2},{"type":"paragraph","inlineContent":[{"text":"You can use type casting with a hierarchy of classes and subclasses to check the type of a particular class instance and to cast that instance to another class within the same hierarchy. The three code snippets below define a hierarchy of classes and an array containing instances of those classes, for use in an example of type casting.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The first snippet defines a new base class called "},{"type":"codeVoice","code":"MediaItem"},{"type":"text","text":". This class provides basic functionality for any kind of item that appears in a digital media library. Specifically, it declares a "},{"type":"codeVoice","code":"name"},{"type":"text","text":" property of type "},{"type":"codeVoice","code":"String"},{"text":", and an ","type":"text"},{"code":"init name","type":"codeVoice"},{"text":" initializer. (It’s assumed that all media items, including all movies and songs, will have a name.)","type":"text"}]},{"syntax":"swift","code":["class MediaItem {","    var name: String","    init(name: String) {","        self.name = name","    }","}"],"type":"codeListing"},{"inlineContent":[{"text":"The next snippet defines two subclasses of ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"text":". The first subclass, ","type":"text"},{"code":"Movie","type":"codeVoice"},{"text":", encapsulates additional information about a movie or film. It adds a ","type":"text"},{"code":"director","type":"codeVoice"},{"text":" property on top of the base ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"text":" class, with a corresponding initializer. The second subclass, ","type":"text"},{"code":"Song","type":"codeVoice"},{"text":", adds an ","type":"text"},{"code":"artist","type":"codeVoice"},{"text":" property and initializer on top of the base class:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class Movie: MediaItem {","    var director: String","    init(name: String, director: String) {","        self.director = director","        super.init(name: name)","    }","}","","class Song: MediaItem {","    var artist: String","    init(name: String, artist: String) {","        self.artist = artist","        super.init(name: name)","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"The final snippet creates a constant array called ","type":"text"},{"type":"codeVoice","code":"library"},{"text":", which contains two ","type":"text"},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" instances and three "},{"code":"Song","type":"codeVoice"},{"type":"text","text":" instances. The type of the "},{"code":"library","type":"codeVoice"},{"type":"text","text":" array is inferred by initializing it with the contents of an array literal. Swift’s type checker is able to deduce that "},{"code":"Movie","type":"codeVoice"},{"type":"text","text":" and "},{"code":"Song","type":"codeVoice"},{"type":"text","text":" have a common superclass of "},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":", and so it infers a type of "},{"code":"[MediaItem]","type":"codeVoice"},{"type":"text","text":" for the "},{"code":"library","type":"codeVoice"},{"type":"text","text":" array:"}]},{"syntax":"swift","code":["let library = [","    Movie(name: \"Casablanca\", director: \"Michael Curtiz\"),","    Song(name: \"Blue Suede Shoes\", artist: \"Elvis Presley\"),","    Movie(name: \"Citizen Kane\", director: \"Orson Welles\"),","    Song(name: \"The One And Only\", artist: \"Chesney Hawkes\"),","    Song(name: \"Never Gonna Give You Up\", artist: \"Rick Astley\")","]","\/\/ the type of \"library\" is inferred to be [MediaItem]"],"type":"codeListing"},{"inlineContent":[{"text":"The items stored in ","type":"text"},{"code":"library","type":"codeVoice"},{"text":" are still ","type":"text"},{"code":"Movie","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Song","type":"codeVoice"},{"text":" instances behind the scenes. However, if you iterate over the contents of this array, the items you receive back are typed as ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"text":", and not as ","type":"text"},{"type":"codeVoice","code":"Movie"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"Song"},{"text":". In order to work with them as their native type, you need to ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"check","type":"text"}]},{"text":" their type, or ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"downcast"}]},{"text":" them to a different type, as described below.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Checking Type","type":"heading","anchor":"Checking-Type"},{"inlineContent":[{"text":"Use the ","type":"text"},{"inlineContent":[{"type":"text","text":"type check operator"}],"type":"emphasis"},{"text":" (","type":"text"},{"code":"is","type":"codeVoice"},{"text":") to check whether an instance is of a certain subclass type. The type check operator returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if the instance is of that subclass type and ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" if it’s not.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"The example below defines two variables, "},{"type":"codeVoice","code":"movieCount"},{"type":"text","text":" and "},{"type":"codeVoice","code":"songCount"},{"type":"text","text":", which count the number of "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances in the "},{"type":"codeVoice","code":"library"},{"type":"text","text":" array:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var movieCount = 0","var songCount = 0","","for item in library {","    if item is Movie {","        movieCount += 1","    } else if item is Song {","        songCount += 1","    }","}","","print(\"Media library contains \\(movieCount) movies and \\(songCount) songs\")","\/\/ Prints \"Media library contains 2 movies and 3 songs\""]},{"inlineContent":[{"text":"This example iterates through all items in the ","type":"text"},{"type":"codeVoice","code":"library"},{"text":" array. On each pass, the ","type":"text"},{"type":"codeVoice","code":"for"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop sets the ","type":"text"},{"code":"item","type":"codeVoice"},{"text":" constant to the next ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"text":" in the array.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"code":"item is Movie","type":"codeVoice"},{"text":" returns ","type":"text"},{"code":"true","type":"codeVoice"},{"text":" if the current ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"text":" is a ","type":"text"},{"code":"Movie","type":"codeVoice"},{"text":" instance and ","type":"text"},{"code":"false","type":"codeVoice"},{"text":" if it’s not. Similarly, ","type":"text"},{"code":"item is Song","type":"codeVoice"},{"text":" checks whether the item is a ","type":"text"},{"code":"Song","type":"codeVoice"},{"text":" instance. At the end of the ","type":"text"},{"code":"for","type":"codeVoice"},{"text":"-","type":"text"},{"code":"in","type":"codeVoice"},{"text":" loop, the values of ","type":"text"},{"code":"movieCount","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"songCount","type":"codeVoice"},{"text":" contain a count of how many ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"text":" instances were found of each type.","type":"text"}],"type":"paragraph"},{"level":2,"text":"Downcasting","type":"heading","anchor":"Downcasting"},{"inlineContent":[{"text":"A constant or variable of a certain class type may actually refer to an instance of a subclass behind the scenes. Where you believe this is the case, you can try to ","type":"text"},{"inlineContent":[{"text":"downcast","type":"text"}],"type":"emphasis"},{"text":" to the subclass type with a ","type":"text"},{"inlineContent":[{"text":"type cast operator","type":"text"}],"type":"emphasis"},{"text":" (","type":"text"},{"type":"codeVoice","code":"as?"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"as!"},{"text":").","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Because downcasting can fail, the type cast operator comes in two different forms. The conditional form, ","type":"text"},{"code":"as?","type":"codeVoice"},{"text":", returns an optional value of the type you are trying to downcast to. The forced form, ","type":"text"},{"code":"as!","type":"codeVoice"},{"text":", attempts the downcast and force-unwraps the result as a single compound action.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Use the conditional form of the type cast operator ("},{"type":"codeVoice","code":"as?"},{"type":"text","text":") when you aren’t sure if the downcast will succeed. This form of the operator will always return an optional value, and the value will be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" if the downcast was not possible. This enables you to check for a successful downcast."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Use the forced form of the type cast operator ("},{"type":"codeVoice","code":"as!"},{"type":"text","text":") only when you are sure that the downcast will always succeed. This form of the operator will trigger a runtime error if you try to downcast to an incorrect class type."}],"type":"paragraph"},{"inlineContent":[{"text":"The example below iterates over each ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"text":" in ","type":"text"},{"code":"library","type":"codeVoice"},{"text":", and prints an appropriate description for each item. To do this, it needs to access each item as a true ","type":"text"},{"code":"Movie","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"Song","type":"codeVoice"},{"text":", and not just as a ","type":"text"},{"code":"MediaItem","type":"codeVoice"},{"text":". This is necessary in order for it to be able to access the ","type":"text"},{"code":"director","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"artist","type":"codeVoice"},{"type":"text","text":" property of a "},{"code":"Movie","type":"codeVoice"},{"type":"text","text":" or "},{"code":"Song","type":"codeVoice"},{"type":"text","text":" for use in the description."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"In this example, each item in the array might be a "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":", or it might be a "},{"type":"codeVoice","code":"Song"},{"type":"text","text":". You don’t know in advance which actual class to use for each item, and so it’s appropriate to use the conditional form of the type cast operator ("},{"type":"codeVoice","code":"as?"},{"type":"text","text":") to check the downcast each time through the loop:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["for item in library {","    if let movie = item as? Movie {","        print(\"Movie: \\(movie.name), dir. \\(movie.director)\")","    } else if let song = item as? Song {","        print(\"Song: \\(song.name), by \\(song.artist)\")","    }","}","","\/\/ Movie: Casablanca, dir. Michael Curtiz","\/\/ Song: Blue Suede Shoes, by Elvis Presley","\/\/ Movie: Citizen Kane, dir. Orson Welles","\/\/ Song: The One And Only, by Chesney Hawkes","\/\/ Song: Never Gonna Give You Up, by Rick Astley"]},{"inlineContent":[{"type":"text","text":"The example starts by trying to downcast the current "},{"code":"item","type":"codeVoice"},{"type":"text","text":" as a "},{"code":"Movie","type":"codeVoice"},{"type":"text","text":". Because "},{"code":"item","type":"codeVoice"},{"type":"text","text":" is a "},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":" instance, it’s possible that it "},{"type":"emphasis","inlineContent":[{"type":"text","text":"might"}]},{"type":"text","text":" be a "},{"code":"Movie","type":"codeVoice"},{"type":"text","text":"; equally, it’s also possible that it might be a "},{"code":"Song","type":"codeVoice"},{"type":"text","text":", or even just a base "},{"code":"MediaItem","type":"codeVoice"},{"type":"text","text":". Because of this uncertainty, the "},{"code":"as?","type":"codeVoice"},{"type":"text","text":" form of the type cast operator returns an "},{"type":"emphasis","inlineContent":[{"type":"text","text":"optional"}]},{"type":"text","text":" value when attempting to downcast to a subclass type. The result of "},{"code":"item as? Movie","type":"codeVoice"},{"type":"text","text":" is of type "},{"code":"Movie?","type":"codeVoice"},{"type":"text","text":", or “optional "},{"code":"Movie","type":"codeVoice"},{"type":"text","text":"”."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Downcasting to "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" fails when applied to the "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances in the library array. To cope with this, the example above uses optional binding to check whether the optional "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" actually contains a value (that is, to find out whether the downcast succeeded.) This optional binding is written “"},{"type":"codeVoice","code":"if let movie = item as? Movie"},{"type":"text","text":"”, which can be read as:"}],"type":"paragraph"},{"inlineContent":[{"text":"“Try to access ","type":"text"},{"type":"codeVoice","code":"item"},{"text":" as a ","type":"text"},{"type":"codeVoice","code":"Movie"},{"text":". If this is successful, set a new temporary constant called ","type":"text"},{"type":"codeVoice","code":"movie"},{"text":" to the value stored in the returned optional ","type":"text"},{"type":"codeVoice","code":"Movie"},{"text":".”","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"If the downcasting succeeds, the properties of "},{"type":"codeVoice","code":"movie"},{"type":"text","text":" are then used to print a description for that "},{"type":"codeVoice","code":"Movie"},{"type":"text","text":" instance, including the name of its "},{"type":"codeVoice","code":"director"},{"type":"text","text":". A similar principle is used to check for "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" instances, and to print an appropriate description (including "},{"type":"codeVoice","code":"artist"},{"type":"text","text":" name) whenever a "},{"type":"codeVoice","code":"Song"},{"type":"text","text":" is found in the library."}],"type":"paragraph"},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Casting doesn’t actually modify the instance or change its values. The underlying instance remains the same; it’s simply treated and accessed as an instance of the type to which it has been cast."}]}],"style":"note","type":"aside"},{"level":2,"text":"Type Casting for Any and AnyObject","type":"heading","anchor":"Type-Casting-for-Any-and-AnyObject"},{"inlineContent":[{"type":"text","text":"Swift provides two special types for working with nonspecific types:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"Any"},{"text":" can represent an instance of any type at all, including function types.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" can represent an instance of any class type."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"Use "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AnyObject"},{"type":"text","text":" only when you explicitly need the behavior and capabilities they provide. It’s always better to be specific about the types you expect to work with in your code."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"Here’s an example of using "},{"type":"codeVoice","code":"Any"},{"type":"text","text":" to work with a mix of different types, including function types and nonclass types. The example creates an array called "},{"type":"codeVoice","code":"things"},{"type":"text","text":", which can store values of type "},{"type":"codeVoice","code":"Any"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["var things: [Any] = []","","things.append(0)","things.append(0.0)","things.append(42)","things.append(3.14159)","things.append(\"hello\")","things.append((3.0, 5.0))","things.append(Movie(name: \"Ghostbusters\", director: \"Ivan Reitman\"))","things.append({ (name: String) -> String in \"Hello, \\(name)\" })"]},{"inlineContent":[{"type":"text","text":"The "},{"code":"things","type":"codeVoice"},{"type":"text","text":" array contains two "},{"code":"Int","type":"codeVoice"},{"type":"text","text":" values, two "},{"code":"Double","type":"codeVoice"},{"type":"text","text":" values, a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value, a tuple of type "},{"code":"(Double, Double)","type":"codeVoice"},{"type":"text","text":", the movie “Ghostbusters”, and a closure expression that takes a "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value and returns another "},{"code":"String","type":"codeVoice"},{"type":"text","text":" value."}],"type":"paragraph"},{"inlineContent":[{"text":"To discover the specific type of a constant or variable that’s known only to be of type ","type":"text"},{"type":"codeVoice","code":"Any"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"AnyObject"},{"text":", you can use an ","type":"text"},{"type":"codeVoice","code":"is"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"as"},{"text":" pattern in a ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement’s cases. The example below iterates over the items in the ","type":"text"},{"type":"codeVoice","code":"things"},{"text":" array and queries the type of each item with a ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement. Several of the ","type":"text"},{"type":"codeVoice","code":"switch"},{"text":" statement’s cases bind their matched value to a constant of the specified type to enable its value to be printed:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["for thing in things {","    switch thing {","    case 0 as Int:","        print(\"zero as an Int\")","    case 0 as Double:","        print(\"zero as a Double\")","    case let someInt as Int:","        print(\"an integer value of \\(someInt)\")","    case let someDouble as Double where someDouble > 0:","        print(\"a positive double value of \\(someDouble)\")","    case is Double:","        print(\"some other double value that I don't want to print\")","    case let someString as String:","        print(\"a string value of \\\"\\(someString)\\\"\")","    case let (x, y) as (Double, Double):","        print(\"an (x, y) point at \\(x), \\(y)\")","    case let movie as Movie:","        print(\"a movie called \\(movie.name), dir. \\(movie.director)\")","    case let stringConverter as (String) -> String:","        print(stringConverter(\"Michael\"))","    default:","        print(\"something else\")","    }","}","","\/\/ zero as an Int","\/\/ zero as a Double","\/\/ an integer value of 42","\/\/ a positive double value of 3.14159","\/\/ a string value of \"hello\"","\/\/ an (x, y) point at 3.0, 5.0","\/\/ a movie called Ghostbusters, dir. Ivan Reitman","\/\/ Hello, Michael"]},{"name":"Note","content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" type represents values of any type, including optional types. Swift gives you a warning if you use an optional value where a value of type ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" is expected. If you really do need to use an optional value as an ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":" value, you can use the ","type":"text"},{"code":"as","type":"codeVoice"},{"text":" operator to explicitly cast the optional to ","type":"text"},{"code":"Any","type":"codeVoice"},{"text":", as shown below.","type":"text"}],"type":"paragraph"},{"code":["let optionalNumber: Int? = 3","things.append(optionalNumber)        \/\/ Warning","things.append(optionalNumber as Any) \/\/ No warning"],"type":"codeListing","syntax":"swift"}],"style":"note","type":"aside"}],"kind":"content"}],"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"abstract":[{"type":"emphasis","inlineContent":[{"text":"Type casting","type":"text"}]},{"text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy.","type":"text"}],"references":{"doc://com.apple.Swift/documentation/Swift/Inheritance":{"role":"article","type":"topic","url":"\/documentation\/swift\/inheritance","abstract":[{"text":"A class can ","type":"text"},{"inlineContent":[{"type":"text","text":"inherit"}],"type":"emphasis"},{"text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a ","type":"text"},{"inlineContent":[{"type":"text","text":"subclass"}],"type":"emphasis"},{"type":"text","text":", and the class it inherits from is known as its "},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"type":"text","text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","title":"Inheritance","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"role":"article","type":"topic","url":"\/documentation\/swift\/deinitialization","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"deinitializer"}],"type":"emphasis"},{"type":"text","text":" is called immediately before a class instance is deallocated. You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword, similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword. Deinitializers are only available on class types."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","title":"Deinitialization","kind":"article"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes":{"role":"article","type":"topic","url":"\/documentation\/swift\/collectiontypes","abstract":[{"type":"text","text":"Swift provides three primary "},{"inlineContent":[{"type":"text","text":"collection types"}],"type":"emphasis"},{"type":"text","text":", known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","title":"Collection Types","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Protocols":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"protocol","type":"text"}]},{"type":"text","text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to "},{"inlineContent":[{"type":"text","text":"conform"}],"type":"emphasis"},{"type":"text","text":" to that protocol."}],"type":"topic","title":"Protocols","role":"article","url":"\/documentation\/swift\/protocols"},"doc://com.apple.Swift/documentation/Swift/Methods":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C."}],"type":"topic","title":"Methods","role":"article","url":"\/documentation\/swift\/methods"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"role":"article","type":"topic","url":"\/documentation\/swift\/classesandstructures","abstract":[{"inlineContent":[{"type":"text","text":"Structures"}],"type":"emphasis"},{"type":"text","text":" and "},{"inlineContent":[{"text":"classes","type":"text"}],"type":"emphasis"},{"type":"text","text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","title":"Structures and Classes","kind":"article"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"url":"\/documentation\/swift\/thebasics","type":"topic","role":"article","title":"The Basics","kind":"article"},"doc://com.apple.Swift/documentation/Swift":{"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","abstract":[],"type":"topic","title":"Swift","role":"collection","url":"\/documentation\/swift"},"doc://com.apple.Swift/documentation/Swift/Functions":{"title":"Functions","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed."}],"url":"\/documentation\/swift\/functions"},"doc://com.apple.Swift/documentation/Swift/NestedTypes":{"url":"\/documentation\/swift\/nestedtypes","type":"topic","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":", whereby you nest supporting enumerations, classes, and structures within the definition of the type they support."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","role":"article"},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors."}],"type":"topic","title":"Memory Safety","role":"article","url":"\/documentation\/swift\/memorysafety"},"doc://com.apple.Swift/documentation/Swift/Properties":{"role":"article","type":"topic","url":"\/documentation\/swift\/properties","abstract":[{"inlineContent":[{"type":"text","text":"Properties"}],"type":"emphasis"},{"type":"text","text":" associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","title":"Properties","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Enumerations":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code."}],"url":"\/documentation\/swift\/enumerations","type":"topic","role":"article","title":"Enumerations","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Closures":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages."}],"url":"\/documentation\/swift\/closures","type":"topic","role":"article","title":"Closures","kind":"article"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"type":"topic","kind":"article","title":"Basic Operators","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","role":"article","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers, as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":", and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values, as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/basicoperators"},"doc://com.apple.Swift/documentation/Swift/Extensions":{"type":"topic","kind":"article","title":"Extensions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as "},{"type":"emphasis","inlineContent":[{"text":"retroactive modeling","type":"text"}]},{"type":"text","text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)"}],"url":"\/documentation\/swift\/extensions"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","abstract":[{"inlineContent":[{"type":"text","text":"Optional chaining"}],"type":"emphasis"},{"text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", the property, method, or subscript call returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/optionalchaining","type":"topic","role":"article","title":"Optional Chaining","kind":"article"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"abstract":[{"type":"text","text":"In addition to the operators described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators"},{"type":"text","text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","title":"Advanced Operators","type":"topic","kind":"article","role":"article","url":"\/documentation\/swift\/advancedoperators"},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements. These include "},{"code":"while","type":"codeVoice"},{"type":"text","text":" loops to perform a task multiple times; "},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" to transfer the flow of execution to another point in your code."}],"type":"topic","title":"Control Flow","role":"article","url":"\/documentation\/swift\/controlflow"},"doc://com.apple.Swift/documentation/Swift/Generics":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner."}],"url":"\/documentation\/swift\/generics","type":"topic","role":"article","title":"Generics","kind":"article"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed."}],"url":"\/documentation\/swift\/automaticreferencecounting","type":"topic","role":"article","title":"Automatic Reference Counting","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use."}],"url":"\/documentation\/swift\/initialization","type":"topic","role":"article","title":"Initialization","kind":"article"},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","abstract":[{"type":"text","text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t."}],"url":"\/documentation\/swift\/opaquetypes","type":"topic","role":"article","title":"Opaque Types","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Concurrency":{"title":"Concurrency","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. "},{"type":"emphasis","inlineContent":[{"text":"Parallel code","type":"text"}]},{"text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way.","type":"text"}],"url":"\/documentation\/swift\/concurrency"},"doc://com.apple.Swift/documentation/Swift/Protocols#Checking-for-Protocol-Conformance":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols#Checking-for-Protocol-Conformance","url":"\/documentation\/swift\/protocols#Checking-for-Protocol-Conformance","title":"Checking for Protocol Conformance","kind":"section","abstract":[],"type":"topic"},"doc://com.apple.Swift/documentation/Swift/Subscripts":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"type":"topic","title":"Subscripts","role":"article","url":"\/documentation\/swift\/subscripts"},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","abstract":[{"inlineContent":[{"type":"text","text":"Access control"}],"type":"emphasis"},{"type":"text","text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used."}],"type":"topic","title":"Access Control","role":"article","url":"\/documentation\/swift\/accesscontrol"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"role":"article","type":"topic","url":"\/documentation\/swift\/stringsandcharacters","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"text":"string","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a series of characters, such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":". Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type. The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways, including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","title":"Strings and Characters","kind":"article"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"type":"topic","title":"Error Handling","role":"article","url":"\/documentation\/swift\/errorhandling"}}}