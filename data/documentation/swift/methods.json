{"sections":[],"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"kind":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C."}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods"},"seeAlsoSections":[{"identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"],"title":"Language Guide","generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swift\/methods"]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"primaryContentSections":[{"content":[{"type":"heading","level":2,"text":"Overview","anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fact that structures and enumerations can define methods in Swift is a major difference from C and Objective-C. In Objective-C, classes are the only types that can define methods. In Swift, you can choose whether to define a class, structure, or enumeration, and still have the flexibility to define methods on the type you create."}]},{"type":"heading","level":2,"text":"Instance Methods","anchor":"Instance-Methods"},{"type":"paragraph","inlineContent":[{"inlineContent":[{"text":"Instance methods","type":"text"}],"type":"emphasis"},{"text":" are functions that belong to instances of a particular class, structure, or enumeration. They support the functionality of those instances, either by providing ways to access and modify instance properties, or by providing functionality related to the instance’s purpose. Instance methods have exactly the same syntax as functions, as described in ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You write an instance method within the opening and closing braces of the type it belongs to. An instance method has implicit access to all other instance methods and properties of that type. An instance method can be called only on a specific instance of the type it belongs to. It can’t be called in isolation without an existing instance."}]},{"type":"paragraph","inlineContent":[{"text":"Here’s an example that defines a simple ","type":"text"},{"type":"codeVoice","code":"Counter"},{"type":"text","text":" class, which can be used to count the number of times an action occurs:"}]},{"type":"codeListing","syntax":"swift","code":["class Counter {","    var count = 0","    func increment() {","        count += 1","    }","    func increment(by amount: Int) {","        count += amount","    }","    func reset() {","        count = 0","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Counter","type":"codeVoice"},{"text":" class defines three instance methods:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"codeVoice","code":"increment()"},{"type":"text","text":" increments the counter by "},{"type":"codeVoice","code":"1"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"codeVoice","code":"increment(by: Int)"},{"type":"text","text":" increments the counter by a specified integer amount."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"reset()"},{"text":" resets the counter to zero.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"Counter"},{"text":" class also declares a variable property, ","type":"text"},{"type":"codeVoice","code":"count"},{"text":", to keep track of the current counter value.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"You call instance methods with the same dot syntax as properties:"}]},{"type":"codeListing","syntax":"swift","code":["let counter = Counter()","\/\/ the initial counter value is 0","counter.increment()","\/\/ the counter's value is now 1","counter.increment(by: 5)","\/\/ the counter's value is now 6","counter.reset()","\/\/ the counter's value is now 0"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Function parameters can have both a name (for use within the function’s body) and an argument label (for use when calling the function), as described in "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Function-Argument-Labels-and-Parameter-Names","isActive":true},{"type":"text","text":". The same is true for method parameters, because methods are just functions that are associated with a type."}]},{"type":"heading","level":3,"text":"The self Property","anchor":"The-self-Property"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Every instance of a type has an implicit property called "},{"type":"codeVoice","code":"self"},{"type":"text","text":", which is exactly equivalent to the instance itself. You use the "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property to refer to the current instance within its own instance methods."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"increment()","type":"codeVoice"},{"type":"text","text":" method in the example above could have been written like this:"}]},{"type":"codeListing","syntax":"swift","code":["func increment() {","    self.count += 1","}"]},{"type":"paragraph","inlineContent":[{"text":"In practice, you don’t need to write ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" in your code very often. If you don’t explicitly write ","type":"text"},{"type":"codeVoice","code":"self"},{"text":", Swift assumes that you are referring to a property or method of the current instance whenever you use a known property or method name within a method. This assumption is demonstrated by the use of ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" (rather than ","type":"text"},{"type":"codeVoice","code":"self.count"},{"type":"text","text":") inside the three instance methods for "},{"code":"Counter","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The main exception to this rule occurs when a parameter name for an instance method has the same name as a property of that instance. In this situation, the parameter name takes precedence, and it becomes necessary to refer to the property in a more qualified way. You use the "},{"code":"self","type":"codeVoice"},{"type":"text","text":" property to distinguish between the parameter name and the property name."}]},{"type":"paragraph","inlineContent":[{"text":"Here, ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" disambiguates between a method parameter called ","type":"text"},{"type":"codeVoice","code":"x"},{"text":" and an instance property that’s also called ","type":"text"},{"type":"codeVoice","code":"x"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Point {","    var x = 0.0, y = 0.0","    func isToTheRightOf(x: Double) -> Bool {","        return self.x > x","    }","}","let somePoint = Point(x: 4.0, y: 5.0)","if somePoint.isToTheRightOf(x: 1.0) {","    print(\"This point is to the right of the line where x == 1.0\")","}","\/\/ Prints \"This point is to the right of the line where x == 1.0\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Without the "},{"code":"self","type":"codeVoice"},{"type":"text","text":" prefix, Swift would assume that both uses of "},{"code":"x","type":"codeVoice"},{"type":"text","text":" referred to the method parameter called "},{"code":"x","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"heading","level":3,"text":"Modifying Value Types from Within Instance Methods","anchor":"Modifying-Value-Types-from-Within-Instance-Methods"},{"type":"paragraph","inlineContent":[{"text":"Structures and enumerations are ","type":"text"},{"inlineContent":[{"type":"text","text":"value types"}],"type":"emphasis"},{"text":". By default, the properties of a value type can’t be modified from within its instance methods.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, if you need to modify the properties of your structure or enumeration within a particular method, you can opt in to "},{"inlineContent":[{"type":"text","text":"mutating"}],"type":"emphasis"},{"type":"text","text":" behavior for that method. The method can then mutate (that is, change) its properties from within the method, and any changes that it makes are written back to the original structure when the method ends. The method can also assign a completely new instance to its implicit "},{"type":"codeVoice","code":"self"},{"type":"text","text":" property, and this new instance will replace the existing one when the method ends."}]},{"type":"paragraph","inlineContent":[{"text":"You can opt in to this behavior by placing the ","type":"text"},{"type":"codeVoice","code":"mutating"},{"text":" keyword before the ","type":"text"},{"type":"codeVoice","code":"func"},{"text":" keyword for that method:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Point {","    var x = 0.0, y = 0.0","    mutating func moveBy(x deltaX: Double, y deltaY: Double) {","        x += deltaX","        y += deltaY","    }","}","var somePoint = Point(x: 1.0, y: 1.0)","somePoint.moveBy(x: 2.0, y: 3.0)","print(\"The point is now at (\\(somePoint.x), \\(somePoint.y))\")","\/\/ Prints \"The point is now at (3.0, 4.0)\""]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Point","type":"codeVoice"},{"text":" structure above defines a mutating ","type":"text"},{"code":"moveBy(x:y:)","type":"codeVoice"},{"text":" method, which moves a ","type":"text"},{"code":"Point","type":"codeVoice"},{"text":" instance by a certain amount. Instead of returning a new point, this method actually modifies the point on which it’s called. The ","type":"text"},{"code":"mutating","type":"codeVoice"},{"text":" keyword is added to its definition to enable it to modify its properties.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"Note that you can’t call a mutating method on a constant of structure type, because its properties can’t be changed, even if they’re variable properties, as described in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Stored-Properties-of-Constant-Structure-Instances","type":"reference"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let fixedPoint = Point(x: 3.0, y: 3.0)","fixedPoint.moveBy(x: 2.0, y: 3.0)","\/\/ this will report an error"]},{"type":"heading","level":3,"text":"Assigning to self Within a Mutating Method","anchor":"Assigning-to-self-Within-a-Mutating-Method"},{"type":"paragraph","inlineContent":[{"text":"Mutating methods can assign an entirely new instance to the implicit ","type":"text"},{"type":"codeVoice","code":"self"},{"text":" property. The ","type":"text"},{"type":"codeVoice","code":"Point"},{"text":" example shown above could have been written in the following way instead:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct Point {","    var x = 0.0, y = 0.0","    mutating func moveBy(x deltaX: Double, y deltaY: Double) {","        self = Point(x: x + deltaX, y: y + deltaY)","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"This version of the mutating ","type":"text"},{"type":"codeVoice","code":"moveBy(x:y:)"},{"text":" method creates a new structure whose ","type":"text"},{"type":"codeVoice","code":"x"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"y"},{"text":" values are set to the target location. The end result of calling this alternative version of the method will be exactly the same as for calling the earlier version.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Mutating methods for enumerations can set the implicit "},{"code":"self","type":"codeVoice"},{"type":"text","text":" parameter to be a different case from the same enumeration:"}]},{"type":"codeListing","syntax":"swift","code":["enum TriStateSwitch {","    case off, low, high","    mutating func next() {","        switch self {","        case .off:","            self = .low","        case .low:","            self = .high","        case .high:","            self = .off","        }","    }","}","var ovenLight = TriStateSwitch.low","ovenLight.next()","\/\/ ovenLight is now equal to .high","ovenLight.next()","\/\/ ovenLight is now equal to .off"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This example defines an enumeration for a three-state switch. The switch cycles between three different power states ("},{"code":"off","type":"codeVoice"},{"type":"text","text":", "},{"code":"low","type":"codeVoice"},{"type":"text","text":" and "},{"code":"high","type":"codeVoice"},{"type":"text","text":") every time its "},{"code":"next()","type":"codeVoice"},{"type":"text","text":" method is called."}]},{"type":"heading","level":2,"text":"Type Methods","anchor":"Type-Methods"},{"type":"paragraph","inlineContent":[{"text":"Instance methods, as described above, are methods that you call on an instance of a particular type. You can also define methods that are called on the type itself. These kinds of methods are called ","type":"text"},{"inlineContent":[{"text":"type methods","type":"text"}],"type":"emphasis"},{"text":". You indicate type methods by writing the ","type":"text"},{"code":"static","type":"codeVoice"},{"text":" keyword before the method’s ","type":"text"},{"code":"func","type":"codeVoice"},{"text":" keyword. Classes can use the ","type":"text"},{"code":"class","type":"codeVoice"},{"text":" keyword instead, to allow subclasses to override the superclass’s implementation of that method.","type":"text"}]},{"type":"aside","style":"note","content":[{"inlineContent":[{"text":"In Objective-C, you can define type-level methods only for Objective-C classes. In Swift, you can define type-level methods for all classes, structures, and enumerations. Each type method is explicitly scoped to the type it supports.","type":"text"}],"type":"paragraph"}],"name":"Note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Type methods are called with dot syntax, like instance methods. However, you call type methods on the type, not on an instance of that type. Here’s how you call a type method on a class called "},{"type":"codeVoice","code":"SomeClass"},{"type":"text","text":":"}]},{"type":"codeListing","syntax":"swift","code":["class SomeClass {","    class func someTypeMethod() {","        \/\/ type method implementation goes here","    }","}","SomeClass.someTypeMethod()"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Within the body of a type method, the implicit "},{"code":"self","type":"codeVoice"},{"type":"text","text":" property refers to the type itself, rather than an instance of that type. This means that you can use "},{"code":"self","type":"codeVoice"},{"type":"text","text":" to disambiguate between type properties and type method parameters, just as you do for instance properties and instance method parameters."}]},{"type":"paragraph","inlineContent":[{"text":"More generally, any unqualified method and property names that you use within the body of a type method will refer to other type-level methods and properties. A type method can call another type method with the other method’s name, without needing to prefix it with the type name. Similarly, type methods on structures and enumerations can access type properties by using the type property’s name without a type name prefix.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The example below defines a structure called ","type":"text"},{"code":"LevelTracker","type":"codeVoice"},{"text":", which tracks a player’s progress through the different levels or stages of a game. It’s a single-player game, but can store information for multiple players on a single device.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"All of the game’s levels (apart from level one) are locked when the game is first played. Every time a player finishes a level, that level is unlocked for all players on the device. The ","type":"text"},{"code":"LevelTracker","type":"codeVoice"},{"text":" structure uses type properties and methods to keep track of which levels of the game have been unlocked. It also tracks the current level for an individual player.","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["struct LevelTracker {","    static var highestUnlockedLevel = 1","    var currentLevel = 1","","    static func unlock(_ level: Int) {","        if level > highestUnlockedLevel { highestUnlockedLevel = level }","    }","","    static func isUnlocked(_ level: Int) -> Bool {","        return level <= highestUnlockedLevel","    }","","    @discardableResult","    mutating func advance(to level: Int) -> Bool {","        if LevelTracker.isUnlocked(level) {","            currentLevel = level","            return true","        } else {","            return false","        }","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"LevelTracker","type":"codeVoice"},{"text":" structure keeps track of the highest level that any player has unlocked. This value is stored in a type property called ","type":"text"},{"code":"highestUnlockedLevel","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" also defines two type functions to work with the "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":" property. The first is a type function called "},{"type":"codeVoice","code":"unlock(_:)"},{"type":"text","text":", which updates the value of "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":" whenever a new level is unlocked. The second is a convenience type function called "},{"type":"codeVoice","code":"isUnlocked(_:)"},{"type":"text","text":", which returns "},{"type":"codeVoice","code":"true"},{"type":"text","text":" if a particular level number is already unlocked. (Note that these type methods can access the "},{"type":"codeVoice","code":"highestUnlockedLevel"},{"type":"text","text":" type property without your needing to write it as "},{"type":"codeVoice","code":"LevelTracker.highestUnlockedLevel"},{"type":"text","text":".)"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"In addition to its type property and type methods, "},{"type":"codeVoice","code":"LevelTracker"},{"type":"text","text":" tracks an individual player’s progress through the game. It uses an instance property called "},{"type":"codeVoice","code":"currentLevel"},{"type":"text","text":" to track the level that a player is currently playing."}]},{"type":"paragraph","inlineContent":[{"text":"To help manage the ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"text":" property, ","type":"text"},{"type":"codeVoice","code":"LevelTracker"},{"text":" defines an instance method called ","type":"text"},{"type":"codeVoice","code":"advance(to:)"},{"text":". Before updating ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"text":", this method checks whether the requested new level is already unlocked. The ","type":"text"},{"type":"codeVoice","code":"advance(to:)"},{"text":" method returns a Boolean value to indicate whether or not it was actually able to set ","type":"text"},{"type":"codeVoice","code":"currentLevel"},{"text":". Because it’s not necessarily a mistake for code that calls the ","type":"text"},{"type":"codeVoice","code":"advance(to:)"},{"text":" method to ignore the return value, this function is marked with the ","type":"text"},{"type":"codeVoice","code":"@discardableResult"},{"text":" attribute. For more information about this attribute, see ","type":"text"},{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","isActive":true,"type":"reference"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"LevelTracker","type":"codeVoice"},{"text":" structure is used with the ","type":"text"},{"code":"Player","type":"codeVoice"},{"text":" class, shown below, to track and update the progress of an individual player:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["class Player {","    var tracker = LevelTracker()","    let playerName: String","    func complete(level: Int) {","        LevelTracker.unlock(level + 1)","        tracker.advance(to: level + 1)","    }","    init(name: String) {","        playerName = name","    }","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"Player","type":"codeVoice"},{"text":" class creates a new instance of ","type":"text"},{"code":"LevelTracker","type":"codeVoice"},{"text":" to track that player’s progress. It also provides a method called ","type":"text"},{"code":"complete(level:)","type":"codeVoice"},{"text":", which is called whenever a player completes a particular level. This method unlocks the next level for all players and updates the player’s progress to move them to the next level. (The Boolean return value of ","type":"text"},{"code":"advance(to:)","type":"codeVoice"},{"text":" is ignored, because the level is known to have been unlocked by the call to ","type":"text"},{"code":"LevelTracker.unlock(_:)","type":"codeVoice"},{"text":" on the previous line.)","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"You can create an instance of the ","type":"text"},{"code":"Player","type":"codeVoice"},{"text":" class for a new player, and see what happens when the player completes level one:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["var player = Player(name: \"Argyrios\")","player.complete(level: 1)","print(\"highest unlocked level is now \\(LevelTracker.highestUnlockedLevel)\")","\/\/ Prints \"highest unlocked level is now 2\""]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you create a second player, whom you try to move to a level that’s not yet unlocked by any player in the game, the attempt to set the player’s current level fails:"}]},{"type":"codeListing","syntax":"swift","code":["player = Player(name: \"Beto\")","if player.tracker.advance(to: 6) {","    print(\"player is now on level 6\")","} else {","    print(\"level 6 hasn't yet been unlocked\")","}","\/\/ Prints \"level 6 hasn't yet been unlocked\""]}],"kind":"content"}],"metadata":{"roleHeading":"Article","role":"article","modules":[{"name":"Swift"}],"title":"Methods"},"references":{"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"type":"topic","role":"article","kind":"article","abstract":[{"type":"emphasis","inlineContent":[{"text":"Error handling","type":"text"}]},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"title":"Error Handling","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","url":"\/documentation\/swift\/errorhandling"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","abstract":[{"inlineContent":[{"text":"Structures","type":"text"}],"type":"emphasis"},{"text":" and ","type":"text"},{"inlineContent":[{"text":"classes","type":"text"}],"type":"emphasis"},{"text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions.","type":"text"}],"title":"Structures and Classes","url":"\/documentation\/swift\/classesandstructures","role":"article"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"title":"Optional Chaining","kind":"article","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Optional chaining"}]},{"type":"text","text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":", the property, method, or subscript call returns "},{"type":"codeVoice","code":"nil"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/optionalchaining","type":"topic"},"doc://com.apple.Swift/documentation/Swift/NestedTypes":{"role":"article","type":"topic","title":"Nested Types","abstract":[{"text":"Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define ","type":"text"},{"inlineContent":[{"text":"nested types","type":"text"}],"type":"emphasis"},{"text":", whereby you nest supporting enumerations, classes, and structures within the definition of the type they support.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/nestedtypes","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"title":"Strings and Characters","abstract":[{"text":"A ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"string","type":"text"}]},{"type":"text","text":" is a series of characters, such as "},{"code":"\"hello, world\"","type":"codeVoice"},{"text":" or ","type":"text"},{"code":"\"albatross\"","type":"codeVoice"},{"text":". Swift strings are represented by the ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" type. The contents of a ","type":"text"},{"code":"String","type":"codeVoice"},{"text":" can be accessed in various ways, including as a collection of ","type":"text"},{"code":"Character","type":"codeVoice"},{"text":" values.","type":"text"}],"type":"topic","kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","role":"article","url":"\/documentation\/swift\/stringsandcharacters"},"doc://com.apple.Swift/documentation/Swift/Closures":{"role":"article","type":"topic","title":"Closures","abstract":[{"inlineContent":[{"type":"text","text":"Closures"}],"type":"emphasis"},{"text":" are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/closures","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures"},"doc://com.apple.Swift/documentation/Swift/Properties":{"url":"\/documentation\/swift\/properties","title":"Properties","abstract":[{"type":"emphasis","inlineContent":[{"text":"Properties","type":"text"}]},{"type":"text","text":" associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"role":"article","type":"topic","title":"Control Flow","abstract":[{"text":"Swift provides a variety of control flow statements. These include ","type":"text"},{"code":"while","type":"codeVoice"},{"text":" loops to perform a task multiple times; ","type":"text"},{"code":"if","type":"codeVoice"},{"text":", ","type":"text"},{"code":"guard","type":"codeVoice"},{"text":", and ","type":"text"},{"code":"switch","type":"codeVoice"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" to transfer the flow of execution to another point in your code."}],"kind":"article","url":"\/documentation\/swift\/controlflow","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes":{"role":"article","type":"topic","title":"Collection Types","abstract":[{"text":"Swift provides three primary ","type":"text"},{"inlineContent":[{"text":"collection types","type":"text"}],"type":"emphasis"},{"text":", known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations.","type":"text"}],"kind":"article","url":"\/documentation\/swift\/collectiontypes","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes"},"doc://com.apple.Swift/documentation/Swift/Subscripts":{"abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"text":"subscripts","type":"text"}]},{"type":"text","text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an "},{"type":"codeVoice","code":"Array"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someArray[index]"},{"type":"text","text":" and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance as "},{"type":"codeVoice","code":"someDictionary[key]"},{"type":"text","text":"."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","title":"Subscripts","url":"\/documentation\/swift\/subscripts","role":"article","kind":"article","type":"topic"},"doc://com.apple.Swift/documentation/Swift/Generics":{"role":"article","type":"topic","title":"Generics","kind":"article","abstract":[{"inlineContent":[{"type":"text","text":"Generic code"}],"type":"emphasis"},{"text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner.","type":"text"}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","url":"\/documentation\/swift\/generics"},"doc://com.apple.Swift/documentation/Swift/TypeCasting":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","role":"article","abstract":[{"inlineContent":[{"text":"Type casting","type":"text"}],"type":"emphasis"},{"text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy.","type":"text"}],"title":"Type Casting","url":"\/documentation\/swift\/typecasting","type":"topic"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"abstract":[{"type":"text","text":"An "},{"inlineContent":[{"text":"operator","type":"text"}],"type":"emphasis"},{"text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator (","type":"text"},{"type":"codeVoice","code":"+"},{"text":") adds two numbers, as in ","type":"text"},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":", and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values, as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"type":"topic","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","url":"\/documentation\/swift\/basicoperators","kind":"article","title":"Basic Operators"},"doc://com.apple.Swift/documentation/Swift/Properties#Stored-Properties-of-Constant-Structure-Instances":{"title":"Stored Properties of Constant Structure Instances","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties#Stored-Properties-of-Constant-Structure-Instances","abstract":[],"kind":"section","type":"topic","url":"\/documentation\/swift\/properties#Stored-Properties-of-Constant-Structure-Instances"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"url":"\/documentation\/swift\/thebasics","title":"The Basics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/Concurrency":{"type":"topic","role":"article","kind":"article","abstract":[{"text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. ","type":"text"},{"inlineContent":[{"type":"text","text":"Asynchronous code"}],"type":"emphasis"},{"text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. ","type":"text"},{"inlineContent":[{"type":"text","text":"Parallel code"}],"type":"emphasis"},{"text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way.","type":"text"}],"title":"Concurrency","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","url":"\/documentation\/swift\/concurrency"},"doc://com.apple.Swift/documentation/Swift/Enumerations":{"title":"Enumerations","kind":"article","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code."}],"url":"\/documentation\/swift\/enumerations","type":"topic"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","role":"article","url":"\/documentation\/swift\/advancedoperators","abstract":[{"text":"In addition to the operators described in ","type":"text"},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","isActive":true},{"text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C.","type":"text"}],"title":"Advanced Operators","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Functions":{"role":"article","type":"topic","title":"Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed."}],"kind":"article","url":"\/documentation\/swift\/functions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions"},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"title":"Access Control","abstract":[{"inlineContent":[{"text":"Access control","type":"text"}],"type":"emphasis"},{"text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used.","type":"text"}],"kind":"article","role":"article","type":"topic","url":"\/documentation\/swift\/accesscontrol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl"},"doc://com.apple.Swift/documentation/Swift":{"kind":"symbol","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","abstract":[],"title":"Swift","url":"\/documentation\/swift","role":"collection"},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"url":"\/documentation\/swift\/opaquetypes","title":"Opaque Types","abstract":[{"text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"title":"Deinitialization","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"deinitializer","type":"text"}]},{"type":"text","text":" is called immediately before a class instance is deallocated. You write deinitializers with the "},{"code":"deinit","type":"codeVoice"},{"text":" keyword, similar to how initializers are written with the ","type":"text"},{"code":"init","type":"codeVoice"},{"text":" keyword. Deinitializers are only available on class types.","type":"text"}],"kind":"article","role":"article","type":"topic","url":"\/documentation\/swift\/deinitialization","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization"},"doc://com.apple.Swift/documentation/Swift/Attributes":{"url":"\/documentation\/swift\/attributes","abstract":[{"text":"There are two kinds of attributes in Swift—those that apply to declarations and those that apply to types. An attribute provides additional information about the declaration or type. For example, the ","type":"text"},{"code":"discardableResult","type":"codeVoice"},{"text":" attribute on a function declaration indicates that, although the function returns a value, the compiler shouldn’t generate a warning if the return value is unused.","type":"text"}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","type":"topic","title":"Attributes","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/Inheritance":{"kind":"article","role":"article","abstract":[{"type":"text","text":"A class can "},{"type":"emphasis","inlineContent":[{"text":"inherit","type":"text"}]},{"type":"text","text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subclass"}]},{"type":"text","text":", and the class it inherits from is known as its "},{"type":"emphasis","inlineContent":[{"text":"superclass","type":"text"}]},{"type":"text","text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","title":"Inheritance","type":"topic","url":"\/documentation\/swift\/inheritance"},"doc://com.apple.Swift/documentation/Swift/Functions#Function-Argument-Labels-and-Parameter-Names":{"title":"Function Argument Labels and Parameter Names","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Function-Argument-Labels-and-Parameter-Names","url":"\/documentation\/swift\/functions#Function-Argument-Labels-and-Parameter-Names","type":"topic","abstract":[],"kind":"section"},"doc://com.apple.Swift/documentation/Swift/Protocols":{"url":"\/documentation\/swift\/protocols","title":"Protocols","abstract":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"protocol","type":"text"}],"type":"emphasis"},{"text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be ","type":"text"},{"inlineContent":[{"type":"text","text":"adopted"}],"type":"emphasis"},{"text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"conform","type":"text"}]},{"text":" to that protocol.","type":"text"}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting":{"url":"\/documentation\/swift\/automaticreferencecounting","title":"Automatic Reference Counting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"text":"Automatic Reference Counting","type":"text"}]},{"type":"text","text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed."}],"type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","kind":"article","role":"article"},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"kind":"article","role":"article","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","title":"Memory Safety","type":"topic","url":"\/documentation\/swift\/memorysafety"},"doc://com.apple.Swift/documentation/Swift/Extensions":{"kind":"article","role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as "},{"type":"emphasis","inlineContent":[{"type":"text","text":"retroactive modeling"}]},{"type":"text","text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)"}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","title":"Extensions","type":"topic","url":"\/documentation\/swift\/extensions"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"url":"\/documentation\/swift\/initialization","role":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","type":"topic","title":"Initialization","kind":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use.","type":"text"}]}}}