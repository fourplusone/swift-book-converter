{"sections":[],"abstract":[{"type":"text","text":"This part of the book describes the formal grammar of the Swift programming language. The grammar described here is intended to help you understand the language in more detail, rather than to allow you to directly implement a parser or compiler."}],"primaryContentSections":[{"content":[{"text":"Overview","type":"heading","anchor":"overview","level":2},{"inlineContent":[{"type":"text","text":"The Swift language is relatively small, because many common types, functions, and operators that appear virtually everywhere in Swift code are actually defined in the Swift standard library. Although these types, functions, and operators aren’t part of the Swift language itself, they’re used extensively in the discussions and code examples in this part of the book."}],"type":"paragraph"},{"text":"How to Read the Grammar","type":"heading","anchor":"How-to-Read-the-Grammar","level":2},{"inlineContent":[{"text":"The notation used to describe the formal grammar of the Swift programming language follows a few conventions:","type":"text"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"An arrow (→) is used to mark grammar productions and can be read as “can consist of.”","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"Syntactic categories are indicated by ","type":"text"},{"inlineContent":[{"type":"text","text":"italic"}],"type":"emphasis"},{"text":" text and appear on both sides of a grammar production rule.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"text":"Literal words and punctuation are indicated by boldface ","type":"text"},{"code":"constant width","type":"codeVoice"},{"text":" text and appear only on the right-hand side of a grammar production rule.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Alternative grammar productions are separated by vertical bars (|). When alternative productions are too long to read easily, they’re broken into multiple grammar production rules on new lines."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"In a few cases, regular font text is used to describe the right-hand side of a grammar production rule."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Optional syntactic categories and literals are marked by a trailing subscript, "},{"type":"emphasis","inlineContent":[{"text":"opt","type":"text"}]},{"type":"text","text":"."}]}]}],"type":"unorderedList"},{"inlineContent":[{"type":"text","text":"As an example, the grammar of a getter-setter block is defined as follows:"}],"type":"paragraph"},{"style":"note","name":"Grammar of a getter-setter block","content":[{"inlineContent":[{"text":"","type":"text"}],"type":"paragraph"}],"type":"aside"},{"inlineContent":[{"text":"This definition indicates that a getter-setter block can consist of a getter clause followed by an optional setter clause, enclosed in braces, ","type":"text"},{"inlineContent":[{"type":"text","text":"or"}],"type":"emphasis"},{"text":" a setter clause followed by a getter clause, enclosed in braces. The grammar production above is equivalent to the following two productions, where the alternatives are spelled out explicitly:","type":"text"}],"type":"paragraph"},{"style":"note","name":"Grammar of a getter-setter block","content":[{"inlineContent":[{"type":"text","text":""}],"type":"paragraph"}],"type":"aside"}],"kind":"content"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/swift\/aboutthelanguagereference"]}],"kind":"article","metadata":{"roleHeading":"Article","modules":[{"name":"Swift"}],"role":"article","title":"About the Language Reference"},"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"seeAlsoSections":[{"generated":true,"title":"Language Reference","identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AboutTheLanguageReference"},"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://com.apple.Swift/documentation/Swift/Types":{"type":"topic","title":"Types","abstract":[{"type":"text","text":"In Swift, there are two kinds of types: named types and compound types. A "},{"type":"emphasis","inlineContent":[{"text":"named type","type":"text"}]},{"type":"text","text":" is a type that can be given a particular name when it’s defined. Named types include classes, structures, enumerations, and protocols. For example, instances of a user-defined class named "},{"type":"codeVoice","code":"MyClass"},{"type":"text","text":" have the type "},{"type":"codeVoice","code":"MyClass"},{"type":"text","text":". In addition to user-defined named types, the Swift standard library defines many commonly used named types, including those that represent arrays, dictionaries, and optional values."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Types","kind":"article","role":"article","url":"\/documentation\/swift\/types"},"doc://com.apple.Swift/documentation/Swift/Attributes":{"url":"\/documentation\/swift\/attributes","abstract":[{"type":"text","text":"There are two kinds of attributes in Swift—those that apply to declarations and those that apply to types. An attribute provides additional information about the declaration or type. For example, the "},{"type":"codeVoice","code":"discardableResult"},{"type":"text","text":" attribute on a function declaration indicates that, although the function returns a value, the compiler shouldn’t generate a warning if the return value is unused."}],"kind":"article","title":"Attributes","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Attributes","role":"article"},"doc://com.apple.Swift/documentation/Swift/Patterns":{"type":"topic","kind":"article","role":"article","title":"Patterns","url":"\/documentation\/swift\/patterns","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Patterns","abstract":[{"text":"A ","type":"text"},{"inlineContent":[{"text":"pattern","type":"text"}],"type":"emphasis"},{"text":" represents the structure of a single value or a composite value. For example, the structure of a tuple ","type":"text"},{"code":"(1, 2)","type":"codeVoice"},{"type":"text","text":" is a comma-separated list of two elements. Because patterns represent the structure of a value rather than any one particular value, you can match them with a variety of values. For instance, the pattern "},{"code":"(x, y)","type":"codeVoice"},{"type":"text","text":" matches the tuple "},{"code":"(1, 2)","type":"codeVoice"},{"type":"text","text":" and any other two-element tuple. In addition to matching a pattern with a value, you can extract part or all of a composite value and bind each part to a constant or variable name."}]},"doc://com.apple.Swift/documentation/Swift/zzSummaryOfTheGrammar":{"type":"topic","title":"Summary of the Grammar","abstract":[],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/zzSummaryOfTheGrammar","kind":"article","role":"article","url":"\/documentation\/swift\/zzsummaryofthegrammar"},"doc://com.apple.Swift/documentation/Swift/Statements":{"type":"topic","title":"Statements","abstract":[{"type":"text","text":"In Swift, there are three kinds of statements: simple statements, compiler control statements, and control flow statements. Simple statements are the most common and consist of either an expression or a declaration. Compiler control statements allow the program to change aspects of the compiler’s behavior and include a conditional compilation block and a line control statement."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Statements","kind":"article","role":"article","url":"\/documentation\/swift\/statements"},"doc://com.apple.Swift/documentation/Swift/LexicalStructure":{"url":"\/documentation\/swift\/lexicalstructure","abstract":[{"type":"text","text":"The "},{"type":"emphasis","inlineContent":[{"text":"lexical structure","type":"text"}]},{"type":"text","text":" of Swift describes what sequence of characters form valid tokens of the language. These valid tokens form the lowest-level building blocks of the language and are used to describe the rest of the language in subsequent chapters. A token consists of an identifier, keyword, punctuation, literal, or operator."}],"kind":"article","title":"Lexical Structure","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/LexicalStructure","role":"article"},"doc://com.apple.Swift/documentation/Swift/GenericParametersAndArguments":{"type":"topic","title":"Generic Parameters and Arguments","abstract":[{"type":"text","text":"This chapter describes parameters and arguments for generic types, functions, and initializers. When you declare a generic type, function, subscript, or initializer, you specify the type parameters that the generic type, function, or initializer can work with. These type parameters act as placeholders that are replaced by actual concrete type arguments when an instance of a generic type is created or a generic function or initializer is called."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/GenericParametersAndArguments","kind":"article","role":"article","url":"\/documentation\/swift\/genericparametersandarguments"},"doc://com.apple.Swift/documentation/Swift/Declarations":{"url":"\/documentation\/swift\/declarations","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"declaration","type":"text"}]},{"type":"text","text":" introduces a new name or construct into your program. For example, you use declarations to introduce functions and methods, to introduce variables and constants, and to define enumeration, structure, class, and protocol types. You can also use a declaration to extend the behavior of an existing named type and to import symbols into your program that are declared elsewhere."}],"kind":"article","title":"Declarations","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Declarations","role":"article"},"doc://com.apple.Swift/documentation/Swift/Expressions":{"type":"topic","title":"Expressions","abstract":[{"type":"text","text":"In Swift, there are four kinds of expressions: prefix expressions, infix expressions, primary expressions, and postfix expressions. Evaluating an expression returns a value, causes a side effect, or both."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Expressions","kind":"article","role":"article","url":"\/documentation\/swift\/expressions"},"doc://com.apple.Swift/documentation/Swift":{"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","abstract":[],"type":"topic","title":"Swift","role":"collection","url":"\/documentation\/swift"}}}