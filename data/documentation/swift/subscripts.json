{"sections":[],"identifier":{"url":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Subscripts","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Classes, structures, and enumerations can define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"subscripts"}]},{"type":"text","text":", which are shortcuts for accessing the member elements of a collection, list, or sequence. You use subscripts to set and retrieve values by index without needing separate methods for setting and retrieval. For example, you access elements in an "},{"code":"Array","type":"codeVoice"},{"type":"text","text":" instance as "},{"code":"someArray[index]","type":"codeVoice"},{"type":"text","text":" and elements in a "},{"type":"codeVoice","code":"Dictionary"},{"text":" instance as ","type":"text"},{"type":"codeVoice","code":"someDictionary[key]"},{"text":".","type":"text"}],"primaryContentSections":[{"content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"text":"You can define multiple subscripts for a single type, and the appropriate subscript overload to use is selected based on the type of index value you pass to the subscript. Subscripts aren’t limited to a single dimension, and you can define subscripts with multiple input parameters to suit your custom type’s needs.","type":"text"}],"type":"paragraph"},{"anchor":"Subscript-Syntax","text":"Subscript Syntax","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"Subscripts enable you to query instances of a type by writing one or more values in square brackets after the instance name. Their syntax is similar to both instance method syntax and computed property syntax. You write subscript definitions with the "},{"type":"codeVoice","code":"subscript"},{"type":"text","text":" keyword, and specify one or more input parameters and a return type, in the same way as instance methods. Unlike instance methods, subscripts can be read-write or read-only. This behavior is communicated by a getter and setter in the same way as for computed properties:"}],"type":"paragraph"},{"syntax":"swift","code":["subscript(index: Int) -> Int {","    get {","        \/\/ Return an appropriate subscript value here.","    }","    set(newValue) {","        \/\/ Perform a suitable setting action here.","    }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"The type of "},{"code":"newValue","type":"codeVoice"},{"type":"text","text":" is the same as the return value of the subscript. As with computed properties, you can choose not to specify the setter’s "},{"type":"codeVoice","code":"(newValue)"},{"text":" parameter. A default parameter called ","type":"text"},{"type":"codeVoice","code":"newValue"},{"text":" is provided to your setter if you don’t provide one yourself.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"As with read-only computed properties, you can simplify the declaration of a read-only subscript by removing the ","type":"text"},{"code":"get","type":"codeVoice"},{"text":" keyword and its braces:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["subscript(index: Int) -> Int {","    \/\/ Return an appropriate subscript value here.","}"]},{"inlineContent":[{"text":"Here’s an example of a read-only subscript implementation, which defines a ","type":"text"},{"code":"TimesTable","type":"codeVoice"},{"text":" structure to represent an ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"n"}]},{"text":"-times-table of integers:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct TimesTable {","    let multiplier: Int","    subscript(index: Int) -> Int {","        return multiplier * index","    }","}","let threeTimesTable = TimesTable(multiplier: 3)","print(\"six times three is \\(threeTimesTable[6])\")","\/\/ Prints \"six times three is 18\""]},{"inlineContent":[{"type":"text","text":"In this example, a new instance of "},{"code":"TimesTable","type":"codeVoice"},{"type":"text","text":" is created to represent the three-times-table. This is indicated by passing a value of "},{"code":"3","type":"codeVoice"},{"type":"text","text":" to the structure’s "},{"code":"initializer","type":"codeVoice"},{"type":"text","text":" as the value to use for the instance’s "},{"code":"multiplier","type":"codeVoice"},{"type":"text","text":" parameter."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can query the "},{"type":"codeVoice","code":"threeTimesTable"},{"type":"text","text":" instance by calling its subscript, as shown in the call to "},{"type":"codeVoice","code":"threeTimesTable[6]"},{"type":"text","text":". This requests the sixth entry in the three-times-table, which returns a value of "},{"type":"codeVoice","code":"18"},{"type":"text","text":", or "},{"type":"codeVoice","code":"3"},{"type":"text","text":" times "},{"type":"codeVoice","code":"6"},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"inlineContent":[{"text":"An ","type":"text"},{"inlineContent":[{"type":"text","text":"n"}],"type":"emphasis"},{"text":"-times-table is based on a fixed mathematical rule. It isn’t appropriate to set ","type":"text"},{"type":"codeVoice","code":"threeTimesTable[someIndex]"},{"text":" to a new value, and so the subscript for ","type":"text"},{"type":"codeVoice","code":"TimesTable"},{"text":" is defined as a read-only subscript.","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"},{"level":2,"text":"Subscript Usage","type":"heading","anchor":"Subscript-Usage"},{"inlineContent":[{"text":"The exact meaning of “subscript” depends on the context in which it’s used. Subscripts are typically used as a shortcut for accessing the member elements in a collection, list, or sequence. You are free to implement subscripts in the most appropriate way for your particular class or structure’s functionality.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For example, Swift’s "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" type implements a subscript to set and retrieve the values stored in a "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" instance. You can set a value in a dictionary by providing a key of the dictionary’s key type within subscript brackets, and assigning a value of the dictionary’s value type to the subscript:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var numberOfLegs = [\"spider\": 8, \"ant\": 6, \"cat\": 4]","numberOfLegs[\"bird\"] = 2"]},{"inlineContent":[{"type":"text","text":"The example above defines a variable called "},{"code":"numberOfLegs","type":"codeVoice"},{"type":"text","text":" and initializes it with a dictionary literal containing three key-value pairs. The type of the "},{"type":"codeVoice","code":"numberOfLegs"},{"type":"text","text":" dictionary is inferred to be "},{"type":"codeVoice","code":"[String: Int]"},{"type":"text","text":". After creating the dictionary, this example uses subscript assignment to add a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" key of "},{"type":"codeVoice","code":"\"bird\""},{"type":"text","text":" and an "},{"type":"codeVoice","code":"Int"},{"type":"text","text":" value of "},{"type":"codeVoice","code":"2"},{"type":"text","text":" to the dictionary."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"For more information about "},{"type":"codeVoice","code":"Dictionary"},{"type":"text","text":" subscripting, see "},{"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Accessing-and-Modifying-a-Dictionary","isActive":true},{"type":"text","text":"."}],"type":"paragraph"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Swift’s "},{"code":"Dictionary","type":"codeVoice"},{"text":" type implements its key-value subscripting as a subscript that takes and returns an ","type":"text"},{"inlineContent":[{"type":"text","text":"optional"}],"type":"emphasis"},{"text":" type. For the ","type":"text"},{"code":"numberOfLegs","type":"codeVoice"},{"text":" dictionary above, the key-value subscript takes and returns a value of type ","type":"text"},{"code":"Int?","type":"codeVoice"},{"text":", or “optional int”. The ","type":"text"},{"code":"Dictionary","type":"codeVoice"},{"text":" type uses an optional subscript type to model the fact that not every key will have a value, and to give a way to delete a value for a key by assigning a ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" value for that key.","type":"text"}]}],"style":"note","name":"Note","type":"aside"},{"level":2,"text":"Subscript Options","type":"heading","anchor":"Subscript-Options"},{"inlineContent":[{"text":"Subscripts can take any number of input parameters, and these input parameters can be of any type. Subscripts can also return a value of any type.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"Like functions, subscripts can take a varying number of parameters and provide default values for their parameters, as discussed in ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Variadic-Parameters","type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Default-Parameter-Values","type":"reference"},{"text":". However, unlike functions, subscripts can’t use in-out parameters.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"A class or structure can provide as many subscript implementations as it needs, and the appropriate subscript to be used will be inferred based on the types of the value or values that are contained within the subscript brackets at the point that the subscript is used. This definition of multiple subscripts is known as "},{"inlineContent":[{"text":"subscript overloading","type":"text"}],"type":"emphasis"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"text":"While it’s most common for a subscript to take a single parameter, you can also define a subscript with multiple parameters if it’s appropriate for your type. The following example defines a ","type":"text"},{"code":"Matrix","type":"codeVoice"},{"text":" structure, which represents a two-dimensional matrix of ","type":"text"},{"code":"Double","type":"codeVoice"},{"text":" values. The ","type":"text"},{"code":"Matrix","type":"codeVoice"},{"text":" structure’s subscript takes two integer parameters:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct Matrix {","    let rows: Int, columns: Int","    var grid: [Double]","    init(rows: Int, columns: Int) {","        self.rows = rows","        self.columns = columns","        grid = Array(repeating: 0.0, count: rows * columns)","    }","    func indexIsValid(row: Int, column: Int) -> Bool {","        return row >= 0 && row < rows && column >= 0 && column < columns","    }","    subscript(row: Int, column: Int) -> Double {","        get {","            assert(indexIsValid(row: row, column: column), \"Index out of range\")","            return grid[(row * columns) + column]","        }","        set {","            assert(indexIsValid(row: row, column: column), \"Index out of range\")","            grid[(row * columns) + column] = newValue","        }","    }","}"]},{"inlineContent":[{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" provides an initializer that takes two parameters called "},{"type":"codeVoice","code":"rows"},{"type":"text","text":" and "},{"type":"codeVoice","code":"columns"},{"type":"text","text":", and creates an array that’s large enough to store "},{"type":"codeVoice","code":"rows * columns"},{"type":"text","text":" values of type "},{"type":"codeVoice","code":"Double"},{"type":"text","text":". Each position in the matrix is given an initial value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":". To achieve this, the array’s size, and an initial cell value of "},{"type":"codeVoice","code":"0.0"},{"type":"text","text":", are passed to an array initializer that creates and initializes a new array of the correct size. This initializer is described in more detail in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Creating-an-Array-with-a-Default-Value"},{"type":"text","text":"."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can construct a new "},{"code":"Matrix","type":"codeVoice"},{"type":"text","text":" instance by passing an appropriate row and column count to its initializer:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var matrix = Matrix(rows: 2, columns: 2)"]},{"inlineContent":[{"type":"text","text":"The example above creates a new "},{"code":"Matrix","type":"codeVoice"},{"type":"text","text":" instance with two rows and two columns. The "},{"code":"grid","type":"codeVoice"},{"type":"text","text":" array for this "},{"code":"Matrix","type":"codeVoice"},{"type":"text","text":" instance is effectively a flattened version of the matrix, as read from top left to bottom right:"}],"type":"paragraph"},{"inlineContent":[{"type":"image","identifier":"subscriptMatrix01"}],"type":"paragraph"},{"inlineContent":[{"text":"Values in the matrix can be set by passing row and column values into the subscript, separated by a comma:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["matrix[0, 1] = 1.5","matrix[1, 0] = 3.2"]},{"inlineContent":[{"text":"These two statements call the subscript’s setter to set a value of ","type":"text"},{"code":"1.5","type":"codeVoice"},{"text":" in the top right position of the matrix (where ","type":"text"},{"code":"row","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"0","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"column","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"1","type":"codeVoice"},{"text":"), and ","type":"text"},{"code":"3.2","type":"codeVoice"},{"text":" in the bottom left position (where ","type":"text"},{"code":"row","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"1","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"column","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"0","type":"codeVoice"},{"text":"):","type":"text"}],"type":"paragraph"},{"inlineContent":[{"identifier":"subscriptMatrix02","type":"image"}],"type":"paragraph"},{"inlineContent":[{"text":"The ","type":"text"},{"code":"Matrix","type":"codeVoice"},{"text":" subscript’s getter and setter both contain an assertion to check that the subscript’s ","type":"text"},{"code":"row","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"column","type":"codeVoice"},{"text":" values are valid. To assist with these assertions, ","type":"text"},{"type":"codeVoice","code":"Matrix"},{"type":"text","text":" includes a convenience method called "},{"type":"codeVoice","code":"indexIsValid(row:column:)"},{"type":"text","text":", which checks whether the requested "},{"type":"codeVoice","code":"row"},{"type":"text","text":" and "},{"type":"codeVoice","code":"column"},{"type":"text","text":" are inside the bounds of the matrix:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["func indexIsValid(row: Int, column: Int) -> Bool {","    return row >= 0 && row < rows && column >= 0 && column < columns","}"]},{"inlineContent":[{"type":"text","text":"An assertion is triggered if you try to access a subscript that’s outside of the matrix bounds:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["let someValue = matrix[2, 2]","\/\/ This triggers an assert, because [2, 2] is outside of the matrix bounds."]},{"level":2,"text":"Type Subscripts","type":"heading","anchor":"Type-Subscripts"},{"inlineContent":[{"text":"Instance subscripts, as described above, are subscripts that you call on an instance of a particular type. You can also define subscripts that are called on the type itself. This kind of subscript is called a ","type":"text"},{"inlineContent":[{"text":"type subscript","type":"text"}],"type":"emphasis"},{"text":". You indicate a type subscript by writing the ","type":"text"},{"type":"codeVoice","code":"static"},{"text":" keyword before the ","type":"text"},{"type":"codeVoice","code":"subscript"},{"text":" keyword. Classes can use the ","type":"text"},{"type":"codeVoice","code":"class"},{"text":" keyword instead, to allow subclasses to override the superclass’s implementation of that subscript. The example below shows how you define and call a type subscript:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["enum Planet: Int {","    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune","    static subscript(n: Int) -> Planet {","        return Planet(rawValue: n)!","    }","}","let mars = Planet[4]","print(mars)"]}],"kind":"content"}],"seeAlsoSections":[{"generated":true,"title":"Language Guide","identifiers":["doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators"]}],"variants":[{"paths":["\/documentation\/swift\/subscripts"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/com.apple.Swift\/documentation\/Swift"]]},"kind":"article","metadata":{"modules":[{"name":"Swift"}],"roleHeading":"Article","role":"article","title":"Subscripts"},"schemaVersion":{"minor":3,"major":0,"patch":0},"references":{"doc://com.apple.Swift/documentation/Swift/Functions#Variadic-Parameters":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Variadic-Parameters","abstract":[],"kind":"section","title":"Variadic Parameters","type":"topic","url":"\/documentation\/swift\/functions#Variadic-Parameters"},"doc://com.apple.Swift/documentation/Swift/Functions":{"title":"Functions","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Functions"}]},{"type":"text","text":" are self-contained chunks of code that perform a specific task. You give a function a name that identifies what it does, and this name is used to “call” the function to perform its task when needed."}],"url":"\/documentation\/swift\/functions"},"doc://com.apple.Swift/documentation/Swift/ClassesAndStructures":{"role":"article","type":"topic","url":"\/documentation\/swift\/classesandstructures","abstract":[{"inlineContent":[{"type":"text","text":"Structures"}],"type":"emphasis"},{"type":"text","text":" and "},{"inlineContent":[{"text":"classes","type":"text"}],"type":"emphasis"},{"type":"text","text":" are general-purpose, flexible constructs that become the building blocks of your program’s code. You define properties and methods to add functionality to your structures and classes using the same syntax you use to define constants, variables, and functions."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ClassesAndStructures","title":"Structures and Classes","kind":"article"},"doc://com.apple.Swift/documentation/Swift/StringsAndCharacters":{"role":"article","type":"topic","url":"\/documentation\/swift\/stringsandcharacters","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"text":"string","type":"text"}],"type":"emphasis"},{"type":"text","text":" is a series of characters, such as "},{"type":"codeVoice","code":"\"hello, world\""},{"type":"text","text":" or "},{"type":"codeVoice","code":"\"albatross\""},{"type":"text","text":". Swift strings are represented by the "},{"type":"codeVoice","code":"String"},{"type":"text","text":" type. The contents of a "},{"type":"codeVoice","code":"String"},{"type":"text","text":" can be accessed in various ways, including as a collection of "},{"type":"codeVoice","code":"Character"},{"type":"text","text":" values."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/StringsAndCharacters","title":"Strings and Characters","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Deinitialization":{"role":"article","type":"topic","url":"\/documentation\/swift\/deinitialization","abstract":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"deinitializer"}],"type":"emphasis"},{"type":"text","text":" is called immediately before a class instance is deallocated. You write deinitializers with the "},{"type":"codeVoice","code":"deinit"},{"type":"text","text":" keyword, similar to how initializers are written with the "},{"type":"codeVoice","code":"init"},{"type":"text","text":" keyword. Deinitializers are only available on class types."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Deinitialization","title":"Deinitialization","kind":"article"},"subscriptMatrix01":{"alt":null,"identifier":"subscriptMatrix01","variants":[{"traits":["2x","light"],"url":"\/images\/subscriptMatrix01@2x.png"}],"type":"image"},"doc://com.apple.Swift/documentation/Swift/Functions#Default-Parameter-Values":{"title":"Default Parameter Values","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Functions#Default-Parameter-Values","type":"topic","url":"\/documentation\/swift\/functions#Default-Parameter-Values","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Concurrency":{"title":"Concurrency","role":"article","kind":"article","type":"topic","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Concurrency","abstract":[{"type":"text","text":"Swift has built-in support for writing asynchronous and parallel code in a structured way. "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Asynchronous code"}]},{"type":"text","text":" can be suspended and resumed later, although only one piece of the program executes at a time. Suspending and resuming code in your program lets it continue to make progress on short-term operations like updating its UI while continuing to work on long-running operations like fetching data over the network or parsing files. "},{"type":"emphasis","inlineContent":[{"text":"Parallel code","type":"text"}]},{"text":" means multiple pieces of code run simultaneously—for example, a computer with a four-core processor can run four pieces of code at the same time, with each core carrying out one of the tasks. A program that uses parallel and asynchronous code carries out multiple operations at a time; it suspends operations that are waiting for an external system, and makes it easier to write this code in a memory-safe way.","type":"text"}],"url":"\/documentation\/swift\/concurrency"},"doc://com.apple.Swift/documentation/Swift/TheBasics":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TheBasics","abstract":[{"type":"text","text":"Swift is a new programming language for iOS, macOS, watchOS, and tvOS app development. Nonetheless, many parts of Swift will be familiar from your experience of developing in C and Objective-C."}],"url":"\/documentation\/swift\/thebasics","type":"topic","role":"article","title":"The Basics","kind":"article"},"doc://com.apple.Swift/documentation/Swift/OpaqueTypes":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OpaqueTypes","abstract":[{"type":"text","text":"A function or method with an opaque return type hides its return value’s type information. Instead of providing a concrete type as the function’s return type, the return value is described in terms of the protocols it supports. Hiding type information is useful at boundaries between a module and code that calls into the module, because the underlying type of the return value can remain private. Unlike returning a value whose type is a protocol type, opaque types preserve type identity—the compiler has access to the type information, but clients of the module don’t."}],"url":"\/documentation\/swift\/opaquetypes","type":"topic","role":"article","title":"Opaque Types","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Closures":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Closures","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Closures"}]},{"type":"text","text":" are self-contained blocks of functionality that can be passed around and used in your code. Closures in Swift are similar to blocks in C and Objective-C and to lambdas in other programming languages."}],"url":"\/documentation\/swift\/closures","type":"topic","role":"article","title":"Closures","kind":"article"},"doc://com.apple.Swift/documentation/Swift/AdvancedOperators":{"abstract":[{"type":"text","text":"In addition to the operators described in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators"},{"type":"text","text":", Swift provides several advanced operators that perform more complex value manipulation. These include all of the bitwise and bit shifting operators you will be familiar with from C and Objective-C."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AdvancedOperators","title":"Advanced Operators","type":"topic","kind":"article","role":"article","url":"\/documentation\/swift\/advancedoperators"},"doc://com.apple.Swift/documentation/Swift/OptionalChaining":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/OptionalChaining","abstract":[{"inlineContent":[{"type":"text","text":"Optional chaining"}],"type":"emphasis"},{"text":" is a process for querying and calling properties, methods, and subscripts on an optional that might currently be ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":". If the optional contains a value, the property, method, or subscript call succeeds; if the optional is ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":", the property, method, or subscript call returns ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":". Multiple queries can be chained together, and the entire chain fails gracefully if any link in the chain is "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/optionalchaining","type":"topic","role":"article","title":"Optional Chaining","kind":"article"},"doc://com.apple.Swift/documentation/Swift/AccessControl":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AccessControl","abstract":[{"inlineContent":[{"type":"text","text":"Access control"}],"type":"emphasis"},{"type":"text","text":" restricts access to parts of your code from code in other source files and modules. This feature enables you to hide the implementation details of your code, and to specify a preferred interface through which that code can be accessed and used."}],"type":"topic","title":"Access Control","role":"article","url":"\/documentation\/swift\/accesscontrol"},"doc://com.apple.Swift/documentation/Swift/Methods":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Methods","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Methods"}]},{"type":"text","text":" are functions that are associated with a particular type. Classes, structures, and enumerations can all define instance methods, which encapsulate specific tasks and functionality for working with an instance of a given type. Classes, structures, and enumerations can also define type methods, which are associated with the type itself. Type methods are similar to class methods in Objective-C."}],"type":"topic","title":"Methods","role":"article","url":"\/documentation\/swift\/methods"},"doc://com.apple.Swift/documentation/Swift":{"kind":"symbol","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift","abstract":[],"type":"topic","title":"Swift","role":"collection","url":"\/documentation\/swift"},"subscriptMatrix02":{"alt":null,"variants":[{"url":"\/images\/subscriptMatrix02@2x.png","traits":["2x","light"]}],"identifier":"subscriptMatrix02","type":"image"},"doc://com.apple.Swift/documentation/Swift/Extensions":{"type":"topic","kind":"article","title":"Extensions","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Extensions","role":"article","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Extensions"}]},{"type":"text","text":" add new functionality to an existing class, structure, enumeration, or protocol type. This includes the ability to extend types for which you don’t have access to the original source code (known as "},{"type":"emphasis","inlineContent":[{"text":"retroactive modeling","type":"text"}]},{"type":"text","text":"). Extensions are similar to categories in Objective-C. (Unlike Objective-C categories, Swift extensions don’t have names.)"}],"url":"\/documentation\/swift\/extensions"},"doc://com.apple.Swift/documentation/Swift/MemorySafety":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/MemorySafety","abstract":[{"type":"text","text":"By default, Swift prevents unsafe behavior from happening in your code. For example, Swift ensures that variables are initialized before they’re used, memory isn’t accessed after it’s been deallocated, and array indices are checked for out-of-bounds errors."}],"type":"topic","title":"Memory Safety","role":"article","url":"\/documentation\/swift\/memorysafety"},"doc://com.apple.Swift/documentation/Swift/NestedTypes":{"url":"\/documentation\/swift\/nestedtypes","type":"topic","title":"Nested Types","abstract":[{"type":"text","text":"Enumerations are often created to support a specific class or structure’s functionality. Similarly, it can be convenient to define utility classes and structures purely for use within the context of a more complex type. To accomplish this, Swift enables you to define "},{"type":"emphasis","inlineContent":[{"type":"text","text":"nested types"}]},{"type":"text","text":", whereby you nest supporting enumerations, classes, and structures within the definition of the type they support."}],"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/NestedTypes","role":"article"},"doc://com.apple.Swift/documentation/Swift/Enumerations":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Enumerations","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"enumeration"}]},{"type":"text","text":" defines a common type for a group of related values and enables you to work with those values in a type-safe way within your code."}],"url":"\/documentation\/swift\/enumerations","type":"topic","role":"article","title":"Enumerations","kind":"article"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes#Accessing-and-Modifying-a-Dictionary":{"url":"\/documentation\/swift\/collectiontypes#Accessing-and-Modifying-a-Dictionary","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Accessing-and-Modifying-a-Dictionary","type":"topic","abstract":[],"kind":"section","title":"Accessing and Modifying a Dictionary"},"doc://com.apple.Swift/documentation/Swift/TypeCasting":{"abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Type casting"}]},{"type":"text","text":" is a way to check the type of an instance, or to treat that instance as a different superclass or subclass from somewhere else in its own class hierarchy."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/TypeCasting","title":"Type Casting","type":"topic","kind":"article","role":"article","url":"\/documentation\/swift\/typecasting"},"doc://com.apple.Swift/documentation/Swift/ErrorHandling":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ErrorHandling","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Error handling"}]},{"type":"text","text":" is the process of responding to and recovering from error conditions in your program. Swift provides first-class support for throwing, catching, propagating, and manipulating recoverable errors at runtime."}],"type":"topic","title":"Error Handling","role":"article","url":"\/documentation\/swift\/errorhandling"},"doc://com.apple.Swift/documentation/Swift/BasicOperators":{"type":"topic","kind":"article","title":"Basic Operators","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/BasicOperators","role":"article","abstract":[{"type":"text","text":"An "},{"type":"emphasis","inlineContent":[{"type":"text","text":"operator"}]},{"type":"text","text":" is a special symbol or phrase that you use to check, change, or combine values. For example, the addition operator ("},{"type":"codeVoice","code":"+"},{"type":"text","text":") adds two numbers, as in "},{"type":"codeVoice","code":"let i = 1 + 2"},{"type":"text","text":", and the logical AND operator ("},{"type":"codeVoice","code":"&&"},{"type":"text","text":") combines two Boolean values, as in "},{"type":"codeVoice","code":"if enteredDoorCode && passedRetinaScan"},{"type":"text","text":"."}],"url":"\/documentation\/swift\/basicoperators"},"doc://com.apple.Swift/documentation/Swift/Protocols":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Protocols","abstract":[{"type":"text","text":"A "},{"type":"emphasis","inlineContent":[{"text":"protocol","type":"text"}]},{"type":"text","text":" defines a blueprint of methods, properties, and other requirements that suit a particular task or piece of functionality. The protocol can then be "},{"type":"emphasis","inlineContent":[{"type":"text","text":"adopted"}]},{"type":"text","text":" by a class, structure, or enumeration to provide an actual implementation of those requirements. Any type that satisfies the requirements of a protocol is said to "},{"inlineContent":[{"type":"text","text":"conform"}],"type":"emphasis"},{"type":"text","text":" to that protocol."}],"type":"topic","title":"Protocols","role":"article","url":"\/documentation\/swift\/protocols"},"doc://com.apple.Swift/documentation/Swift/AutomaticReferenceCounting":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/AutomaticReferenceCounting","abstract":[{"type":"text","text":"Swift uses "},{"type":"emphasis","inlineContent":[{"type":"text","text":"Automatic Reference Counting"}]},{"type":"text","text":" (ARC) to track and manage your app’s memory usage. In most cases, this means that memory management “just works” in Swift, and you don’t need to think about memory management yourself. ARC automatically frees up the memory used by class instances when those instances are no longer needed."}],"url":"\/documentation\/swift\/automaticreferencecounting","type":"topic","role":"article","title":"Automatic Reference Counting","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Properties":{"role":"article","type":"topic","url":"\/documentation\/swift\/properties","abstract":[{"inlineContent":[{"type":"text","text":"Properties"}],"type":"emphasis"},{"type":"text","text":" associate values with a particular class, structure, or enumeration. Stored properties store constant and variable values as part of an instance, whereas computed properties calculate (rather than store) a value. Computed properties are provided by classes, structures, and enumerations. Stored properties are provided only by classes and structures."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Properties","title":"Properties","kind":"article"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes":{"role":"article","type":"topic","url":"\/documentation\/swift\/collectiontypes","abstract":[{"type":"text","text":"Swift provides three primary "},{"inlineContent":[{"type":"text","text":"collection types"}],"type":"emphasis"},{"type":"text","text":", known as arrays, sets, and dictionaries, for storing collections of values. Arrays are ordered collections of values. Sets are unordered collections of unique values. Dictionaries are unordered collections of key-value associations."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes","title":"Collection Types","kind":"article"},"doc://com.apple.Swift/documentation/Swift/CollectionTypes#Creating-an-Array-with-a-Default-Value":{"title":"Creating an Array with a Default Value","kind":"section","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/CollectionTypes#Creating-an-Array-with-a-Default-Value","type":"topic","url":"\/documentation\/swift\/collectiontypes#Creating-an-Array-with-a-Default-Value","abstract":[]},"doc://com.apple.Swift/documentation/Swift/Generics":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Generics","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Generic code"}]},{"type":"text","text":" enables you to write flexible, reusable functions and types that can work with any type, subject to requirements that you define. You can write code that avoids duplication and expresses its intent in a clear, abstracted manner."}],"url":"\/documentation\/swift\/generics","type":"topic","role":"article","title":"Generics","kind":"article"},"doc://com.apple.Swift/documentation/Swift/ControlFlow":{"kind":"article","identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/ControlFlow","abstract":[{"type":"text","text":"Swift provides a variety of control flow statements. These include "},{"code":"while","type":"codeVoice"},{"type":"text","text":" loops to perform a task multiple times; "},{"code":"if","type":"codeVoice"},{"type":"text","text":", "},{"code":"guard","type":"codeVoice"},{"type":"text","text":", and "},{"type":"codeVoice","code":"switch"},{"type":"text","text":" statements to execute different branches of code based on certain conditions; and statements such as "},{"type":"codeVoice","code":"break"},{"type":"text","text":" and "},{"type":"codeVoice","code":"continue"},{"type":"text","text":" to transfer the flow of execution to another point in your code."}],"type":"topic","title":"Control Flow","role":"article","url":"\/documentation\/swift\/controlflow"},"doc://com.apple.Swift/documentation/Swift/Inheritance":{"role":"article","type":"topic","url":"\/documentation\/swift\/inheritance","abstract":[{"text":"A class can ","type":"text"},{"inlineContent":[{"type":"text","text":"inherit"}],"type":"emphasis"},{"text":" methods, properties, and other characteristics from another class. When one class inherits from another, the inheriting class is known as a ","type":"text"},{"inlineContent":[{"type":"text","text":"subclass"}],"type":"emphasis"},{"type":"text","text":", and the class it inherits from is known as its "},{"inlineContent":[{"type":"text","text":"superclass"}],"type":"emphasis"},{"type":"text","text":". Inheritance is a fundamental behavior that differentiates classes from other types in Swift."}],"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Inheritance","title":"Inheritance","kind":"article"},"doc://com.apple.Swift/documentation/Swift/Initialization":{"identifier":"doc:\/\/com.apple.Swift\/documentation\/Swift\/Initialization","abstract":[{"type":"emphasis","inlineContent":[{"type":"text","text":"Initialization"}]},{"type":"text","text":" is the process of preparing an instance of a class, structure, or enumeration for use. This process involves setting an initial value for each stored property on that instance and performing any other setup or initialization that’s required before the new instance is ready for use."}],"url":"\/documentation\/swift\/initialization","type":"topic","role":"article","title":"Initialization","kind":"article"}}}